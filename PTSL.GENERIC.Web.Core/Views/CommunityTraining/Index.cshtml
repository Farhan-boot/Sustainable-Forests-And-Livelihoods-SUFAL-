@model IEnumerable<PTSL.GENERIC.Web.Core.Model.EntityViewModels.Capacity.CommunityTrainingVM>
@{
	ViewBag.Title = "Community Training List";
}

<div class="row">
	<div class="col-12">
		<div class="card">
			<div class="card-header">
				<div class="col-md-10">
					<h4>Community Training List</h4>
				</div>
				<div class="col-md-2 text-right">
					<a href="/CommunityTraining/Create" class="badge badge-success badge-shadow">Create New</a>
				</div>
			</div>
			<div class="card-body">
               @*asp-action="IndexFilter" asp-controller="CommunityTraining"*@
				<div class="mb-4 green-card p-2">
					<div class="row custom" style="border-radius: 5px;">
						<div class="col-6 p-1">
							@await Html.PartialAsync(
							"~/Views/Shared/_ForestAdministration.cshtml",
							(
							ViewBag.ForestCircleId as SelectList,
							ViewBag.ForestDivisionId as SelectList,
							ViewBag.ForestRangeId as SelectList,
							ViewBag.ForestBeatId as SelectList,
							ViewBag.ForestFcvVcfId as SelectList
							)
							)
						</div>

						<div class="col-6 p-1">
							@await Html.PartialAsync(
							"~/Views/Shared/_CivilAdministration.cshtml",
							(
							ViewBag.DivisionId as SelectList,
							ViewBag.DistrictId as SelectList,
							ViewBag.UpazillaId as SelectList,
							ViewBag.UnionId as SelectList
							)
							)
						</div>
					</div>

					<div class="row custom">
						<div class="col-12 p-1">
							<fieldset class="p-2">
								<legend class="float-none w-auto">Basic Information</legend>
								<div class="row">
									<div class="col pr-1">
										<label class="m-0">Training Organizer</label>
										@Html.DropDownList("TrainingOrganizerId", null, "Select Training Organizer", htmlAttributes: new { })
									</div>
									<div class="col px-1">
										<label class="m-0">Start Date</label>
										<input type="date" id="StartDate" value="@(ViewBag.StartDate is DateTime ? ((DateTime)ViewBag.StartDate).ToUIDateString() : null)" name="StartDate" placeholder="Enter start date" />
									</div>
									<div class="col px-1">
										<label class="m-0">End Date</label>
										<input type="date" id="EndDate" value="@(ViewBag.EndDate is DateTime ? ((DateTime)ViewBag.EndDate).ToUIDateString() : null)" name="EndDate" placeholder="Enter end date" />
									</div>
									<div class="col pl-1">
										<label class="m-0">Event Type</label>
										@Html.DropDownList("EventTypeId", null, "Select Event Type", htmlAttributes: new { })
									</div>
								</div>
							</fieldset>
						</div>
					</div>

					<div class="d-flex justify-content-end mt-2">
						<button id="submit" type="submit" class="btn btn-sm btn-green save">Search</button>
					</div>
				</div>

				<div class="table-responsive">


				@* 	<table class="table table-striped table-bordered table-hover" id="tableExport_filter"
						   style="width:100%;">
						<thead>
							<tr>
								<th>SL</th>
								<th>Training Title</th>
								<th>Organizer</th>
								<th>Start Date</th>
								<th>End Date</th>
								<th>Event Type</th>
								<th>Duration</th>
								<th>Location</th>
								<th class="not-export-col">Action</th>
							</tr>
						</thead> @{
							int i = 1;
						}
						<tbody>
							@if (Model != null)
							{
								foreach (var data in Model)
								{
									<tr>
										<td>@i</td>
										<td>@data.TrainingTitle</td>
										<td>@(data.TrainingOrganizer?.Name)</td>
										<td>@data.StartDate.ToShortDateString()</td>
										<td>@data.EndDate.ToShortDateString()</td>
										<td>@(data.EventType?.Name)</td>
										<td>@data.TrainingDuration</td>
										<td>@data.Location</td>

										<td class="not-export-col">
											<a href="/CommunityTraining/Edit?id=@data.Id"
											   class="btn btn-primary btn-sm">Edit</a>
											<a href="/CommunityTraining/Details?id=@data.Id"
											   class="btn btn-info btn-sm">Details</a>
											<button onclick="showDeleteConfirmMessage(@data.Id)"
													class="btn btn-danger btn-sm">
												Delete
											</button>
										</td>
									</tr>
									i++;
								}
							}
						</tbody>
					</table>
 *@

                    <table id="foodTable" class="display">
                        <thead class="table-content">
                            <tr class="table-row">
                                <th scope="col">SL</th>
                                <th scope="col">Training Title</th>
                                <th scope="col">Organizer</th>
                                <th scope="col">Start Date</th>
                                <th scope="col">End Date</th>
                                <th scope="col">Event Type</th>
                                <th>Duration</th>
                                <th>Location</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody class="table-content">
                        </tbody>
                    </table>



				</div>
			</div>
		</div>
	</div>
</div>

@await Html.PartialAsync("~/Views/Shared/_DataTables.cshtml")

<script>
	$(document).ready(function () {
		$('#tableExport_filter').DataTable({
			pageLength: 5,
			dom: 'lBfrtip',
			buttons: [
				{
				    extend: 'csv',
				    title: 'Community Training List',
				    exportOptions: {
				        columns: [0, 1, 2, 3, 4, 5, 6, 7]
				    }
				},
				{
					extend: 'excel',
					title: 'Community Training List',
					exportOptions: {
				        columns: [0, 1, 2, 3, 4, 5, 6, 7]
					}
				},
				{
					extend: 'pdf',
					title: 'Community Training List',
					exportOptions: {
				        columns: [0, 1, 2, 3, 4, 5, 6, 7]
					}
				},
				{
					extend: 'print',
					title: 'Community Training List',
					exportOptions: {
				        columns: [0, 1, 2, 3, 4, 5, 6, 7]
					}
				}
			]
		});
	});

	function showDeleteConfirmMessage(id) {
		swal({
			title: "Are you sure?",
			text: "You will not be able to recover this item!",
			type: "warning",
			showCancelButton: true,
			confirmButtonColor: "#DD6B55",
			confirmButtonText: "Yes, delete it!",
			closeOnConfirm: false
		}, function () {
			var data = {
				'id': id
			};
			$.ajax({
				type: "GET",
				contentType: "application/json; charset=utf-8",
				url: "/CommunityTraining/Delete",
				data: data,
				datatype: "json",
				success: function (result) {
					console.log(result);
					var message = result.Message;
					var executionState = result.executionState;
					if (executionState != null) {
						if (executionState != 10) {
							swal("Deleted!", "Item has been deleted.", "success");
						} else {
							swal("Deleted Failed!", message, "success");
						}
						$(".confirm").on('click', function () {
							window.location.reload();
						});
					}
				},
				error: function (xmlhttprequest, textstatus, errorthrown) {
					swal("Not Deleted!", "Item has not been deleted.", "error");
				}
			});
		});
	}
</script>



<script>
    // var $j = jQuery.noConflict();
    $(document).ready(function () {
        $('#foodTable').DataTable({
            pageLength: 5,
            dom: 'lBfrtip',
            buttons: [
                {
                    extend: 'csv',
                    title: 'Community Training Information List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6, 7]
                    }
                },
                {
                    extend: 'excel',
                    title: 'Community Training Information List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6, 7]
                    }
                },
                {
                    extend: 'pdf',
                    title: 'Community Training Information List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6, 7]
                    }
                },
                {
                    extend: 'print',
                    title: 'Community Training Information List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6, 7]
                    }
                }
            ],

            "sAjaxSource": "/CommunityTraining/GetCommunityTrainingListByPagination",
            "bDestroy": true,
            "bServerSide": true,
            "bProcessing": true,
            "bSearchable": true,
            "order": [[1, 'asc']],
            "language": {
                "emptyTable": "No record found.",
                "processing":
                    '<i class="fa fa-spinner fa-spin fa-3x fa-fw" style="color:#2a2b2b;"></i><span class="sr-only">Loading...</span> '
            },
            // "fnDrawCallback": function (oSettings) {
            //     alert(oSettings.aoData[1]._aData.Id);
            // },
            "columns": [
                {
                    title: 'Id',
                    data: null,
                    render: (data, type, row, meta) => meta.row
                },
                // {
                //     "data": "Id",
                //     "autoWidth": true,
                //     "searchable": true
                // },

                {
                    "data": "TrainingTitle",
                    "autoWidth": true,
                    "searchable": true
                },
                {
                    "data": "TrainingOrganizer.Name",
                    "autoWidth": true,
                    "searchable": true
                },
                {
                    render: (data, type, row, meta) => {
                        return moment(row.StartDate).format("DD-MM-YYYY");
                    },
                },
                {
                    render: (data, type, row, meta) => {
                        return moment(row.EndDate).format("DD-MM-YYYY");
                    },
                },
                {
                    "data": "EventType.Name",
                    "autoWidth": true,
                    "searchable": true
                },
                {
                    "data": "TrainingDuration",
                    "autoWidth": true,
                    "searchable": true
                },
                {
                    "data": "Location",
                    "autoWidth": true,
                    "searchable": true
                },
                {
                    render: (data, type, row, meta) => {

                        return "<a  href='/CommunityTraining/Edit?id=" + row.Id + " ' $ type='button' data-bs-toggle='modal' data-bs-target='#exampleModal' class='btn btn-sm btn-primary'> Edit </a> <a href='/CommunityTraining/Details?id=" + row.Id + " ' class='btn btn-sm btn-info'>Details</a>  <button onclick='showDeleteConfirmMessage(" + row.Id + ")' class='btn btn-sm btn-danger'>Delete</button>"
                    },
                },
            ]
        });



        //Filter
        $("#submit").click(function () {
            var forestCircleId = Number($("#ForestCircleId").val());
            var forestDivisionId = Number($("#ForestDivisionId").val());
            var forestRangeId = Number($("#ForestRangeId").val());
            var forestBeatId = Number($("#ForestBeatId").val());
            //var fcvVcfType = Number($("#FcvVcfType").val());
            var forestFcvVcfId = Number($("#ForestFcvVcfId").val());
            var divisionId = Number($("#DivisionId").val());
            var districtId = Number($("#DistrictId").val());
            var upazillaId = Number($("#UpazillaId").val());
            var unionId = Number($("#UnionId").val());
            //Extra Filter;
            var TrainingOrganizerId = Number($("#TrainingOrganizerId").val());
            var EventTypeId = Number($("#EventTypeId").val());
            var StartDate =$("#StartDate").val();
            var EndDate = $("#EndDate").val();

            var labourDatabaseFilterVM =
            {
                ForestCircleId: forestCircleId,
                ForestDivisionId: forestDivisionId,
                ForestRangeId: forestRangeId,
                ForestBeatId: forestBeatId,
                //FcvVcfType: fcvVcfType,
                ForestFcvVcfId: forestFcvVcfId,
                DivisionId: divisionId,
                DistrictId: districtId,
                UpazillaId: upazillaId,
                UnionId: unionId,
                TrainingOrganizerId: TrainingOrganizerId,
                EventTypeId: EventTypeId,
                StartDate: StartDate,
                EndDate: EndDate
            };

            $.ajax({
                type: "POST",
                url: "/CommunityTraining/IndexFilterCommunityTrainingListByPagination",
                data: labourDatabaseFilterVM,
                cache: false,
                dataType: 'json',
                success: function (response) {
                    $('#foodTable').DataTable({
                        "bDestroy": true,

                        //"bServerSide": true,
                        //"bProcessing": true,
                        //"bSearchable": true,
                        //"order": [[1, 'asc']],
                        // "language": {
                        //     "emptyTable": "No record found.",
                        //     "processing":
                        //         '<i class="fa fa-spinner fa-spin fa-3x fa-fw" style="color:#2a2b2b;"></i><span class="sr-only">Loading...</span> '
                        // },
                        data: response.aaData,
                        "columns": [
                            {
                                title: 'Id',
                                data: null,
                                render: (data, type, row, meta) => meta.row
                            },
                            // {
                            //     "data": "Id",
                            //     "autoWidth": true,
                            //     "searchable": true
                            // },

                            {
                                "data": "TrainingTitle",
                                "autoWidth": true,
                                "searchable": true
                            },
                            {
                                "data": "TrainingOrganizer.Name",
                                "autoWidth": true,
                                "searchable": true
                            },
                            {
                                render: (data, type, row, meta) => {
                                    return moment(row.StartDate).format("DD-MM-YYYY");
                                },
                            },
                            {
                                render: (data, type, row, meta) => {
                                    return moment(row.EndDate).format("DD-MM-YYYY");
                                },
                            },
                            {
                                "data": "EventType.Name",
                                "autoWidth": true,
                                "searchable": true
                            },
                            {
                                "data": "TrainingDuration",
                                "autoWidth": true,
                                "searchable": true
                            },
                            {
                                "data": "Location",
                                "autoWidth": true,
                                "searchable": true
                            },
                            {
                                render: (data, type, row, meta) => {
                                    return "<a  href='/CommunityTraining/Edit?id=" + row.Id + " ' $ type='button' data-bs-toggle='modal' data-bs-target='#exampleModal' class='btn btn-sm btn-primary'> Edit </a> <a href='/CommunityTraining/Details?id=" + row.Id + " ' class='btn btn-sm btn-info'>Details</a>  <button onclick='showDeleteConfirmMessage(" + row.Id + ")' class='btn btn-sm btn-danger'>Delete</button>"
                                },
                            },
                        ]

                    });
                },
                error: function () {
                    $(".loader").fadeOut("slow");
                    swal(
                        'Unexpected',
                        'Unknown error occurred',
                        'error'
                    );
                }
            });

        });


    });
</script>