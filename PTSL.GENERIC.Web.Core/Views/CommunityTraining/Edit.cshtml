@using PTSL.GENERIC.Web.Core.Helper.Enum.Capacity;
@model PTSL.GENERIC.Web.Core.Model.EntityViewModels.Capacity.CommunityTrainingVM

@{
	ViewBag.Title = "Edit Community Training";
	var Message = ViewBag.Message;
	long.TryParse(Context.Request.Query["id"], out var id);

    var communityTrainingTypeId = (Model.CommunityTrainingTypeId != null && Model.CommunityTrainingTypeId > 0) ? Model.CommunityTrainingTypeId : 0;
}

<style>
    .add-participant-container {
        display: flex;
        align-items: end;
        gap: 8px;
    }

    label.error {
        color: red !important;
    }
    .participantMemberTableContainer {
        display: none;
    }
        .participantMemberTableContainer:has(table tbody tr) {
            display: table;
        }
    .row.custom > div {
        padding-left: 15px !important;
        padding-right: 15px !important;
    }
     .mybutton {
        color: blue;
        height: 34px;
        margin-top: 8px;
        width: 100%;
    }
</style>

<div class="card">
    <div class="card-header">
        <h4>
            <a href="/CommunityTraining/Index" class="mr-1 back">
                <svg width="20" height="20" viewBox="0 0 32 32">
                    <path fill="currentColor" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z" />
                </svg>
            </a>
            Edit Community Training
        </h4>
        <!-- resetFromData('#CommunityTrainingForm') -->
        <button class="ml-auto reset btn btn-sm" onclick="window.location.reload()">
            <svg class="rotate180z" width="16" height="16" viewBox="0 0 32 32">
                <path d="M25.95 7.65l.005-.004c-.092-.11-.197-.206-.293-.312c-.184-.205-.367-.41-.563-.603c-.139-.136-.286-.262-.43-.391c-.183-.165-.366-.329-.558-.482c-.16-.128-.325-.247-.49-.367c-.192-.14-.385-.277-.585-.406a13.513 13.513 0 0 0-.533-.324q-.308-.179-.625-.341c-.184-.094-.37-.185-.56-.27c-.222-.1-.449-.191-.678-.28c-.19-.072-.378-.145-.571-.208c-.246-.082-.498-.15-.75-.217c-.186-.049-.368-.102-.556-.143c-.29-.063-.587-.107-.883-.15c-.16-.023-.315-.056-.476-.073A12.933 12.933 0 0 0 6 7.703V4H4v8h8v-2H6.811A10.961 10.961 0 0 1 16 5a11.111 11.111 0 0 1 1.189.067c.136.015.268.042.403.061c.25.037.501.075.746.128c.16.035.315.08.472.121c.213.057.425.114.633.183c.164.054.325.116.486.178c.193.074.384.15.57.235c.162.072.32.15.477.23q.268.136.526.286c.153.09.305.18.453.276c.168.11.33.224.492.342c.14.102.282.203.417.312c.162.13.316.268.47.406c.123.11.248.217.365.332c.167.164.323.338.479.512A10.993 10.993 0 1 1 5 16H3a13 13 0 1 0 22.95-8.35z" fill="currentColor" />
            </svg>
            Reset
        </button>
    </div>
    <form id="CommunityTrainingForm" class="card-body mt-2">
		<div class="p-2 green-card" style="border-radius: 5px;">
			<div class="row custom forest-location create-member">
				<div class="col-6 p-1">
					@await Html.PartialAsync(
					"~/Views/Shared/_ForestAdministration.cshtml",
					(
					ViewBag.ForestCircleId as SelectList,
					ViewBag.ForestDivisionId as SelectList,
					ViewBag.ForestRangeId as SelectList,
					ViewBag.ForestBeatId as SelectList,
					ViewBag.ForestFcvVcfId as SelectList
					)
					)
				</div>

				<div class="col-6 p-1">
					@await Html.PartialAsync(
					"~/Views/Shared/_CivilAdministration.cshtml",
					(
					ViewBag.DivisionId as SelectList,
					ViewBag.DistrictId as SelectList,
					ViewBag.UpazillaId as SelectList,
					ViewBag.UnionId as SelectList
					)
					)
				</div>
			</div>
		</div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;">
            <fieldset class="p-2 col-12">
                <legend class="float-none w-auto">Training Information</legend>
                <div class="row">
                    <div class="col-6 pr-1">
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label>
                                    Training Title
                                 <span style="color:red;">*</span>
                                </label>
                                <input type="text" id="TrainingTitle" name="TrainingTitle" value="@Model.TrainingTitle" placeholder="Enter Training title" />
                            </div>
                            <div class="col-6 pl-1">
                                <label>
                                    Start Date
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="date" id="StartDate" name="StartDate" value="@Model.StartDate.ToString("yyyy-MM-dd")" placeholder="Start date" />
                            </div>
                        </div>
                    </div>
                    <div class="col-6 pl-1">
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label>
                                    End Date
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="date" id="EndDate" name="EndDate" value="@Model.EndDate.ToString("yyyy-MM-dd")" placeholder="End date" />
                            </div>
                            <div class="col-6 pl-1">
                                <label>
                                    Location
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" id="Location" name="Location" value="@Model.Location" placeholder="Enter Location" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-6 pr-1">
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label>
                                    Training duration
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" id="TrainingDuration" name="TrainingDuration" value="@Model.TrainingDuration" placeholder="Enter Training duration" disabled />
                            </div>
                            <div class="col-6 pl-1">
                                <label>
                                    Trainer name
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" id="TrainerName" name="TrainerName" value="@Model.TrainerName" placeholder="Enter Trainer name" />
                            </div>
                        </div>
                    </div>
                    <div class="col-6 pl-1">
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label>
                                    Event Types
                                    <span style="color:red;">*</span>
                                </label>
                                @Html.DropDownList("EventTypeId", null, "Select Event Types", htmlAttributes: new { @class = "", @required = "required" })
                            </div>
                            <div class="col-6 pl-1">
                                <label>Community Training Type</label>
                                <select id="CommunityTrainingTypeId" name="CommunityTrainingTypeId" disabled>
                                    <option value="">Select Community Training</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
					<div class="col-3 pr-1">
						<label>
							Training Organizer
							<span style="color:red;">*</span>
						</label>
						@Html.DropDownList("TrainingOrganizerId", null, "Choose..", htmlAttributes: new { @class = "", @required = "required" })
					</div>
					<div class="col-3 px-1" style="top:-7px;">
						<br />
						<button type="button" class="mybutton flex-grow-1 btn btn-sm" data-toggle="modal" data-target=".bd-example-modal-file" style="color:blue">
							Files
							<svg class="ml-1" width="15" height="15" viewBox="0 0 32 32">
								<path fill="currentColor" d="m28.1 18.9l-15-15c-2.5-2.6-6.6-2.6-9.2-.1s-2.6 6.7 0 9.2l.1.1L6.8 16l1.4-1.4l-2.9-2.9c-1.7-1.7-1.7-4.6 0-6.3s4.6-1.8 6.3-.1l.1.1l14.9 14.9c1.8 1.7 1.8 4.6.1 6.3c-1.7 1.8-4.6 1.8-6.3.1l-.1-.1l-7.4-7.4c-1-1-.9-2.6 0-3.5c1-.9 2.5-.9 3.5 0l4.1 4.1l1.4-1.4l-4.2-4.2c-1.8-1.7-4.6-1.6-6.3.2c-1.6 1.7-1.6 4.4 0 6.2l7.5 7.5c2.5 2.6 6.6 2.6 9.2.1s2.6-6.7 0-9.3c0 .1 0 0 0 0z" />
							</svg>
						</button>
					</div>
					<div class="col-3 pl-1" style="top:-7px;">
						<br />
						<button id="addParticipantButton" type="button" class="mybutton flex-grow-1 btn btn-sm" data-toggle="modal" data-target=".bd-example-modal-lg" style="color:blue">
							Add Participants
							<svg class="ml-1" width="15" height="15" viewBox="0 0 15 15"><path fill="none" stroke="currentColor" d="M7.5 1v13M1 7.5h13" /></svg>
						</button>
					</div>
				</div>
            </fieldset>
        </div>
    </form>

    <div id="table-show" class="participantMemberTableContainer px-4">
        <h6>Participant List</h6>

        <table class="table table-striped table-bordered table-hover" id="participantMemberTable" style="width:100%;">
            <thead>
                <tr>
                    <th class="text-center">SL</th>
                    <th>Name</th>
                    <th>Gender</th>
                    <th>Age</th>
                    <th>Mobile Number</th>
                    <th>NID</th>
                    <th>Participant Type</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @{ var index = 1; }

                @if (Model.CommunityTrainingParticipentsMaps != null)
                {
                    foreach (var member in Model.CommunityTrainingParticipentsMaps)
                    {
                        if (member.ParticipentType == ParticipentType.Member)
                        {
                            <tr data-id=@member.Id>
                                <td class="text-center index">@(index++)</td>
                                <td>@member.CommunityTrainingMember?.MemberName</td>
                                <td>@member.CommunityTrainingMember?.MemberGender.ToString()</td>
                                <td>@member.CommunityTrainingMember?.MemberAge</td>
                                <td>@member.CommunityTrainingMember?.MemberPhoneNumber</td>
                                <td></td>
                                <td>@member.ParticipentType.ToString()</td>
                                <td>
                                    <button onclick="deleteMember(@member.Id)" class="btn btn-danger btn-sm">Delete</button>
                                    <button onclick="editMember(@(member.CommunityTrainingMember?.Id ?? 0), @member.Id)" class="btn btn-primary btn-sm">Edit</button>
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr data-id=@member.Id>
                                <td class="text-center index">@(index++)</td>
                                <td>@member.Survey?.BeneficiaryName</td>
                                <td>@member.Survey?.BeneficiaryGenderString</td>
                                <td>@member.Survey?.BeneficiaryAge</td>
                                <td>@member.Survey?.BeneficiaryPhone</td>
                                <td>@member.Survey?.BeneficiaryNid</td>
                                <td>@member.ParticipentType.ToString()</td>
                                <td>
                                    <button onclick="deleteMember(@member.Id)" class="btn btn-sm btn-danger">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document" style="max-width: calc(100vw - 200px);">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Edit Member</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="EditOtherMember">
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>
                                    Member's Name
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" class="form-control" name="MemberName" placeholder="Enter Member Name" />
                            </div>
                            <div class="form-group col-md-3">
                                <label>
                                    Member's Age
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="number" class="form-control" min="18" value="0" name="MemberAge" placeholder="Enter Member Age" />
                            </div>
                            <div class="form-group col-md-3">
                                <label>
                                    Member's Gender
                                    <span style="color:red;">*</span>
                                </label>
                                <select name="MemberGender" class="form-control">
                                    <option value="">Select..</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>
                                    Mobile Number
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" class="form-control" name="MemberPhoneNumber" placeholder="Enter Member Phone Name" />
                            </div>
                            <div class="form-group col-md-6">
                                <label>
                                    Member's Address
                                </label>
                                <input type="text" class="form-control" name="MemberAddress" placeholder="Enter Member Address" />
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="updateMember()">Ok</button>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end px-4 py-2">
        <button type="submit" id="UpdateTraining" class="btn btn-sm btn-green save">
			Update
        </button>
    </div>

    @await Html.PartialAsync("_AddParticipant")
    @await Html.PartialAsync("_AddFiles", Model)
</div>

<script>
    var allParticipants = [];

    $("#CloseModal").on("click", function () {
        // clean up
    });
</script>

<script>
    const memberTypeName = "Member";
    const beneficiaryTypeName = "Beneficiary";

    $("#UpdateTraining").on("click", function () {
        // Validate
        $("#CommunityTrainingForm").validate({
            rules: {
                ForestCircleId: "required",
                ForestDivisionId: "required",
                ForestRangeId: "required",
                ForestBeatId: "required",
                ForestFcvVcfId: "required",
                DivisionId: "required",
                DistrictId: "required",
                UpazillaId: "required",
                UnionId: "required",

                TrainingTitle: {
                    required: true,
                    isEnglish: true,
                },
                StartDate: {
                    required: true,
                    dateMustBePreviousFromNow: true,
                },
                EndDate: {
                    required: true,
                    dateMustBeGreaterThanStart: true,
                },
                Location: {
                    required: true,
                    isEnglish: true,
                },
                TrainingDuration: "required",
                TrainerName: "required",
                EventTypeId: "required",
                TrainingOrganizerId: "required",
            }
        });

        var isFormValid = $("#CommunityTrainingForm").valid();
        if (isFormValid == false) {
            return;
        }

        // Check if participants is added
        if (Array.isArray(allParticipants) == false) {
            swal(
                'Invalid Form',
                'No Participants added.',
                'error'
            );
            return;
        }

        if (allParticipants.length < 1) {
            swal(
                'Invalid Form',
                'No Participants added.',
                'error'
            );
            return;
        }

        // Map all participants
        var participants = allParticipants.map(x => {
            if (x.type == beneficiaryTypeName) {
                return {
                    SurveyId: x.member.Id,
                    Id: x.mapId ?? 0,
                }
            }
            if (x.type == memberTypeName) {
                return {
                    CommunityTrainingMember: {
                        ...x.member,
                        Id: x.member.Id < 0 ? 0 : x.member.Id,
                    },
                    Id: x.mapId ?? 0,
                }
            }
        });

        var communityTraining = {
            Id: @id,
            TrainingTitle: $("#TrainingTitle").val(),
            StartDate: $("#StartDate").val(),
            EndDate: $("#EndDate").val(),
            TrainingDuration: $("#TrainingDuration").val(),
            Location: $("#Location").val(),
            TrainerName: $("#TrainerName").val(),

            ForestCircleId: $(".create-member select[name=ForestCircleId]").val(),
            ForestDivisionId: $(".create-member select[name=ForestDivisionId]").val(),
            ForestRangeId: $(".create-member select[name=ForestRangeId]").val(),
            ForestBeatId: $(".create-member select[name=ForestBeatId]").val(),
            ForestFcvVcfId: $(".create-member select[name=ForestFcvVcfId]").val(),
            DivisionId: $(".create-member select[name=DivisionId]").val(),
            DistrictId: $(".create-member select[name=DistrictId]").val(),
            UpazillaId: $(".create-member select[name=UpazillaId]").val(),
            UnionId: $(".create-member select[name=UnionId]").val(),

            EventTypeId: $("#EventTypeId").val(),
            CommunityTrainingTypeId: $("#CommunityTrainingTypeId").val(),
            TrainingOrganizerId: $("#TrainingOrganizerId").val(),
            CommunityTrainingParticipentsMapsJSON: participants,
        };

        var formData = new FormData();

        for (var key in communityTraining) {
            var value = communityTraining[key];

            if (Array.isArray(value)) {
                formData.append(key, JSON.stringify(value));
            } else {
                formData.append(key, value);
            }
        }

        $("#imagesList input[type=file]").each(function () {
            var current = $(this);

            if (current?.length && current.length > 0) {
                formData.append("CommunityTrainingImageFiles[]", current[0].files[0]);
            }
        });

        $("#documentsList input[type=file]").each(function () {
            var current = $(this);

            if (current?.length && current.length > 0) {
                formData.append("CommunityTrainingDocumentFiles[]", current[0].files[0]);
            }
        });

        $(".loader").fadeIn("slow");

        $.ajax({
            type: "POST",
            url: "/CommunityTraining/Edit",
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            dataType: 'json',
            success: function (response) {
                $(".loader").fadeOut("slow");

                if (response.Success) {
					window.location.href = response.RedirectUrl;
                } else {
                    swal(
                        'Error',
                        response.Message,
                        'error'
                    );
                }
            },
            error: function() {
                $(".loader").fadeOut("slow");

                swal(
                    'Unexpected',
                    'Unknown error occurred',
                    'error'
                );
            }
        });
    });
</script>

<script>
    let eventTypes = [];

    $(document).ready(function () {
        $.ajax({
            cache: false,
            type: "GET",
            url: "/Dropdown/GetEventTypeList",
            success: function (data) {
                eventTypes = data;
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve data.');
            }
        });

        $.ajax({
            cache: false,
            type: "GET",
            url: "/Dropdown/GetCommunityTrainingTypeList",
            success: function (data) {
                var CommunityTrainingTypeId = $("#CommunityTrainingTypeId");
                CommunityTrainingTypeId.html('<option value="">Choose..</option>');
                $.each(data, function (id, option) {
                    CommunityTrainingTypeId.append($('<option></option>').val(option.Id).html(option.Name));
                });

                if (@communityTrainingTypeId > 0) {
                    CommunityTrainingTypeId.val(@communityTrainingTypeId);
                    $("#CommunityTrainingTypeId").removeAttr("disabled");
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve data.');
            }
        });
    });

    $("#EventTypeId").on("change", function () {
        const value = $(this).val();
        const found = eventTypes.find(x => x.Id == value);

        if (found && found.HasTrainingType) {
            $("#CommunityTrainingTypeId").removeAttr("disabled");
        } else {
            $("#CommunityTrainingTypeId").attr("disabled", "");
            $("#CommunityTrainingTypeId").val("");
        }
    });
</script>

<script>
    function deleteMember(communityTrainingParticipentsMapId) {
        swal({
            title: "Are you sure?",
            text: "This action can not be undone!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            closeOnConfirm: false
        }, function () {
            var data = {
                'communityTrainingParticipentsMapId': communityTrainingParticipentsMapId,
            };
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                url: "/CommunityTraining/DeleteParticipant",
                data: data,
                datatype: "json",
                success: function (result) {
                    var message = result.Message;
                    var success = result.Success;
                    if (success == true) {
                        swal("Deleted!", "Item has been deleted.", "success");
                        $("#participantMemberTable tbody").find(`tr[data-id=${communityTrainingParticipentsMapId}]`).remove();
                        allParticipants = allParticipants.filter(x => x.mapId != communityTrainingParticipentsMapId);
                        makeIndex();
                    } else {
                        swal("Deleted Failed!", message, "error");
                    }
                },
                error: function (xmlhttprequest, textstatus, errorthrown) {
                    swal("Not Deleted!", "Item has not been deleted.", "error");
                }
            });
        });
    }
</script>

<script>
    var editMemberData = {};
    var editParticipantMapId = 0;

    function editMember(memberId, mapId) {
        $.ajax({
            type: "GET",
            contentType: "application/json; charset=utf-8",
            url: "/Dropdown/GetCommunityTrainingMemberById",
            data: { id: memberId },
            datatype: "json",
            success: function (result) {
                $("#exampleModalCenter").modal();

                editMemberData = result;
                editParticipantMapId = mapId;

                $("#EditOtherMember input[name=MemberName]").val(result.MemberName);
                $("#EditOtherMember input[name=MemberAge]").val(result.MemberAge);
                $("#EditOtherMember input[name=MemberPhoneNumber]").val(result.MemberPhoneNumber);
                $("#EditOtherMember input[name=MemberAddress]").val(result.MemberAddress);
                $("#EditOtherMember select[name=MemberGender]").val(result.MemberGender);
            },
            error: function () {
                swal("Error", "Member not found", "error");
            }
        });
    }

    function updateMember() {
        $("#EditOtherMember").validate({
            rules: {
                MemberName: {
                    required: true,
                    minlength: 2,
                },
                MemberAge: "required",
                MemberGender: "required",
                MemberPhoneNumber: {
                    required: true,
                    mustBeInteger: true,
                    minlength: 11,
                    maxlength: 11,
                },
            }
        });

        var isFormValid = $("#EditOtherMember").valid();
        if (isFormValid == false) {
            return;
        }

        var member = {
            Id: editMemberData.Id,
            MemberName: $("#EditOtherMember input[name=MemberName]").val(),
            MemberAge: $("#EditOtherMember input[name=MemberAge]").val(),
            MemberPhoneNumber: $("#EditOtherMember input[name=MemberPhoneNumber]").val(),
            MemberAddress: $("#EditOtherMember input[name=MemberAddress]").val(),
            MemberGender: $("#EditOtherMember select[name=MemberGender]").val()
        };

        allParticipants = allParticipants.map(x => {
            if (x.mapId == editParticipantMapId) {
                return {
                    ...x,
                    member: { ...member, Id: editMemberData.Id }
                }
            }
            return x;
        });
        $("#exampleModalCenter").modal('hide');
        var row = $("#participantMemberTable tbody").find(`tr[data-id=${editParticipantMapId}]`);
        var genderName = genderList.find(x => x.Id == member.MemberGender);
        row.after(`
            <tr data-id=${editParticipantMapId}>
                <td class="text-center index"></td>
                <td>${member.MemberName}</td>
                <td>${genderName.Name}</td>
                <td>${member.MemberAge}</td>
                <td>${member.MemberPhoneNumber}</td>
                <td>Member</td>
                <td>
                    <button onclick="deleteMember(${editParticipantMapId})" class="btn btn-sm btn-danger">Delete</button>
                    <button onclick="editMember(${editMemberData.Id}, ${editParticipantMapId})" class="btn btn-sm btn-primary">Edit</button>
                </td>
            </tr>
        `);
        row.remove();
        makeIndex();
    }
</script>

<script>
    var genderList = [];

    $.ajax({
        cache: false,
        type: "GET",
        url: "/Dropdown/GetGenderEnumList",
        success: function (data) {
            genderList = data;

            var Gender = $("#EditOtherMember select[name=MemberGender]");

            Gender.html('<option value="">Choose..</option>');
            $.each(data, function (id, option) {
                Gender.append($('<option></option>').val(option.Id).html(option.Name));
            });
        },
    });
</script>

<script>
    function makeIndex() {
        var index = 1;
        $("#participantMemberTable td.index").each(function () {
            $(this).text(index++);
        });
    }
	$(document).on("change", "#StartDate, #EndDate", function() {
		var startDate = $("#StartDate").val();
		var endDate = $("#EndDate").val();

		if (startDate && endDate) {
			var start = new Date(startDate);
			var end = new Date(endDate);

			var diff = start.getTime() - end.getTime();
			var differenceInDay = Math.abs(Math.ceil(diff / (1000 * 3600 * 24))) + 1;

			$("#TrainingDuration").val(`${differenceInDay} ${differenceInDay == 1 ? 'day' : 'days'}`);
		}
	});
</script>

<script>
    function setData(data) {
        if (Array.isArray(data)) {
            data.forEach(function (value, index) {
                var member = {}

                if (value.surveyId) {
                    member = {
                        member: {
                            Id: value.surveyId,
                            MemberName: value.survey.beneficiaryName,
                            MemberAge: value.survey.beneficiaryAge,
                            MemberPhoneNumber: value.survey.beneficiaryPhone,
                            MemberGender: value.survey.beneficiaryGender,
                            MemberAddress: "",
                        },
                        type: beneficiaryTypeName,
                        mapId: value.id,
                    }
                } else if (value.communityTrainingMember) {
                    member = {
                        member: {
                            Id: value.communityTrainingMember.id,
                            MemberName: value.communityTrainingMember.memberName,
                            MemberAge: value.communityTrainingMember.memberAge,
                            MemberPhoneNumber: value.communityTrainingMember.memberPhoneNumber,
                            MemberAddress: value.communityTrainingMember.memberAddress,
                            MemberGender: value.communityTrainingMember.memberGender
                        },
                        type: memberTypeName,
                        mapId: value.id,
                    }
                }

                allParticipants.push(member);
            });
        }
    }

    setData(@Html.Raw(Json.Serialize(Model.CommunityTrainingParticipentsMaps)))
</script>

