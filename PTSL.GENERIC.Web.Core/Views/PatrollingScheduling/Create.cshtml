@model PTSL.GENERIC.Web.Core.Model.EntityViewModels.PatrollingSchedulingInformetion.PatrollingSchedulingVM

@{
    ViewBag.Title = "Create Patrolling Scheduling";
    var Message = ViewBag.Message;
}

<style>
    .add-participant-container {
        display: flex;
        align-items: end;
        gap: 8px;
    }

    label.error {
        color: red !important;
    }

    .participantMemberTableContainer {
        display: none;
    }

        .participantMemberTableContainer:has(table tbody tr) {
            display: table;
        }

    .row.custom > div {
        padding-left: 15px !important;
        padding-right: 15px !important;
    }

    .mybutton {
        color: blue;
        height: 34px;
        margin-top: 8px;
        width: 100%;
    }
</style>

<div class="card">
    <div class="card-header">
        <h4>
            <a href="/PatrollingScheduling/Index" class="mr-1 back">
                <svg width="20" height="20" viewBox="0 0 32 32">
                    <path fill="currentColor" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z" />
                </svg>
            </a>
            Create Patrolling Scheduling
        </h4>
        <!-- resetFromData('#PatrollingSchedulingForm') -->
        <button class="ml-auto reset btn btn-sm" onclick="window.location.reload()">
            <svg class="rotate180z" width="16" height="16" viewBox="0 0 32 32">
                <path d="M25.95 7.65l.005-.004c-.092-.11-.197-.206-.293-.312c-.184-.205-.367-.41-.563-.603c-.139-.136-.286-.262-.43-.391c-.183-.165-.366-.329-.558-.482c-.16-.128-.325-.247-.49-.367c-.192-.14-.385-.277-.585-.406a13.513 13.513 0 0 0-.533-.324q-.308-.179-.625-.341c-.184-.094-.37-.185-.56-.27c-.222-.1-.449-.191-.678-.28c-.19-.072-.378-.145-.571-.208c-.246-.082-.498-.15-.75-.217c-.186-.049-.368-.102-.556-.143c-.29-.063-.587-.107-.883-.15c-.16-.023-.315-.056-.476-.073A12.933 12.933 0 0 0 6 7.703V4H4v8h8v-2H6.811A10.961 10.961 0 0 1 16 5a11.111 11.111 0 0 1 1.189.067c.136.015.268.042.403.061c.25.037.501.075.746.128c.16.035.315.08.472.121c.213.057.425.114.633.183c.164.054.325.116.486.178c.193.074.384.15.57.235c.162.072.32.15.477.23q.268.136.526.286c.153.09.305.18.453.276c.168.11.33.224.492.342c.14.102.282.203.417.312c.162.13.316.268.47.406c.123.11.248.217.365.332c.167.164.323.338.479.512A10.993 10.993 0 1 1 5 16H3a13 13 0 1 0 22.95-8.35z" fill="currentColor" />
            </svg>
            Reset
        </button>
    </div>
    <form id="PatrollingSchedulingForm" class="card-body">
        <div class="p-2 green-card" style="border-radius: 5px;">
            @await Html.PartialAsync("~/Views/Shared/_ForestCivilLocation.cshtml", "create-member")
        </div>

        <div class="p-2 custom green-card mt-2">

            <div class="col-6 p-1">
                <fieldset class="p-2">
                    <legend class="float-none w-auto">NGO Information</legend>
                    <div class="row">
                        <div class="col-6 pr-1" style="max-width: 245px;">
                            <label>
                                NGO
                                <span style="color:red;">*</span>
                            </label>
                            <select id="NgoId" name="NgoId">
                                <option value="">Choose</option>
                            </select>
                        </div>
                    </div>
                </fieldset>
            </div>
        </div>



        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;">
            <fieldset class="p-2 col-12">
                <legend class="float-none w-auto">Patrolling Information</legend>
                <div class="row">
                    <div class="col-6 pr-1">
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label>
                                    Date
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="date" id="Date" name="Date" placeholder="Enter Date" required />
                            </div>
                            <div class="col-6 pl-1">
                                <label>
                                    Patrolling Description
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" id="PatrollingDescription" name="PatrollingDescription" placeholder="Patrolling Description" required />
                            </div>
                        </div>
                    </div>
                    <div class="col-6 pl-1">
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label>
                                    Start Time
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="time" id="StartTime" name="StartTime" placeholder="Enter Start Time" required />
                            </div>
                            <div class="col-6 pl-1">
                                <label>
                                    End Time
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="time" id="EndTime" name="EndTime" placeholder="Enter End Time" required />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-6 pr-1">
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label>
                                    Patrolling Area
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" id="PatrollingArea" name="PatrollingArea" placeholder="Enter Patrolling Area" required />
                            </div>
                            <div class="col-6 pl-1">
                                <label>
                                    Allocated Amount Per Month
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="number" id="AllocatedAmountMonth" name="AllocatedAmountMonth" placeholder="Enter Allocated Amount Month " required />
                            </div>
                        </div>
                    </div>
                    <div class="col-6 pl-1">
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label>
                                    Remark
                                    <span style="color:red;"></span>
                                </label>
                                <input type="text" id="Remark" name="Remark" placeholder="Enter Remark" />
                            </div>
                            @* <div class="col-6 pl-1">
                            <label>
                            Community Training Type
                            </label>
                            <select id="CommunityTrainingTypeId" name="CommunityTrainingTypeId" disabled>
                            <option value="">Select Training Type</option>
                            </select>
                            </div>*@
                        </div>
                    </div>
                </div>


                <div class="row mt-3" style="padding-left:12px">
                    <div class="col-3 px-1" style="top:-7px;">
                        <label>

                        </label>
                        <br />
                        <button type="button" class="mybutton flex-grow-1 btn btn-sm" data-toggle="modal" data-target=".bd-example-modal-file" style="color: blue;">
                            Upload files
                            <svg class="ml-1" width="15" height="15" viewBox="0 0 32 32">
                                <path fill="currentColor" d="m28.1 18.9l-15-15c-2.5-2.6-6.6-2.6-9.2-.1s-2.6 6.7 0 9.2l.1.1L6.8 16l1.4-1.4l-2.9-2.9c-1.7-1.7-1.7-4.6 0-6.3s4.6-1.8 6.3-.1l.1.1l14.9 14.9c1.8 1.7 1.8 4.6.1 6.3c-1.7 1.8-4.6 1.8-6.3.1l-.1-.1l-7.4-7.4c-1-1-.9-2.6 0-3.5c1-.9 2.5-.9 3.5 0l4.1 4.1l1.4-1.4l-4.2-4.2c-1.8-1.7-4.6-1.6-6.3.2c-1.6 1.7-1.6 4.4 0 6.2l7.5 7.5c2.5 2.6 6.6 2.6 9.2.1s2.6-6.7 0-9.3c0 .1 0 0 0 0z" />
                            </svg>
                        </button>
                    </div>
                    <div class="col-3 pl-1" style="top:-7px;">

                        <br />
                        <button id="addParticipantButton" type="button" class="mybutton flex-grow-1 btn btn-sm" data-toggle="modal" data-target=".bd-example-modal-lg" style="color: blue;">
                            Add Participants
                            <svg class="ml-1" width="15" height="15" viewBox="0 0 15 15"><path fill="none" stroke="currentColor" d="M7.5 1v13M1 7.5h13" /></svg>
                        </button>
                    </div>
                </div>


            </fieldset>
        </div>
    </form>

    <div id="table-show" class="participantMemberTableContainer px-4">
        <h6>Participants List</h6>

        <table class="table table-striped table-bordered table-hover" id="participantMemberTable" style="width:100%;">
            <thead>
                <tr>
                    <th class="text-center">SL</th>
                    <th>Name</th>
                    <th>Gender</th>
                    <th>Age</th>
                    <th>Mobile Number</th>
                    <th>NID</th>
                    <th>Participant Type</th>
                    <th>Amount Of Honorary Allowance</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-end px-4 py-2">
        <button type="submit" id="SaveTraining" class="btn btn-sm btn-green save">
            @*<i class="fa fa-save mr-2"></i>*@Save
        </button>
    </div>

    @await Html.PartialAsync("_AddParticipant")
    @await Html.PartialAsync("_AddFiles", null)
</div>

<script>
    var allParticipants = [];

    $("#CloseModal").on("click", function () {
        // clean up
    });
</script>

<script>
    const memberTypeName = "Member";
    const beneficiaryTypeName = "Beneficiary";

    $("#SaveTraining").on("click", function () {
        // Validate
        $("#PatrollingSchedulingForm").validate({
            rules: {
                ForestCircleId: "required",
                ForestDivisionId: "required",
                ForestRangeId: "required",
                ForestBeatId: "required",
                ForestFcvVcfId: "required",
                PresentDivisionId: "required",
                PresentDistrictId: "required",
                PresentUpazillaId: "required",
                PresentUnionId: "required",
                NgoId: "required",
                AllowanceAmountId: "required",
                EndTime: {
                    required: true,
                    dateMustBeGreaterThanStart: true,
                },
            }
        });

        var isFormValid = $("#PatrollingSchedulingForm").valid();
        if (isFormValid == false) {
            return;
        }

        // Check if participants is added
        if (Array.isArray(allParticipants) == false) {
            swal(
                'Warning',
                'Please add participant(s).',
                'warning'
            );
            return;
        }

        if (allParticipants.length < 1) {
            swal(
                'Warning',
                'Please add participant(s).',
                'warning'
            );
            return;
        }


        // Map all participants
        var participants = allParticipants.map(x => {
            const memberId = x.member.Id;

            var value = $("#participantMemberTable tbody").find(`tr[data-id=${memberId}] .AllowanceAmount`).val();
            debugger;

            if (x.type == beneficiaryTypeName) {
                return {
                    SurveyId: x.member.Id,
                    AmountOfHonoraryAllowance: value,
                }
            }
            if (x.type == memberTypeName) {
                return {
                    PatrollingSchedulingMember: {
                        ...x.member,
                        Id: 0,
                    },
                    AmountOfHonoraryAllowance: value,

                }
            }
        });



        var patrollingScheduling = {

            ForestCircleId: $(".create-member select[name=ForestCircleId]").val(),
            ForestDivisionId: $(".create-member select[name=ForestDivisionId]").val(),
            ForestRangeId: $(".create-member select[name=ForestRangeId]").val(),
            ForestBeatId: $(".create-member select[name=ForestBeatId]").val(),
            ForestFcvVcfId: $(".create-member select[name=ForestFcvVcfId]").val(),
            DivisionId: $(".create-member select[name=PresentDivisionId]").val(),
            DistrictId: $(".create-member select[name=PresentDistrictId]").val(),
            UpazillaId: $(".create-member select[name=PresentUpazillaId]").val(),
            UnionId: $(".create-member select[name=PresentUnionId]").val(),
            FcvId: $(".create-member select[name=FcvVcfType]").val(),
            NgoId: $("#NgoId").val(),

            Date: $("#Date").val(),
            PatrollingDescription: $("#PatrollingDescription ").val(),
            StartTime: $("#StartTime").val(),
            EndTime: $("#EndTime").val(),
            PatrollingArea: $("#PatrollingArea").val(),
            AllocatedAmountMonth: $("#AllocatedAmountMonth").val(),
            Remark: $("#Remark").val(),

            //PatrollingPaymentInformetionMapsJSON: PatrollingPaymentInformetions,

            PatrollingSchedulingParticipentsMapsJSON: participants,
        };

        var formData = new FormData();

        for (var key in patrollingScheduling) {
            var value = patrollingScheduling[key];

            if (Array.isArray(value)) {
                formData.append(key, JSON.stringify(value));
            } else {
                formData.append(key, value);
            }
        }

        $("#imagesList input[type=file]").each(function () {
            var current = $(this);

            if (current?.length && current.length > 0) {
                formData.append("PatrollingSchedulingImageFiles[]", current[0].files[0]);
            }
        });

        $("#documentsList input[type=file]").each(function () {
            var current = $(this);

            if (current?.length && current.length > 0) {
                formData.append("PatrollingSchedulingDocumentFiles[]", current[0].files[0]);
            }
        });

        $(".loader").fadeIn("slow");

        $.ajax({
            type: "POST",
            url: "/PatrollingScheduling/Create",
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            dataType: 'json',
            success: function (response) {
                $(".loader").fadeOut("slow");
                if (response.Success) {
                    //    swal(
                    //        'Success',
                    //        response.Message,
                    //        'success',
                    //    );
                swal({
                    title: "Success!",
                    text: response.Message,
                    type: "success"
                }, function () {
                        window.location.href = "/PatrollingScheduling/Index";
                })

                } else {
                    swal(
                        'Error',
                        response.Message,
                        'error'
                    );
                }
            },
            error: function () {
                $(".loader").fadeOut("slow");

                swal(
                    'Unexpected',
                    'Unknown error occurred',
                    'error'
                );
            }
        });

        // Send data with Ajax
    });
</script>

<script>
    let eventTypes = [];

    $(document).ready(function () {
        $.ajax({
            cache: false,
            type: "GET",
            url: "/Dropdown/GetEventTypeList",
            success: function (data) {
                eventTypes = data;

                var EventTypeId = $("#EventTypeId");
                EventTypeId.html('<option value="">Choose..</option>');
                $.each(data, function (id, option) {
                    EventTypeId.append($('<option></option>').val(option.Id).html(option.Name));
                });
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve data.');
            }
        });

        $.ajax({
            cache: false,
            type: "GET",
            url: "/Dropdown/GetCommunityTrainingTypeList",
            success: function (data) {
                var CommunityTrainingTypeId = $("#CommunityTrainingTypeId");
                CommunityTrainingTypeId.html('<option value="">Choose..</option>');
                $.each(data, function (id, option) {
                    CommunityTrainingTypeId.append($('<option></option>').val(option.Id).html(option.Name));
                });
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve data.');
            }
        });

        $.ajax({
            cache: false,
            type: "GET",
            url: "/Dropdown/GetTrainingOrganizerList",
            success: function (data) {
                var NgoId = $("#NgoId");
                NgoId.html('<option value="">Choose..</option>');
                $.each(data, function (id, option) {
                    NgoId.append($('<option></option>').val(option.Id).html(option.Name));
                });
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve data.');
            }
        });
    });

    $("#EventTypeId").on("change", function () {
        const value = $(this).val();
        const found = eventTypes.find(x => x.Id == value);

        if (found && found.HasTrainingType) {
            $("#CommunityTrainingTypeId").removeAttr("disabled");
        } else {
            $("#CommunityTrainingTypeId").attr("disabled", "");
            $("#CommunityTrainingTypeId").val("");
        }
    });
</script>

<script>
    function makeIndex() {
        var index = 1;
        $("#participantMemberTable td.index").each(function () {
            $(this).text(index++);
        });
    }
    $(document).on("change", "#StartDate, #EndDate", function () {
        var startDate = $("#StartDate").val();
        var endDate = $("#EndDate").val();

        if (startDate && endDate) {
            var start = new Date(startDate);
            var end = new Date(endDate);

            var diff = start.getTime() - end.getTime();
            var differenceInDay = Math.abs(Math.ceil(diff / (1000 * 3600 * 24))) + 1;

            $("#TrainingDuration").val(`${differenceInDay} ${differenceInDay == 1 ? 'day' : 'days'}`);
        }
    });
</script>


<script>
    function timeToMinutes(time) {
        let [hour, minute] = time.split(":");
        return parseInt(hour) * 60 + parseInt(minute);
    }
    const dateMustBeGreaterThanStartTimeFunc = date => {
        var startTime = timeToMinutes($("#StartTime").val());
        var endTime = timeToMinutes($("#EndTime").val());

        return startTime < endTime;
    }

    $.validator.addMethod(
        'dateMustBeGreaterThanStart',
        function (value, element, requiredValue) {
            return dateMustBeGreaterThanStartTimeFunc(value);
        },
        'End time must be greater than start time.'
    );

</script>