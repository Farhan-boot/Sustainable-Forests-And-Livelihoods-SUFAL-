@using PTSL.GENERIC.Web.Core.Model.GeneralSetup;
@model PTSL.GENERIC.Web.Core.Model.EntityViewModels.AccountManagement.AccountVM
@{ 
    ViewBag.Title = "Edit Account";
    var Message = ViewBag.Message;
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

<style>
    label {
        margin-bottom: 0.2rem;
    }
    span.select2 {
        display: block;
    }
    ._select2_option {
        line-height: 20px;
    }
    ._select2_option span {
        font-weight: 300;
    }
    ._select2_option span:first-child {
        font-weight: 500;
    }

    ul.select2-selection__rendered {
        height: 26px;
    }

        ul.select2-selection__rendered li {
            padding: 2px !important;
            margin: 5px 0px !important;
            line-height: 1.2;
            color: #292828 !important;
        }

            ul.select2-selection__rendered li.select2-search.select2-search--inline {
                padding: 0px !important;
                margin: -2px 0px !important;
                line-height: 1.2;
                color: #292828 !important;
            }
</style>

<div class="card">
    <div class="card-header">
        <h4>
            <a href="/Accounts/Index" class="mr-1 back">
                <svg width="20" height="20" viewBox="0 0 32 32">
                    <path fill="currentColor" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z" />
                </svg>
            </a>
            Edit Account
        </h4>
        <button class="ml-auto reset btn btn-sm" onclick="resetFromData('#Form')">
            <svg class="rotate180z" width="16" height="16" viewBox="0 0 32 32">
                <path d="M25.95 7.65l.005-.004c-.092-.11-.197-.206-.293-.312c-.184-.205-.367-.41-.563-.603c-.139-.136-.286-.262-.43-.391c-.183-.165-.366-.329-.558-.482c-.16-.128-.325-.247-.49-.367c-.192-.14-.385-.277-.585-.406a13.513 13.513 0 0 0-.533-.324q-.308-.179-.625-.341c-.184-.094-.37-.185-.56-.27c-.222-.1-.449-.191-.678-.28c-.19-.072-.378-.145-.571-.208c-.246-.082-.498-.15-.75-.217c-.186-.049-.368-.102-.556-.143c-.29-.063-.587-.107-.883-.15c-.16-.023-.315-.056-.476-.073A12.933 12.933 0 0 0 6 7.703V4H4v8h8v-2H6.811A10.961 10.961 0 0 1 16 5a11.111 11.111 0 0 1 1.189.067c.136.015.268.042.403.061c.25.037.501.075.746.128c.16.035.315.08.472.121c.213.057.425.114.633.183c.164.054.325.116.486.178c.193.074.384.15.57.235c.162.072.32.15.477.23q.268.136.526.286c.153.09.305.18.453.276c.168.11.33.224.492.342c.14.102.282.203.417.312c.162.13.316.268.47.406c.123.11.248.217.365.332c.167.164.323.338.479.512A10.993 10.993 0 1 1 5 16H3a13 13 0 1 0 22.95-8.35z" fill="currentColor" />
            </svg>
            Reset
        </button>
    </div>

    <form id="Form" asp-controller="Accounts" asp-action="Edit" enctype="multipart/form-data" class="card-body mt-2">
		<input type="hidden" name="Id" value="@Model.Id" />

		<div class="p-2 green-card" style="border-radius: 5px;">
			<div class="row custom forest-location">
				<div class="col-6 p-1">
					@await Html.PartialAsync(
					"~/Views/Shared/_ForestAdministration.cshtml",
					(
					ViewBag.ForestCircleId as SelectList,
					ViewBag.ForestDivisionId as SelectList,
					ViewBag.ForestRangeId as SelectList,
					ViewBag.ForestBeatId as SelectList,
					ViewBag.ForestFcvVcfId as SelectList
					)
					)
				</div>

				<div class="col-6 p-1">
                    <fieldset class="p-2">
                        <legend class="float-none w-auto">Committee</legend>
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label class="m-0">Committee Type</label>
                                @Html.DropDownList("CommitteeTypeId", null, "Select Committee Type", htmlAttributes: new { @class = "" })
                            </div>
                            <div class="col-6 pl-1">
                                <label class="m-0">Committee</label>
                                @Html.DropDownList("CommitteeId", null, "Select Committee", htmlAttributes: new { @class = "" })
                            </div>
                        </div>
                    </fieldset>
				</div>
			</div>
		</div>

		<div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="LoanInfo">
			<fieldset class="p-2 col-12">
				<legend class="float-none w-auto">Account Information</legend>
				<div class="row">
					<div class="col-md-3 col-sm-12 pr-1">
						<label>
                            Bank Account Number
							<span style="color:red;">*</span>
						</label>
						<input type="number"
							   min="0"
                               name="AccountNumber"
                               value="@Model.AccountNumber"
							   placeholder="Enter account number"
							   required />
					</div>
					<div class="col-md-3 col-sm-12 px-1">
                        <label>
                            Bank Account Name
                            <span style="color:red;">*</span>
                        </label>
                        <input type="text"
                               name="BankAccountName"
                               value="@Model.BankAccountName"
                               placeholder="Enter bank account name"
                               required />
					</div>
                    <div class="col-md-3 col-sm-12 px-1">
                        <label>
                            Account Type
                            <span style="color:red;">*</span>
                        </label>
                        @Html.DropDownList("AccountType", null, "Select Account Type", htmlAttributes: new { @class = "" })
                    </div>
                    <div class="col-md-3 col-sm-12 pl-1">
                        <label>
                            Bank Name
                            <span style="color:red;">*</span>
                        </label>
                        <input type="text"
                               name="BankName"
                               value="@Model.BankName"
                               placeholder="Enter bank name"
                               required />
                    </div>
				</div>

                <div class="row mt-2">
                    <div class="col-md-3 col-sm-12 pr-1">
                        <label>
                            Branch Name
                            <span style="color:red;">*</span>
                        </label>
                        <input type="text"
                               name="BranchName"
                               value="@Model.BranchName"
                               placeholder="Enter branch name"
                               required />
                    </div>
                    <div class="col-md-3 col-sm-12 px-1">
                        <label>
                            Opening Date
                            <span style="color:red;">*</span>
                        </label>
                        <input type="date"
                               name="AccountOpeningDate"
                               value="@Model.AccountOpeningDate.ToUIDateStringNullable()"
                               placeholder="Enter opening date"
                               required />
                    </div>
                    <div class="col-md-6 col-sm-12 pl-1">
                        <label>
                            Allowed Expense Types
                            <span style="color:red;">*</span>
                        </label>
                        <select id="@nameof(Model.AccountAllowedFundExpenses)" name="@nameof(Model.AccountAllowedFundExpenses)" multiple>
                            <!option>Select Account</!option>
                            @foreach (var item in (IEnumerable<DropdownVM>)ViewBag.AccountAllowedFundExpenses)
                            {
                                <!option value="@item.Id" @(Model.AccountAllowedFundExpenses.Select(x => (int)x).Contains(item.Id) ? "selected" : "")>@item.Name</!option>
                            }
                        </select>
                    </div>
                </div>

                <div class="row mt-2">
                    <div class="col-md-3 col-sm-12 pr-1">
                        <label>
                            Remarks
                        </label>
                        <br />
                        <textarea class="form-control" style="width: 100%;" placeholder="Enter remarks">@Model.Remarks</textarea>
                    </div>
                </div>
			</fieldset>
		</div>

		<div class="d-flex justify-content-end py-2">
			<button type="submit" id="submit-btn" class="btn btn-sm btn-green save">
				Save
			</button>
		</div>
	</form>
</div>

<script>
    $(document).ready(function () {
        addCustomRequiredFieldInPage("#ForestCircleId", "#ForestDivisionId")

        setTimeout(function() {
            $('#AccountAllowedFundExpenses').select2();
        }, 0);
    });

    $(".submit-btn").on("click", function () {
        if ($("#Form").valid()) {
            $(".loader").fadeIn("slow");
        }
    });
    $("#Form").validate({
        rules: {
			ForestCircleId: {
				required: true
			},
			ForestDivisionId: {
				required: true
			},
            AccountNumber: {
				required: true
            },
            BankAccountName: {
				required: true
            },
            AccountType: {
				required: true
            },
            BankName: {
				required: true
            },
            BranchName: {
				required: true
            },
            OpeningDate: {
				required: true,
                dateMustBePreviousFromNow: true,
            },
        },
    });

    const dateMustBePreviousFromNowFunc = date => {
        const inputDate = new Date(date);
        const currentDate = new Date();

        inputDate.setHours(0, 0, 0, 0);
        currentDate.setHours(0, 0, 0, 0);
        return inputDate <= currentDate;
    }
    $.validator.addMethod(
        'dateMustBePreviousFromNow',
        function (value, element, requiredValue) {
            return dateMustBePreviousFromNowFunc(value);
        },
        'Date must not be future from current date.'
    );

    $("#FcvVcfType").on("change", function () {
        const fcvVcfTypeId = $(this).val();
        const committeeTypeConfigurationId = $("#CommitteeTypeId");

        $("#CommitteeTypeId").trigger("change");

        $.ajax({
            cache: false,
            type: "GET",
            url: "/CommitteeManagement/GetCommitteeTypeConfigurationByFcvOrVcfId",
            data: { "id": fcvVcfTypeId },
            success: function (data) {
                committeeTypeConfigurationId.html('<option value="">Select Committee Type</option>');
                $.each(data.Data, function (id, option) {
                    committeeTypeConfigurationId.append($('<option></option>').val(option.Id).html(option.CommitteeTypeName));
                });
            },
            error: function (xhr, ajaxOptions, thrownError) {
            }
        });
    });

    $("#CommitteeTypeId").on("change", function () {
        const committeeTypeConfigurationId = Number($(this).val());
        const committeesConfigurationId = $("#CommitteeId");

        $.ajax({
            cache: false,
            type: "GET",
            url: "/CommitteeManagement/GetCommitteesConfigurationByCommitteeTypeConfigurationId",
            data: { "id": committeeTypeConfigurationId },
            success: function (data) {
                committeesConfigurationId.html('<option value="">Select Committee</option>');
                $.each(data.Data, function (id, option) {
                    committeesConfigurationId.append($('<option></option>').val(option.Id).html(option.CommitteeName));
                });
            },
            error: function (xhr, ajaxOptions, thrownError) {
            }
        });
    });
</script>

