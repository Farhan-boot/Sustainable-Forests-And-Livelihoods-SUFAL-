@using PTSL.GENERIC.Web.Core.Model.EntityViewModels.SocialForestry.Cutting;
@model PTSL.GENERIC.Web.Core.Model.EntityViewModels.SocialForestry.Cutting.DefaultDistributionDataVM

<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<style>
    fieldset {
        padding: 0px 15px;
        border: 1px solid gray;
        overflow: hidden;
    }

    fieldset legend {
        width: auto;
    }

    .submit_btn {
        margin-left: auto;
        margin-right: 14px;
        margin-top: 10px;
        margin-bottom: 15px;
    }

    .custom-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        width: calc(100% - 10vw);
        z-index: 9999;
        right: 0;
        background: white;
        transform: translate(-50%, -50%);
        padding: 10px 20px;
        border: 1px solid gray;
        border-radius: 10px;
        min-height: 400px;
        display: flex;
        flex-direction: column;
    }

    .custom-modal-header {
        display: flex;
        justify-content: space-between;
        border-bottom: 1px solid gray;
        padding: 10px 0;
    }

        .custom-modal-header button {
            all: unset;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 1px solid gray !important;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

    .tab-group {
        display: flex;
        gap: 10px;
        margin-bottom: 5px;
    }

        .tab-group button {
            all: unset;
            border: 0 !important;
            padding: 5px 0;
        }

            .tab-group button.active {
                border-bottom: 1px solid gray !important;
                font-weight: 500;
            }

    .custom-modal-content {
        flex-grow: 1;
        padding: 10px 0;
    }

    .custom-modal-footer {
        border-top: 1px solid gray;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        padding: 10px 0;
    }

    .custom button.btn-warning {
        box-shadow: 0 2px 6px #ffc473;
        background-color: #ffa426 !important;
        border-color: #ffa426 !important;
        color: #fff !important;
    }
</style>

<div class="card" style="position: relative;">
    <div class="card-header">
        <h4>
            <a href="/CuttingPlantation/Index" class="mr-1 back">
                <svg width="20" height="20" viewBox="0 0 32 32">
                    <path fill="currentColor" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z" />
                </svg>
            </a>
            Distribution
        </h4>
        <button class="ml-auto reset btn btn-sm" onclick="resetFromData('#Form')">
            <svg class="rotate180z" width="16" height="16" viewBox="0 0 32 32">
                <path
                    d="M25.95 7.65l.005-.004c-.092-.11-.197-.206-.293-.312c-.184-.205-.367-.41-.563-.603c-.139-.136-.286-.262-.43-.391c-.183-.165-.366-.329-.558-.482c-.16-.128-.325-.247-.49-.367c-.192-.14-.385-.277-.585-.406a13.513 13.513 0 0 0-.533-.324q-.308-.179-.625-.341c-.184-.094-.37-.185-.56-.27c-.222-.1-.449-.191-.678-.28c-.19-.072-.378-.145-.571-.208c-.246-.082-.498-.15-.75-.217c-.186-.049-.368-.102-.556-.143c-.29-.063-.587-.107-.883-.15c-.16-.023-.315-.056-.476-.073A12.933 12.933 0 0 0 6 7.703V4H4v8h8v-2H6.811A10.961 10.961 0 0 1 16 5a11.111 11.111 0 0 1 1.189.067c.136.015.268.042.403.061c.25.037.501.075.746.128c.16.035.315.08.472.121c.213.057.425.114.633.183c.164.054.325.116.486.178c.193.074.384.15.57.235c.162.072.32.15.477.23q.268.136.526.286c.153.09.305.18.453.276c.168.11.33.224.492.342c.14.102.282.203.417.312c.162.13.316.268.47.406c.123.11.248.217.365.332c.167.164.323.338.479.512A10.993 10.993 0 1 1 5 16H3a13 13 0 1 0 22.95-8.35z"
                    fill="currentColor" />
            </svg>
            Reset
        </button>
    </div>

    <div class="card-body mt-2">
        <h6>Statement of Share</h6>
        <div class="mb-4" style="display: grid; grid-template-columns: 1fr 1fr;">
            <p class="m-0">Plantation Id: @Model.PlantationId</p>
            <p class="m-0">Total Amount of Share to be Distributed: @Model.TotalAmountOfShareToBeDistributed.ToBDTCurrency()</p>
            <p class="m-0">Total Undistributed Amount of Share: @Model.TotalUndistributedAmount.ToBDTCurrency()</p>
            <p class="m-0">Total Distributed Amount of Share: @Model.TotalCurrentDistributedAmount.ToBDTCurrency()</p>
        </div>

        @foreach (var item in Model.DefaultDistributionFunds ?? Enumerable.Empty<DefaultDistributionFund>())
        {
            var totalUndistributedAmountFormId = $"TotalUndistributedAmount-{Model.CuttingPlantationId}_{item.DistributionFundTypeId}";
            var isBeneficiary = item.DistributionFundTypeEnum == PTSL.GENERIC.Web.Core.Helper.Enum.SocialForestry.DistributionFundTypeEnum.Beneficiary;
            var formId = $"form_{Model.CuttingPlantationId}_{item.DistributionFundTypeId}";

            <fieldset class="mb-4">
                <legend>@(item.FundTypeName)</legend>

                <div class="row">
                    <div class="col-md-4">
                        <label>@(item.FundTypeName)%</label>
                        <input class="form-control" type="text" disabled="" value="@(item.Percentage)" />
                    </div>
                    <div class="col-md-4">
                        <label>@(item.FundTypeName) (Amount)</label>
                        <input class="form-control" type="text" disabled="" value="@(item.TotalAmountOfShareToBeDistributed.ToBDTCurrency())" />
                    </div>
                    <div class="col-md-4">
                        <label>@(item.FundTypeName) (Undistributed  Amount)</label>
                        <input class="form-control" type="text" disabled="" value="@(item.TotalUndistributedAmount.ToBDTCurrency())" />
                        <input type="hidden" id="@totalUndistributedAmountFormId" value="@item.TotalUndistributedAmount" />
                    </div>
                </div>

                <div x-data="distribute_to_beneficiary">

                    @if (isBeneficiary)
                    {
                        <!-- Modal Start -->
                        <div class="custom-modal"
                             role="dialog"
                             tabindex="-1"
                             x-show="isAddBeneficiaryModalOpen"
                             x-on:click.away="closeAddBeneficiaryModal('@(totalUndistributedAmountFormId)', '@(formId)')"
                             x-cloak>
                            <div class="custom-modal-header">
                                <h6>Add Beneficiary Distribution</h6>
                                <button type="button" x-on:click="closeAddBeneficiaryModal('@(totalUndistributedAmountFormId)', '@(formId)')">X</button>
                            </div>
                            <div class="custom-modal-content">
                                <div class="tab-group">
                                    <button :class="addBeneficiaryCurrentTab == 0 && 'active'" type="button" x-on:click="setAddBeneficiaryCurrentTab(0)">Beneficiary</button>
                                </div>

                                <div x-show="addBeneficiaryCurrentTab === 0">
                                    <div style="display: flex; justify-content: space-between;">
                                        <p class="m-0">Total distributed amount: <span x-text="TotalDistributedRevenue"></span></p>
                                        <p class="m-0">Total undistributed amount: <span>@item.TotalUndistributedAmount.ToBDTCurrency()</span></p>
                                    </div>

                                    <table class="table table-sm mb-2" x-show="DistributedToBeneficiary.length > 0">
                                        <tr>
                                            <th>SL</th>
                                            <th>Name</th>
                                            <th>Gender</th>
                                            <th>NID</th>
                                            <th>Phone Number</th>
                                            <th>Distribute Amount</th>
                                        </tr>
                                        <tbody>
                                            <template x-for="(data, index) in DistributedToBeneficiary" :key="index">
                                                <tr class="">
                                                    <td x-text="++index"></td>
                                                    <td x-text="data.SocialForestryBeneficiary.BeneficiaryName"></td>
                                                    <td x-text="GetGenderDisplay(data.SocialForestryBeneficiary.Gender)"></td>
                                                    <td x-text="data.SocialForestryBeneficiary.NID"></td>
                                                    <td x-text="data.SocialForestryBeneficiary.MobileNumber"></td>
                                                    <td>
                                                        <input x-model="data.DepositedRevenueAmount" class="form-control" type="number" placeholder="Enter deposit revenue amount" />
                                                    </td>
                                                </tr>
                                            </template>
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                            <div class="custom-modal-footer">
                                <button type="button" class="btn btn-sm btn-primary" x-on:click="closeAddBeneficiaryModal('@(totalUndistributedAmountFormId)', '@(formId)')">Ok</button>
                            </div>
                        </div>
                        <!-- Modal End -->

                        <div class="text-right mt-3">
                            <button x-on:click="openModal" type="button" class="btn btn-sm btn-primary">Distribute to Beneficiary</button>
                        </div>
                    }

                    <form asp-action="Create" asp-controller="Distribution" enctype="multipart/form-data" class="row mt-2" id="@formId">
                        <input type="hidden" value="@Model.CuttingPlantationId" name="CuttingPlantationId" />
                        <input type="hidden" value="@item.DistributionFundTypeId" name="DistributionFundTypeId" />
                        <input type="hidden" value="@item.Percentage" name="SharePercentage" />

                        <div class="col-md-3">
                            <label class="m-0">Distributed Amount <span style="color: red">*</span></label>
                            <input @(isBeneficiary ? "readonly" : "") placeholder="Enter distributed amount" class="form-control" type="number" name="DepositedRevenueAmount" max="@item.TotalUndistributedAmount" min="1" required />
                        </div>
                        <div class="col-md-3">
                            <label class="m-0">Distributed Date <span style="color: red">*</span></label>
                            <input placeholder="Enter distributed date" class="form-control" type="date" name="DepositDate" required />
                        </div>
                        <div class="col-md-3">
                            <label class="m-0">Remarks</label>
                            <input class="form-control" type="text" name="Remarks" placeholder="Enter remarks" />
                        </div>
                        <div class="col-md-3">
                            <label class="m-0">File</label>
                            <input class="form-control" type="file" name="DepositFile" />
                        </div>

                        <button type="button" class="btn btn-sm btn-primary submit_btn" onclick="submitForm(event, '@formId', @(isBeneficiary ? "true" : "false"))">Add</button>
                    </form>
                </div>

                @{
                    var index = 1;
                    var data = Model.ShareDistributions.Where(x => x.DistributionFundTypeId == item.DistributionFundTypeId).ToList();
                }

                @if(data.Count != 0)
                {
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Distributed Amount</th>
                                <th scope="col">Date</th>
                                <th scope="col">Document File</th>
                                <th scope="col">Remarks</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var distributed in data)
                            {
                                <tr>
                                    <th scope="row">@(index++)</th>
                                    <td>@distributed.DepositedRevenueAmount.ToBDTCurrency()</td>
                                    <td>@distributed.DepositDate.ToUIDateString()</td>
                                    <td>
                                        @if (string.IsNullOrEmpty(distributed.DepositFile))
                                        {
                                            <span>No file</span>
                                        }
                                        else
                                        {
                                            <a class="btn btn-sm btn-primary" style="color:white" href="@distributed.DepositFile" download="@(FilePathHelper.GetFileNameWithExtensionFromUrl(distributed.DepositFile))">Download</a>
                                        }
                                    </td>
                                    <td>@distributed.Remarks</td>
                                    <td>
                                        <button onclick="showDeleteConfirmMessage(@distributed.Id)" class="btn btn-danger btn-sm">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </fieldset>
        }
    </div>
</div>

<script>
    let _distributedToBeneficiary = [];

    function submitForm(event, formId, isBeneficiary) {
        const isFormValid = $(`#${formId}`).valid();
        if (!isFormValid) return;

        if (isBeneficiary) {
            event.preventDefault();

            const form = document.getElementById(formId);

            let finalFormData = new FormData();
            let formData = new FormData(form);

            let newObj = Object.fromEntries(formData);
            newObj.DistributedToBeneficiary = _distributedToBeneficiary;

            objectToFormData(newObj, finalFormData);
            finalFormData.delete("DepositFile");

            const file = form.querySelector("input[name=DepositFile]").files[0];
            if (file) {
                finalFormData.append("DepositFile", file);
            }

            $.ajax({
                type: "POST",
                url: "/Distribution/Create",
                data: finalFormData,
                cache: false,
                contentType: false,
                processData: false,
                dataType: 'json',
                success: function (data) {
                    $(".loader").fadeOut("fast");
                    window.location.reload();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $(".loader").fadeOut("fast");
                    window.location.reload();
                }
            });

            return;
        }

        $(".loader").fadeIn("slow");
        $(`#${formId}`).submit();
    }

    document.addEventListener('alpine:init', () => {
        Alpine.data('distribute_to_beneficiary', () => ({
            // Modal
            isAddBeneficiaryModalOpen: false,
            closeAddBeneficiaryModal(totalUndistributedAmountFormId, formId) {
                const totalUndistributedAmount = getNumber(document.getElementById(totalUndistributedAmountFormId).value);
                if (this.TotalDistributedRevenue > totalUndistributedAmount) {
                    alert("Total distributed amount can not greater than total undistributed amount");
                    return;
                }

                if (!formId) {
                    return;
                }

                const formField = document.querySelector(`#${formId} input[name=DepositedRevenueAmount]`);
                if (formField) {
                    formField.value = this.TotalDistributedRevenue;
                }

                _distributedToBeneficiary = this.DistributedToBeneficiary;

                this.isAddBeneficiaryModalOpen = false;
            },
            addBeneficiaryCurrentTab: 0,
            setAddBeneficiaryCurrentTab(i) {
                this.addBeneficiaryCurrentTab = i;
            },
            openModal() {
                this.isAddBeneficiaryModalOpen = true;
                this.LoadBeneficiaries();
            },

            DistributedToBeneficiary: [],
            SocialForestryBeneficiaryDropdowns: {
                Genders: [],
            },
            GetGenderDisplay(id) {
                return this.SocialForestryBeneficiaryDropdowns.Genders.find(x => x.Id == id)?.Name;
            },

            get TotalDistributedRevenue() {
                const total = this.DistributedToBeneficiary.reduce((accumulator, currentValue) => {
                    return accumulator + getNumber(currentValue.DepositedRevenueAmount || 0);
                }, 0);

                return total;
            },

            async LoadBeneficiaries() {
                let [
                    beneficiaries,
                    genders,
                ] = await Promise.all([
                    fetch(`/SocialForestryBeneficiary/GetBeneficiariesByNewRaisedId/@Model.NewRaisedPlantationId`).then(response => response.json()),
                    fetch("/Dropdown/GetGenderMfEnumList").then(response => response.json()),
                ]);

                if (genders) {
                    this.SocialForestryBeneficiaryDropdowns.Genders = genders;
                }

                let data = beneficiaries.Data ?? [];
                data = data.map(x => {
                    return {
                        ShareDistributionId: 0,
                        SocialForestryBeneficiary: { ...x },
                        DepositedRevenueAmount:
                            (this.DistributedToBeneficiary
                                .find(y => y.SocialForestryBeneficiary.Id === x.Id)
                                ?.DepositedRevenueAmount) || null,
                    }
                });

                this.DistributedToBeneficiary = data;
            },
        }));
    });

    function getNumber(value) {
        value = parseFloat(value);
        value = isNaN(value) ? 0 : value;

        return value;
    }

	function showDeleteConfirmMessage(id) {
		swal({
			title: "Are you sure?",
			text: "You will not be able to recover this item!",
			type: "warning",
			showCancelButton: true,
			confirmButtonColor: "#DD6B55",
			confirmButtonText: "Yes, delete it!",
			closeOnConfirm: false
		}, function () {
			var data = {
				'id': id
			};
			$.ajax({
				type: "GET",
				contentType: "application/json; charset=utf-8",
                url: "/Distribution/Delete",
				data: data,
				datatype: "json",
				success: function (result) {
                    var message = result.Message;
                    swal("Info", message);

                    $(".confirm").on('click', function () {
                        window.location.reload();
                    });
                },
				error: function (xmlhttprequest, textstatus, errorthrown) {
					swal("Not Deleted!", "Item has not been deleted.", "error");
				}
			});
		});
	}

    function objectToFormData(dataObject, formData, parentKey) {
        for (var key in dataObject) {
            if (dataObject.hasOwnProperty(key)) {
                var propName = parentKey ? `${parentKey}[${key}]` : key;

                if (typeof dataObject[key] === 'object' && !Array.isArray(dataObject[key])) {
                    // Nested object, recursively convert it
                    objectToFormData(dataObject[key], formData, propName);
                } else if (Array.isArray(dataObject[key])) {
                    // Array of objects, loop through and convert each item
                    dataObject[key].forEach(function (item, index) {
                        var arrayKey = `${propName}[${index}]`;
                        objectToFormData(item, formData, arrayKey);
                    });
                } else {
                    // Regular key-value pair
                    formData.append(propName, dataObject[key]);
                }
            }
        }
    }
</script>

