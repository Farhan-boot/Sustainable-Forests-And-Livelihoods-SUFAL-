@model PTSL.GENERIC.Web.Core.Model.EntityViewModels.SocialForestryMeeting.SocialForestryMeetingVM

@{
    ViewBag.Title = "Edit Social Forestry Meeting";
    var Message = ViewBag.Message;
    long.TryParse(Context.Request.Query["id"], out var id);

    //var SocialForestryTrainingTypeId = (Model.SocialForestryTrainingTypeId != null && Model.SocialForestryTrainingTypeId > 0) ? Model.SocialForestryTrainingTypeId : 0;
}

<style>
    /* .add-participant-container {
            display: flex;
            align-items: end;
            gap: 8px;
        }*/

    label.error {
        color: red !important;
    }

    .participantMemberTableContainer {
        display: none;
    }

        .participantMemberTableContainer:has(table tbody tr) {
            display: table;
        }

    .mybutton {
        color: blue;
        height: 34px;
        margin-top: 8px;
        width: 100%;
    }
</style>

<div class="card">
    <div class="card-header">
        <h4>
            <a href="/SocialForestryMeeting/Index" class="mr-1 back">
                <svg width="20" height="20" viewBox="0 0 32 32">
                    <path fill="currentColor" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z" />
                </svg>
            </a>
            Edit Social Forestry Meeting
        </h4>
        <!-- resetFromData('#SocialForestryTrainingForm') -->
        <button class="ml-auto reset btn btn-sm" onclick="window.location.reload()">
            <svg class="rotate180z" width="16" height="16" viewBox="0 0 32 32">
                <path d="M25.95 7.65l.005-.004c-.092-.11-.197-.206-.293-.312c-.184-.205-.367-.41-.563-.603c-.139-.136-.286-.262-.43-.391c-.183-.165-.366-.329-.558-.482c-.16-.128-.325-.247-.49-.367c-.192-.14-.385-.277-.585-.406a13.513 13.513 0 0 0-.533-.324q-.308-.179-.625-.341c-.184-.094-.37-.185-.56-.27c-.222-.1-.449-.191-.678-.28c-.19-.072-.378-.145-.571-.208c-.246-.082-.498-.15-.75-.217c-.186-.049-.368-.102-.556-.143c-.29-.063-.587-.107-.883-.15c-.16-.023-.315-.056-.476-.073A12.933 12.933 0 0 0 6 7.703V4H4v8h8v-2H6.811A10.961 10.961 0 0 1 16 5a11.111 11.111 0 0 1 1.189.067c.136.015.268.042.403.061c.25.037.501.075.746.128c.16.035.315.08.472.121c.213.057.425.114.633.183c.164.054.325.116.486.178c.193.074.384.15.57.235c.162.072.32.15.477.23q.268.136.526.286c.153.09.305.18.453.276c.168.11.33.224.492.342c.14.102.282.203.417.312c.162.13.316.268.47.406c.123.11.248.217.365.332c.167.164.323.338.479.512A10.993 10.993 0 1 1 5 16H3a13 13 0 1 0 22.95-8.35z" fill="currentColor" />
            </svg>
            Reset
        </button>
    </div>
    <form id="SocialForestryTrainingForm" class="card-body">
        <div class="row p-2 custom green-card" style="border-radius: 5px;">
            <fieldset class="p-2 col-12">
                <legend class="float-none w-auto">Meeting Information</legend>

                <div class="row custom forest-location">
                    <div class="col-6 p-1">
                        @await Html.PartialAsync(
                        "~/Views/Shared/_ForestAdministrationForSocialForestryTraining.cshtml",
                        (
                        ViewBag.ForestCircleId as SelectList,
                        ViewBag.ForestDivisionId as SelectList,
                        ViewBag.ForestRangeId as SelectList,
                        ViewBag.ForestBeatId as SelectList,
                        ViewBag.ForestFcvVcfId as SelectList
                        )
                        )
                    </div>

                    <div class="col-6 p-1">
                        @await Html.PartialAsync(
                        "~/Views/Shared/_CivilAdministrationForSocialForestryTraining.cshtml",
                        (
                        ViewBag.DivisionId as SelectList,
                        ViewBag.DistrictId as SelectList,
                        ViewBag.UpazillaId as SelectList,
                        ViewBag.UnionId as SelectList
                        )
                        )
                    </div>
                </div>
            </fieldset>
        </div>
        <div class="row p-2 custom green-card" style="border-radius: 5px;">
            <fieldset class="p-2 col-12">
                <legend class="float-none w-auto">Meeting Information</legend>

                <div class="row">
                    <div class="col-6 pr-1">
                        <div class="row">
                            <div class="col-6 pr-1">
                                <label>
                                    Ngo
                                    <span style="color:red;">*</span>
                                </label>
                                @Html.DropDownList("NgoId", null, "Choose..", htmlAttributes: new { @class = "", @required = "required" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12 pr-1">
                        <div class="row" style="padding-right: 10px;">
                            <div class="col-3 pr-1">
                                <label>
                                    Meeting Title
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" id="MeetingTitle" name="MeetingTitle" value="@Model.MeetingTitle" placeholder="Enter Meeting Title" />
                            </div>
                            <div class="col-3 pr-r">
                                <label>
                                    Venue
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" id="Venue" name="Venue" value="@Model.Venue" placeholder="Enter Venue" />
                            </div>
                            <div class="col-3 pl-1">
                                <label>
                                    Start Time
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="time" id="StartTime" name="StartTime" value="@Model.StartTime.ToUITimeString()" placeholder="Start Time" />
                            </div>
                            <div class="col-3 pr-r">
                                <label>
                                    End Time
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="time" id="EndTime" name="EndTime" value="@Model.EndTime.ToUITimeString()" placeholder="End Time" />
                            </div>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="row mt-3" style="padding-left: 10px;">
                            <div class="col-3 pl-1">
                                <label>
                                    Meeting Date
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="date" id="MeetingDate" name="MeetingDate" value="@Model.MeetingDate.ToUIDateString()" placeholder="Enter Meeting Date" />
                            </div>
                            <div class="col-3 pl-r">
                                <label>Meeting Type For Social Forestry Meeting <span style="color:red;">*</span></label>
                                @Html.DropDownList("MeetingTypeForSocialForestryMeetingId", null, "Choose..", htmlAttributes: new { @class = "", @required = "required" })
                            </div>
                            <div class="col-3 pr-1">
                                <label>
                                    Meeting Organizer
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" id="MeetingOrganizer" name="MeetingOrganizer" value="@Model.MeetingOrganizer" placeholder="Enter Meeting Organizer" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-3" style="padding-left: 10px;">
                    <div class="col-3 px-1 add-participant-container" style="top:-7px;">
                        <br />
                        <button type="button" class="mybutton flex-grow-1 btn btn-sm" data-toggle="modal" data-target=".bd-example-modal-file">
                            Attach Files
                            <svg class="ml-1" width="15" height="15" viewBox="0 0 32 32">
                                <path fill="currentColor" d="m28.1 18.9l-15-15c-2.5-2.6-6.6-2.6-9.2-.1s-2.6 6.7 0 9.2l.1.1L6.8 16l1.4-1.4l-2.9-2.9c-1.7-1.7-1.7-4.6 0-6.3s4.6-1.8 6.3-.1l.1.1l14.9 14.9c1.8 1.7 1.8 4.6.1 6.3c-1.7 1.8-4.6 1.8-6.3.1l-.1-.1l-7.4-7.4c-1-1-.9-2.6 0-3.5c1-.9 2.5-.9 3.5 0l4.1 4.1l1.4-1.4l-4.2-4.2c-1.8-1.7-4.6-1.6-6.3.2c-1.6 1.7-1.6 4.4 0 6.2l7.5 7.5c2.5 2.6 6.6 2.6 9.2.1s2.6-6.7 0-9.3c0 .1 0 0 0 0z" />
                            </svg>
                        </button>
                    </div>
                    <div class="col-3 pl-1 add-participant-container" style="top:-7px;">
                        <br>
                        <button type="button" class="mybutton flex-grow-1 btn btn-sm" data-toggle="modal" data-target=".bd-example-modal-lg">
                            Add Participants
                            <svg class="ml-1" width="15" height="15" viewBox="0 0 15 15"><path fill="none" stroke="currentColor" d="M7.5 1v13M1 7.5h13" /></svg>
                        </button>
                    </div>
                </div>
            </fieldset>
        </div>
       
    </form>

    <div id="table-show px-5" style="padding: 0 10px;" class="participantMemberTableContainer">
        <h6>Participants List</h6>

        <table class="table table-striped table-bordered table-hover" id="participantMemberTable" style="width:100%;">
            <thead>
                <tr>
                    <th class="text-center">SL</th>
                    <th>Name</th>
                    <th>Plantation Name</th>
                    <th>Mobile Number</th>
                    <th>NID</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var index = 1;
                }

                @if (Model.SocialForestryMeetingParticipentsMaps != null)
                {
                    foreach (var map in Model.SocialForestryMeetingParticipentsMaps)
                    {
                        <tr data-id=@map.Id>
                            <td class="text-center index">@(index++)</td>
                            <td>@map.SocialForestryMeetingMember?.MemberName</td>
                            <td>@map.SocialForestryMeetingMember?.PlantationName</td>
                            <td>@map.SocialForestryMeetingMember?.MemberPhoneNumber</td>
                            <td>@map.SocialForestryMeetingMember?.MemberNID</td>
                            @*<td>@map.SocialForestryMeetingMember?.PlantationName</td>*@
                            <td>
                                <button onclick="deleteMember(@map.Id)" class="btn btn-danger btn-sm">Delete</button>
                                <button onclick="editMember(@map.SocialForestryMeetingMemberId, @map.Id)" class="btn btn-primary btn-sm">Edit</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document" style="max-width: calc(100vw - 200px);">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Edit Member</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="EditOtherMember">
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>
                                    Member Name
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" class="form-control" name="MemberName" placeholder="Enter Member Name" />
                            </div>
                            <div class="form-group col-md-3">
                                <label>
                                    Plantation Name
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" class="form-control" name="PlantationName" placeholder="Enter Plantation Name" />
                            </div>
                            <div class="form-group col-md-3">
                                <label>
                                    Member Gender
                                    <span style="color:red;">*</span>
                                </label>
                                <select name="MemberGender" class="form-control">
                                    <option value="">Select..</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>
                                    Mobile Number
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" class="form-control" name="MemberPhoneNumber" placeholder="Enter Member Phone Name" />
                            </div>
                            <div class="form-group col-md-6">
                                <label>
                                    Member NID
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" class="form-control" name="MemberNID" placeholder="Enter Member NID" />
                            </div>
                            <div class="form-group col-md-6">
                                <label>
                                    Member Designation
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" class="form-control" name="MemberDesignation" placeholder="Enter Member Designation" />
                            </div>
                            <div class="form-group col-md-6">
                                <label>
                                    Member Organization
                                </label>
                                <input type="text" class="form-control" name="MemberOrganization" placeholder="Enter Member Organization" />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>
                                    Ethnicity
                                </label>
                                <select name="EthnicityId" class="form-control" asp-items="ViewBag.EthnicityId">
                                    <option selected value="">Choose..</option>
                                </select>
                            </div>
                            <div class="form-group col-md-6">
                                <label>
                                    Member Address
                                </label>
                                <input type="text" class="form-control" name="MemberAddress" placeholder="Enter Member Address" />
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="updateMember()">Ok</button>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end pt-1 pb-2">
        <button type="submit" id="SaveTraining" class="btn btn-sm btn-green mr-2 save">
            Update
        </button>
    </div>

    @await Html.PartialAsync("_AddParticipant")
    @await Html.PartialAsync("_AddFiles", Model)
</div>

<script>
    var allParticipants = [];

    $("#CloseModal").on("click", function () {
        // clean up
    });
</script>

<script>
    var editMemberData = {};
    var editParticipantMapId = 0;
    // departmental
    function editMember(memberId, mapId) {
        $.ajax({
            type: "GET",
            contentType: "application/json; charset=utf-8",
            url: "/Dropdown/GetsocialForestryMeetingMemberById",
            data: { id: memberId },
            datatype: "json",
            success: function (result) {
                $("#exampleModalCenter").modal();

                editMemberData = result;
                editParticipantMapId = mapId;

                $("#EditOtherMember input[name=MemberName]").val(result.MemberName);
                $("#EditOtherMember input[name=MemberPhoneNumber]").val(result.MemberPhoneNumber);
                $("#EditOtherMember select[name=MemberGender]").val(result.MemberGender);
                $("#EditOtherMember input[name=MemberNID]").val(result.MemberNID);
                $("#EditOtherMember input[name=MemberDesignation]").val(result.MemberDesignation);
                $("#EditOtherMember input[name=MemberOrganization]").val(result.MemberOrganization);
                $("#EditOtherMember input[name=MemberAddress]").val(result.MemberAddress);
                $("#EditOtherMember select[name=EthnicityId]").val(result.EthnicityId);

                $("#EditOtherMember input[name=PlantationName]").val(result.PlantationName);

            },
            error: function () {
                swal("Error", "Member not found", "error");
            }
        });
    }
    function updateMember() {
        $("#EditOtherMember").validate({
            rules: {
                MemberName: {
                    required: true,
                    minlength: 2,
                },
                MemberAge: "required",
                MemberGender: "required",
                MemberNID: {
                    required: true,
                    mustBeInteger: true,
                    minlength: 10,
                    maxlength: 17,
                },
                MemberDesignation: "required",
                MemberPhoneNumber: {
                    required: true,
                    mustBeInteger: true,
                    minlength: 11,
                    maxlength: 11,
                },
            }
        });

        var isFormValid = $("#EditOtherMember").valid();
        if (isFormValid == false) {
            return;
        }

        var member = {
            Id: editMemberData.Id,
            MemberName: $("#EditOtherMember input[name=MemberName]").val(),
            MemberPhoneNumber: $("#EditOtherMember input[name=MemberPhoneNumber]").val(),
            MemberGender: $("#EditOtherMember select[name=MemberGender]").val(),
            MemberNID: $("#EditOtherMember input[name=MemberNID]").val(),
            MemberDesignation: $("#EditOtherMember input[name=MemberDesignation]").val(),
            MemberOrganization: $("#EditOtherMember input[name=MemberOrganization]").val(),
            MemberAddress: $("#EditOtherMember input[name=MemberAddress]").val(),
            EthnicityId: $("#EditOtherMember select[name=EthnicityId]").val(),
            PlantationName: $("#EditOtherMember select[name=PlantationName]").val(),

        };

        allParticipants = allParticipants.map(x => {
            if (x.mapId == editParticipantMapId) {
                debugger;

                return {
                    ...x,
                    member: { ...member, Id: editMemberData.Id }
                }
            }
            return x;
        });
        $("#exampleModalCenter").modal('hide');
        var row = $("#participantMemberTable tbody").find(`tr[data-id=${editParticipantMapId}]`);
        var genderName = genderList.find(x => x.Id == member.MemberGender);
        row.after(`
                <tr data-id=${editParticipantMapId}>
                    <td class="text-center index"></td>
                    <td>${member.MemberName}</td>
                    <td>${member.MemberPhoneNumber}</td>
                    <td>${member.MemberNID}</td>
                    <td>${member.PlantationName}</td>
                    <td>
                        <button onclick="deleteMember(${editParticipantMapId})" class="btn btn-sm btn-danger">Delete</button>
                        <button onclick="editMember(${editMemberData.Id})" class="btn btn-sm btn-primary">Edit</button>
                    </td>
                </tr>
            `);
        row.remove();
        makeIndex();
    }

    function makeIndex() {
        var index = 1;
        $("#participantMemberTable td.index").each(function () {
            $(this).text(index++);
        });
    }
</script>

<script>
    const memberTypeName = "Member";
    const beneficiaryTypeName = "Beneficiary";

    $("#SaveTraining").on("click", function () {
        // Validate
        $("#SocialForestryTrainingForm").validate({
            rules: {
                MeetingTitle: {
                    required: true,
                    isEnglish: true,
                },
                MeetingTitleBn: {
                    isOptionalBangla: true,
                },
                StartTime: {
                    required: true,
                },
                EndTime: {
                    required: true,
                },
                NgoId: {
                    required: true,
                },

                Venue: {
                    required: true,
                },

                MeetingDate: "required",
                MeetingTypeForSocialForestryMeetingId: "required",
                MeetingOrganizer: "required",
            }
        });

        var isFormValid = $("#SocialForestryTrainingForm").valid();
        if (isFormValid == false) {
            return;
        }

        // Check if participants is added
        if (Array.isArray(allParticipants) == false) {
            swal(
                'Invalid Form',
                'No Participants added.',
                'error'
            );
            return;
        }

        if (allParticipants.length < 1) {
            swal(
                'Invalid Form',
                'No Participants added.',
                'error'
            );
            return;
        }

        // Map all participants
        var participants = allParticipants.map(x => {
            return {
                socialForestryMeetingMember: {
                    ...x.member,
                    Id: x.member.Id < 1 ? 0 : x.member.Id,
                },
                Id: x.mapId ?? 0,
            }
        });

        var SocialForestryTraining = {
            Id: @id,
            MeetingTitle: $("#MeetingTitle").val(),
            //MeetingTitleBn: $("#MeetingTitleBn").val(),
            StartTime: $("#StartTime").val(),
            EndTime: $("#EndTime").val(),
            MeetingDate: $("#MeetingDate").val(),
            NgoId: $("#NgoId").val(),
            Venue: $("#Venue").val(),
            MeetingTypeForSocialForestryMeetingId: $("#MeetingTypeForSocialForestryMeetingId").val(),
            MeetingOrganizer: $("#MeetingOrganizer").val(),
            

            ForestCircleId: $("#ForestCircleId").val(),
            ForestDivisionId: $("#ForestDivisionId").val(),
            ForestRangeId: $("#ForestRangeId").val(),
            ForestBeatId: $("#ForestBeatId").val(),
            ForestFcvVcfId: $("#ForestFcvVcfId").val(),

            DivisionId: $("#DivisionId").val(),
            DistrictId: $("#DistrictId").val(),
            UpazillaId: $("#UpazillaId").val(),
            UnionId: $("#UnionId").val(),


            //ForestCircleId: $(".create-member select[name=ForestCircleId]").val(),
            //ForestDivisionId: $(".create-member select[name=ForestDivisionId]").val(),
            //ForestRangeId: $(".create-member select[name=ForestRangeId]").val(),
            //ForestBeatId: $(".create-member select[name=ForestBeatId]").val(),
            //ForestFcvVcfId: $(".create-member select[name=ForestFcvVcfId]").val(),
            //DivisionId: $(".create-member select[name=PresentDivisionId]").val(),
            //DistrictId: $(".create-member select[name=PresentDistrictId]").val(),
            //UpazillaId: $(".create-member select[name=PresentUpazillaId]").val(),

            EventTypeForTrainingId: $("#EventTypeForTrainingId").val(),
            SocialForestryTrainingTypeId: $("#SocialForestryTrainingTypeId").val(),
            TrainingOrganizerForTrainingId: $("#TrainingOrganizerForTrainingId").val(),
            TrainerAddress: $("#TrainerAddress").val(),
            TrainerDesignationForTrainingId: $("#TrainerDesignationForTrainingId").val(),
            SocialForestryMeetingParticipentsMapsJSON: participants,
            //SocialForestryTrainingFiles: ,
        };

        var formData = new FormData();

        for (var key in SocialForestryTraining) {
            var value = SocialForestryTraining[key];

            if (Array.isArray(value)) {
                formData.append(key, JSON.stringify(value));
            } else {
                formData.append(key, value);
            }
        }

        $("#imagesList input[type=file]").each(function () {
            var current = $(this);

            if (current?.length && current.length > 0) {
                formData.append("SocialForestryMeetingImageFiles[]", current[0].files[0]);
            }
        });

        $("#documentsList input[type=file]").each(function () {
            var current = $(this);

            if (current?.length && current.length > 0) {
                formData.append("SocialForestryMeetingDocumentFiles[]", current[0].files[0]);
            }
        });

        $(".loader").fadeIn("slow");

        $.ajax({
            type: "POST",
            url: "/SocialForestryMeeting/Edit",
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            dataType: 'json',
            success: function (response) {
                $(".loader").fadeOut("slow");

                if (response.Success) {
                    window.location.href = response.RedirectUrl;
                    /*
                    swal(
                        'Success',
                        response.Message,
                        'success'
                    );
                    */
                } else {
                    swal(
                        'Error',
                        response.Message,
                        'error'
                    );
                }
            },
            error: function () {
                $(".loader").fadeOut("slow");

                swal(
                    'Unexpected',
                    'Unknown error occurred',
                    'error'
                );
            }
        });
    });
</script>

<script>
    let eventTypes = [];

    $(document).ready(function () {
        $("#StartTime, #EndTime").trigger("change");

        $.ajax({
            cache: false,
            type: "GET",
            url: "/Dropdown/GetEventTypeForTrainingList",
            success: function (data) {
                eventTypes = data;
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve data.');
            }
        });

        //$.ajax({
        //    cache: false,
        //    type: "GET",
        //    url: "/Dropdown/GetSocialForestryTrainingTypeList",
        //    success: function (data) {
        //        var SocialForestryTrainingTypeId = $("#SocialForestryTrainingTypeId");
        //        SocialForestryTrainingTypeId.html('<option value="">Choose..</option>');
        //        $.each(data, function (id, option) {
        //            SocialForestryTrainingTypeId.append($('<option></option>').val(option.Id).html(option.Name));
        //        });


        //    },
        //    error: function (xhr, ajaxOptions, thrownError) {
        //        alert('Failed to retrieve data.');
        //    }
        //});
    });

    $("#EventTypeForTrainingId").on("change", function () {
        const value = $(this).val();
        const found = eventTypes.find(x => x.Id == value);

        if (found && found.HasTrainingType) {
            $("#SocialForestryTrainingTypeId").removeAttr("disabled");
        } else {
            $("#SocialForestryTrainingTypeId").attr("disabled", "");
            $("#SocialForestryTrainingTypeId").val("");
        }
    });
</script>

<script>
    function deleteMember(SocialForestryTrainingParticipentsMapId) {
        swal({
            title: "Are you sure?",
            text: "This action can not be undone!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            closeOnConfirm: false
        }, function () {
            var data = {
                'SocialForestryTrainingParticipentsMapId': SocialForestryTrainingParticipentsMapId,
            };
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                url: "/SocialForestryTraining/DeleteParticipant",
                data: data,
                datatype: "json",
                success: function (result) {
                    var message = result.Message;
                    var success = result.Success;

                    if (success == true) {
                        swal("Deleted!", "Item has been deleted.", "success");
                        $("#participantMemberTable tbody").find(`tr[data-id=${SocialForestryTrainingParticipentsMapId}]`).remove();

                        allParticipants = allParticipants.filter(x => x.mapId != SocialForestryTrainingParticipentsMapId);
                    } else {
                        swal("Deleted Failed!", message, "error");
                    }
                },
                error: function (xmlhttprequest, textstatus, errorthrown) {
                    swal("Not Deleted!", "Item has not been deleted.", "error");
                }
            });
        });
    }
</script>
<script>
    var genderList = [];

    $.ajax({
        cache: false,
        type: "GET",
        url: "/Dropdown/GetGenderEnumList",
        success: function (data) {
            genderList = data;

            var Gender = $("#EditOtherMember select[name=MemberGender]");

            Gender.html('<option value="">Choose..</option>');
            $.each(data, function (id, option) {
                Gender.append($('<option></option>').val(option.Id).html(option.Name));
            });
        },
    });
</script>
<script>
    function setData(data) {
        if (Array.isArray(data)) {
            data.forEach(function (value, index) {
                var member = {}

                if (value.socialForestryMeetingMember) {
                    member = {
                        member: {
                            Id: value.socialForestryMeetingMember.id,
                            MemberName: value.socialForestryMeetingMember.memberName,
                            MemberPhoneNumber: value.socialForestryMeetingMember.memberPhoneNumber,
                            MemberGender: value.socialForestryMeetingMember.memberGender,
                            PlantationName: value.socialForestryMeetingMember.plantationName,
                            MemberNID: value.socialForestryMeetingMember.memberNID,
                            MemberDesignation: value.socialForestryMeetingMember.memberDesignation,
                            MemberOrganization: value.socialForestryMeetingMember.memberOrganization,
                        },
                        mapId: value.id,
                    }
                }
                allParticipants.push(member);
            });
        }
    }

    setData(@Html.Raw(Json.Serialize(Model.SocialForestryMeetingParticipentsMaps)))
</script>

<script>
    $(document).on("change", "#StartTime, #EndTime", function () {
        var StartTime = $("#StartTime").val();
        var EndTime = $("#EndTime").val();

        if (StartTime && EndTime) {
            var start = new Date(StartTime);
            var end = new Date(EndTime);

            var diff = start.getTime() - end.getTime();
            var differenceInDay = Math.abs(Math.ceil(diff / (1000 * 3600 * 24))) + 1;

            $("#MeetingDate").val(`${differenceInDay} ${differenceInDay == 1 ? 'day' : 'days'}`);
        }
    });
</script>