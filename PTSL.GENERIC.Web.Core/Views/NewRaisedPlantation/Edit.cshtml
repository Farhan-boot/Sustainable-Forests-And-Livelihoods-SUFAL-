@using PTSL.GENERIC.Web.Core.Helper.Enum;
@using PTSL.GENERIC.Web.Core.Helper.Enum.SocialForestry
@model PTSL.GENERIC.Web.Core.Model.EntityViewModels.SocialForestry.NewRaisedPlantationVM
@inject IHttpContextAccessor Accessor
@{
    ViewBag.Title = "Edit New Raised Plantation Information";

    var newRaisedIdString = Accessor.HttpContext?.Request.Query["id"][0];
    long.TryParse(newRaisedIdString, out var newRaisedId);
}

<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<style>
    .plantation_images_container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        column-gap: 10px;
        row-gap: 5px;
    }

    .plantation_image_item {
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .btn-remove {
        background-color: #fc544b !important;
        border-color: #fc544b !important;
        color: white;
    }

    .btn-remove:hover {
        color: white;
    }

    .border-btm {
        margin-bottom: 0 !important;
        border-bottom: 1px solid #646967;
    }
</style>

<div class="card">
    <div class="card-header">
        <h4>
            <a href="/NewRaisedPlantation/Index" class="mr-1 back">
                <svg width="20" height="20" viewBox="0 0 32 32">
                    <path fill="currentColor" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z" />
                </svg>
            </a>
            Edit New Raised Plantation Information
        </h4>
        <button class="ml-auto reset btn btn-sm" onclick="resetFromData('#Form')">
            <svg class="rotate180z" width="16" height="16" viewBox="0 0 32 32">
                <path
                    d="M25.95 7.65l.005-.004c-.092-.11-.197-.206-.293-.312c-.184-.205-.367-.41-.563-.603c-.139-.136-.286-.262-.43-.391c-.183-.165-.366-.329-.558-.482c-.16-.128-.325-.247-.49-.367c-.192-.14-.385-.277-.585-.406a13.513 13.513 0 0 0-.533-.324q-.308-.179-.625-.341c-.184-.094-.37-.185-.56-.27c-.222-.1-.449-.191-.678-.28c-.19-.072-.378-.145-.571-.208c-.246-.082-.498-.15-.75-.217c-.186-.049-.368-.102-.556-.143c-.29-.063-.587-.107-.883-.15c-.16-.023-.315-.056-.476-.073A12.933 12.933 0 0 0 6 7.703V4H4v8h8v-2H6.811A10.961 10.961 0 0 1 16 5a11.111 11.111 0 0 1 1.189.067c.136.015.268.042.403.061c.25.037.501.075.746.128c.16.035.315.08.472.121c.213.057.425.114.633.183c.164.054.325.116.486.178c.193.074.384.15.57.235c.162.072.32.15.477.23q.268.136.526.286c.153.09.305.18.453.276c.168.11.33.224.492.342c.14.102.282.203.417.312c.162.13.316.268.47.406c.123.11.248.217.365.332c.167.164.323.338.479.512A10.993 10.993 0 1 1 5 16H3a13 13 0 1 0 22.95-8.35z"
                    fill="currentColor" />
            </svg>
            Reset
        </button>
    </div>

    <!form @@submit.prevent x-cloak x-data="new_raised_plantation" id="Form" class="card-body mt-2">
        <div class="p-2 green-card" style="border-radius: 5px;">
            <div class="row custom forest-location">
                <partial name="partials/_ForestAndCivilLocation.cshtml" />
            </div>
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            <div class="row custom forest-location">
                <partial name="partials/_LandOwningAgencyAndNGO.cshtml" />
            </div>
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            <!-- Plantation Information -->
            <partial name="partials/_PlantationInformation.cshtml" />

            <!-- Image and Attachment -->
            <partial name="partials/_ImageAndAttachment.cshtml" />

            <!-- Nursery Information -->
            <partial name="partials/_NurseryInformation.cshtml" />
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            <partial name="partials/_ConcernedOfficial.cshtml" />
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            <partial name="partials/_InspectionDetails.cshtml" />
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            <partial name="partials/_CostInformation.cshtml" />
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            <partial name="partials/_LabourInformation.cshtml" />
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            <partial name="partials/_BeneficiaryInformation.cshtml" />
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            <partial name="partials/_DamageInformation.cshtml" />
        </div>

        <div class="d-flex justify-content-end py-2">
            <button x-on:click="SubmitForm" type="button" id="submit-btn" class="btn btn-sm btn-green save">
                Save
            </button>
        </div>
    </!form>
</div>

<script type="text/javascript">
    document.addEventListener('alpine:init', () => {
        Alpine.data('new_raised_plantation', () => ({
            init() {
                this.InitializeNewNursery();
                this.LoadAllDropdowns();

                this.new_inspection_details_information = {
                    ...this.init_inspection_details_information,
                };
                new_cost_information = { ...this.init_cost_information };

                this.InitializeLaborInformation();
                this.NewPlantationSocialForestryBeneficiaryMaps = this.GeneratePlantationSocialForestryBeneficiaryMaps(null, this.getRandomString());
                this.PlantationSocialForestryBeneficiaryMaps.push(this.NewPlantationSocialForestryBeneficiaryMaps);
                this.InitializeSocialForestryBeneficiary();
                this.InitializeConcernedOfficialMap();
                this.InitializeInspectionDetails();

                this.tempFormData = new FormData();
            },

            getRandomString() {
                return window.crypto.getRandomValues(new Uint32Array(1)).toString();
            },

            tempFormData: null,

            async LoadAllDropdowns() {
                let [
                    landOwningAgency,
                    socialForestryNGO,
                    plantationType,
                    plantationUnit,
                    projectType,
                    plantationTopography,
                    costType,
                    designation,
                    financialYear,

                    nurseryInformation,
                    genders,
                    ethnicity,
                    laborCostType,
                    plantationCauseOfDamage,
                    newRaisedPlantation,
                ] = await Promise.all([
                    fetch("/LandOwningAgency/List").then(response => response.json()),
                    fetch("/SocialForestyNgo/List").then(response => response.json()),

                    fetch("/PlantationType/List").then(response => response.json()),
                    fetch("/PlantationUnit/ListByType/@UnitType.Area").then(response => response.json()),
                    fetch("/ProjectType/List").then(response => response.json()),
                    fetch("/PlantationTopography/List").then(response => response.json()),
                    fetch("/CostType/List").then(response => response.json()),
                    fetch("/SocialForestryDesignation/List").then(response => response.json()),
                    fetch("/FinancialYear/List").then(response => response.json()),

                    fetch("/NurseryInformation/List").then(response => response.json()),
                    fetch("/Dropdown/GetGenderMfEnumList").then(response => response.json()),
                    fetch("/Dropdown/GetEthnicityList").then(response => response.json()),
                    fetch("/LaborCostType/List").then(response => response.json()),
                    fetch("/PlantationCauseOfDamage/List").then(response => response.json()),
                    fetch(`/NewRaisedPlantation/DetailsForEdit/@newRaisedId`).then(response => response.json()),
                ]);

                if (landOwningAgency) {
                    this.LandOwningAndNGODropdowns.Agency = landOwningAgency.Data;
                }
                if (socialForestryNGO) {
                    this.LandOwningAndNGODropdowns.Ngo = socialForestryNGO.Data;
                }
                if (plantationType) {
                    this.PlantationInformationDropdowns.PlantationType = plantationType.Data;
                }
                if (plantationUnit) {
                    this.PlantationInformationDropdowns.PlantationUnit = plantationUnit.Data;
                }
                if (projectType) {
                    this.PlantationInformationDropdowns.ProjectType = projectType.Data;
                }
                if (plantationTopography) {
                    this.PlantationInformationDropdowns.Topography = plantationTopography.Data;
                }
                if (costType) {
                    const x = costType.Data?.map(x => ({ value: x.Id, label: x.LabelName, display: x.Name }));

                    this.CostInformationDropdowns.cost_type = x;
                }
                if (laborCostType) {
                    this.LaborInformationDropdowns.CostTypes = laborCostType.Data;
                }
                if (designation) {
                    this.InspectionDetailsMapDropdowns.designation = designation.Data;
                    this.ConcernedOfficialMapDropdowns.Designation = designation.Data;
                }
                if (financialYear) {
                    this.PlantationInformationDropdowns.FinancialYear = financialYear.Data;
                }
                if (nurseryInformation) {
                    this.ReplantationNurseryInfoDropdowns.Nursery = nurseryInformation.Data;
                }
                if (genders) {
                    this.SocialForestryBeneficiaryDropdowns.Genders = genders;
                }
                if (ethnicity) {
                    this.SocialForestryBeneficiaryDropdowns.Ethnicities = ethnicity;
                }
                if (plantationCauseOfDamage) {
                    this.PlantationDamageInformationDropdowns.CauseOfDamage = plantationCauseOfDamage.Data;
                }
                if (newRaisedPlantation) {
                    const data = newRaisedPlantation.Data;

                    this.LandOwningAgencyId = data.LandOwningAgencyId;
                    this.SocialForestryNgoId = data.SocialForestryNgoId;
                    this.PlantationTypeId = data.PlantationTypeId;
                    this.CurrentRotationNo = data.RotationNo;
                    this.RotationNo = data.RotationNo;
                    this.PlantationId = data.PlantationId;
                    this.PlantationArea = data.PlantationArea;
                    this.PlantationUnitId = data.PlantationUnitId;
                    this.LocationWithCoordinate = data.LocationWithCoordinate;
                    this.MoujaAndJLNumber = data.MoujaAndJLNumber;
                    this.SheetNo = data.SheetNo;
                    this.PlotNo = data.PlotNo;
                    this.ProjectTypeId = data.ProjectTypeId;
                    this.PlantedFinancialYearId = data.PlantedFinancialYearId;
                    this.RotationInYear = data.RotationInYear;
                    this.ExpectedCuttingYear = data.ExpectedCuttingYear;
                    this.SanctionNo = data.SanctionNo;
                    this.SoilType = data.SoilType;
                    this.NaturalTreeSpecies = data.NaturalTreeSpecies;
                    this.PlantationTopographyId = data.PlantationTopographyId;
                    this.ClimateOfPlantationSite = data.ClimateOfPlantationSite;
                    this.ConcernedOfficialMap = data.ConcernedOfficialMap || [];
                    this.InspectionDetailsMap = data.InspectionDetailsMap || [];
                    this.CostInformation = data.CostInformation || [];
                    this.LaborInformation = data.LaborInformation.map(x => this.GetInitializeLaborInformation(x)) || [];
                    this.PlantationDamageInformation = data.PlantationDamageInformation || [];
                    this.PlantationPlants = data.PlantationPlants || [];
                    //this.PlantationSocialForestryBeneficiaryMaps = data(this.PlantationSocialForestryBeneficiaryMaps, []);
                    this.SocialForestryManagementCommitteeFormed = data.SocialForestryManagementCommitteeFormed;
                    this.FundManagementSubCommitteeFormed = data.FundManagementSubCommitteeFormed;
                    this.AdvisoryCommitteeFormed = data.AdvisoryCommitteeFormed;
                    this.Remarks = data.Remarks;

                    console.log(data.InspectionDetailsMap);

                    //this.SetCostTypeDisplayForLaborForAll();
                }
            },

            ...setupForestAndCivilLocation(),
            ...setupLandOwningAndCivilLocation(),
            ...plantationInformation(),
            ...imageAndAttachment(),
            ...nurseryInformation(),
            ...addConcernedOfficial(),
            ...addInspectionDetailsMap(),
            ...addCostInformation(),
            ...addLaborInformationData(),


            // Beneficiary
            PlantationSocialForestryBeneficiaryMaps: [],
            NewPlantationSocialForestryBeneficiaryMaps: {},
            InitPlantationSocialForestryBeneficiaryMaps: {
                Id: 0,
                IsUpdating: false,

                PBSAGroupId: "",
                CheckIfPBSAIsSigned: false,
                AgreementUploadFileUrl: "",
                SocialForestryBeneficiary: [],
                // Display
            },
            NewSocialForestryBeneficiary: {},
            InitSocialForestryBeneficiary: {
                Id: 0,
                UpdateIndex: null,

                BeneficiaryName: "",
                Gender: "",
                NID: "",
                MobileNumber: "",
                EthnicityId: "",
                Address: "",

                // Display
                GenderDisplay: "",
                EthnicityDisplay: "",
            },
            SocialForestryBeneficiaryDropdowns: {
                Genders: [],
                Ethnicities: [],
            },
            InitializeSocialForestryBeneficiary() {
                this.NewSocialForestryBeneficiary = { ...this.InitSocialForestryBeneficiary };
            },
            GetGenderDisplay(id) {
                return this.SocialForestryBeneficiaryDropdowns.Genders.find(x => x.Id == id)?.Name;
            },
            GeneratePlantationSocialForestryBeneficiaryMaps(data = null, pbasaId = null) {
                if (data) {
                    return {
                        ...data,
                        PBSAGroupId: pbasaId ?? data.pbasaId,
                        get TotalBeneficiary() {
                            return this.SocialForestryBeneficiary.length;
                        },
                        get TotalMale() {
                            return this.SocialForestryBeneficiary.filter(x => x.Gender == @((int)GenderMf.Male)).length;
                        },
                        get TotalFemale() {
                            return this.SocialForestryBeneficiary.filter(x => x.Gender == @((int)GenderMf.Female)).length;
                        },
                        get TotalMalePercentage() {
                            return Math.round((getNumber(this.TotalMale) / this.TotalBeneficiary) * 100, 2);
                        },
                        get TotalFemalePercentage() {
                            return Math.round((getNumber(this.TotalFemale) / this.TotalBeneficiary) * 100, 2);
                        },
                    };
                }
                else {
                    return {
                        ...this.InitPlantationSocialForestryBeneficiaryMaps,
                        PBSAGroupId: pbasaId ?? data.pbasaId,
                        get TotalBeneficiary() {
                            return this.SocialForestryBeneficiary.length;
                        },
                        get TotalMale() {
                            return this.SocialForestryBeneficiary.filter(x => x.Gender == @((int)GenderMf.Male)).length;
                        },
                        get TotalFemale() {
                            return this.SocialForestryBeneficiary.filter(x => x.Gender == @((int)GenderMf.Female)).length;
                        },
                        get TotalMalePercentage() {
                            return Math.round((getNumber(this.TotalMale) / this.TotalBeneficiary) * 100, 2);
                        },
                        get TotalFemalePercentage() {
                            return Math.round((getNumber(this.TotalFemale) / this.TotalBeneficiary) * 100, 2);
                        },
                    };
                }
            },
            AddPlantationSocialForestryBeneficiaryMaps() {
                const newPBSAGroup = this.GeneratePlantationSocialForestryBeneficiaryMaps(null, this.getRandomString());
                newPBSAGroup.SocialForestryBeneficiary = [];
                this.PlantationSocialForestryBeneficiaryMaps.push(newPBSAGroup);
            },
            AddPlantationSocialForestryBeneficiary() {
                let hasError = 0;

                for (const key of Object.keys(BeneficiaryFormValidation)) {
                    const inputElement = $(`#Form input[name=${key}], #Form select[name=${key}]`);

                    if (!inputElement) ++hasError;
                    if (!inputElement.valid()) ++hasError;
                }

                if (hasError > 0) return;

                this.PlantationSocialForestryBeneficiaryMaps
                    .find(x => x.PBSAGroupId == this.currentPBSAId)
                    .SocialForestryBeneficiary
                    .push(this.NewSocialForestryBeneficiary);

                this.InitializeSocialForestryBeneficiary();
            },
            EditPlantationSocialForestryBeneficiary(pbsaId, beneficiaryIdnex) {
                this.PlantationSocialForestryBeneficiaryMaps
                    .find(x => x.PBSAGroupId == pbsaId)
                    .SocialForestryBeneficiary[beneficiaryIdnex];

                this.InitializeSocialForestryBeneficiary();
            },


            // Damage Information
            PlantationDamageInformation: [],
            InitPlantationDamageInformation: {
                Id: 0,
                IsUpdating: false,
                UpdateIndex: null,
                Index: null,

                DateOfOccurrence: "",
                PlantationCauseOfDamageId: "",
                DamageDescription: "",
                InspectedByAuthority: false,
                DamageUrl: "",
                InspectionReportUrl: "",
                ActionTaken: "",

                // Display
                CauseOfDamageDisplay: "",
                DamageDisplay: "",
                InspectionReportDisplay: "",
            },
            NewPlantationDamageInformation: {},
            InitializePlantationDamageInformation(data = null) {
                if (data) {
                    this.NewPlantationDamageInformation = {
                        ...data,
                    };
                }
                else {
                    this.NewPlantationDamageInformation = {
                        ...this.InitPlantationDamageInformation,
                    };
                }
            },
            SetPlantationDamageInformationDamageFileName(event) {
                const name = getFileName(event.target);
                this.NewLaborInformation.DamageDisplay = name;
            },
            SetPlantationDamageInformationInspectionReportFileName(event) {
                const name = getFileName(event.target);
                this.NewLaborInformation.InspectionReportDisplay = name;
            },
            PlantationDamageInformationDropdowns: {
                CauseOfDamage: [],
            },
            SetPlantationDamageCauseOfDamageDisplay() {
                const data = this.PlantationDamageInformationDropdowns.CauseOfDamage.find(x => x.Id == this.NewPlantationDamageInformation.PlantationCauseOfDamageId);
                const display = data?.Name ?? "";

                this.NewPlantationDamageInformation.CauseOfDamageDisplay = display;
            },
            AddPlantationDamage() {
                let hasError = 0;

                for (const key of Object.keys(DamageInformationFormValidation)) {
                    const inputElement = $(`#Form input[name=${key}], #Form select[name=${key}]`);

                    if (!inputElement) ++hasError;
                    if (!inputElement.valid()) ++hasError;
                }

                if (hasError > 0) return;

                this.SetPlantationDamageCauseOfDamageDisplay();

                const index = this.PlantationDamageInformation.length;

                // File Handle
                const DamageFormFile = document.getElementById("damage_image").files[0];
                const inspection_report_file = document.getElementById("inspection_report_file").files[0];

                if (this.NewPlantationDamageInformation.IsUpdating) {
                    this.PlantationDamageInformation[this.NewPlantationDamageInformation.UpdateIndex] = { ...this.NewPlantationDamageInformation, Index: this.NewPlantationDamageInformation.UpdateIndex };
                    this.NewPlantationDamageInformation.IsUpdating = false;

                    if (DamageFormFile) {
                        this.tempFormData.set(`PlantationDamageInformation[${this.NewPlantationDamageInformation.UpdateIndex}][DamageFormFile]`, DamageFormFile);
                    }
                    if (inspection_report_file) {
                        this.tempFormData.set(`PlantationDamageInformation[${this.NewPlantationDamageInformation.UpdateIndex}][InspectionFormFile]`, inspection_report_file);
                    }
                } else {
                    if (DamageFormFile) {
                        this.tempFormData.append(`PlantationDamageInformation[${index}][DamageFormFile]`, DamageFormFile);
                    }
                    if (inspection_report_file) {
                        this.tempFormData.append(`PlantationDamageInformation[${index}][InspectionFormFile]`, inspection_report_file);
                    }

                    this.PlantationDamageInformation.Index = index;
                    this.PlantationDamageInformation.push(this.NewPlantationDamageInformation);
                }

                this.InitializePlantationDamageInformation();

                clearFileInput("damage_image");
                clearFileInput("inspection_report_file");
            },
            RemovePlantationDamage(data) {
                const index = this.PlantationDamageInformation.indexOf(data);

                this.PlantationDamageInformation.splice(index, 1);

                this.tempFormData.delete(`PlantationDamageInformation[${index}][DamageFormFile]`);
                this.tempFormData.delete(`PlantationDamageInformation[${index}][InspectionFormFile]`);
            },
            EditPlantationDamage(data, index) {
                let editData = { ...data, IsUpdating: true, UpdateIndex: index };
                this.InitializePlantationDamageInformation(editData);
            },

            // Others
            SocialForestryManagementCommitteeFormed: false,
            SocialForestryManagementCommitteeFormedFile: "",

            FundManagementSubCommitteeFormed: false,
            FundManagementSubCommitteeFormedFile: "",

            AdvisoryCommitteeFormed: false,
            AdvisoryCommitteeFormedFile: "",

            PlantationJournalUploadUrl: "",
            MonitoringReportUrl: "",
            Remarks: "",

            // Modal
            isSocialForestryModalOpen: false,
            openModal() {
                this.isSocialForestryModalOpen = true;
            },
            closeSocialForestryModal() {
                this.isSocialForestryModalOpen = false;
                this.InitializeSocialForestryBeneficiary();
            },
            socialForestryTabCurrentTab: 0,
            setSocialForestryTabCurrentTab(index) {
                this.socialForestryTabCurrentTab = index;
            },

            currentPBSAId: null,
            openModalForPBSA(pbsaId) {
                this.currentPBSAId = pbsaId;
                this.openModal();
            },

            ExistingBeneficiaries: [],
            async LoadExistingBeneficiary(socialForestryTabCurrentTabIndex) {
                this.setSocialForestryTabCurrentTab(socialForestryTabCurrentTabIndex);

                const data = await fetch(`/SocialForestryBeneficiary/GetBeneficiariesByNewRaisedId/0`)
                    .then(response => response.json());

                this.ExistingBeneficiaries = data.Data ?? [];
            },
            AddExistingBeneficiaryToAddedBeneficiary(beneficiary) {
                const newSocialForestryBeneficiary = this.PlantationSocialForestryBeneficiaryMaps.find(x => x.PBSAGroupId == this.currentPBSAId);
                if (!newSocialForestryBeneficiary) return;

                const foundIndex = newSocialForestryBeneficiary.SocialForestryBeneficiary.findIndex(x => x.Id == beneficiary.Id);
                if (foundIndex < 0) {
                    newSocialForestryBeneficiary.SocialForestryBeneficiary.push(beneficiary);
                }
            },
            IsBeneficiaryIdExistsInBeneficiaryMaps(beneficiarId) {
                const newSocialForestryBeneficiary = this.PlantationSocialForestryBeneficiaryMaps.find(x => x.PBSAGroupId == this.currentPBSAId);
                if (!newSocialForestryBeneficiary) return;

                const foundIndex = newSocialForestryBeneficiary.SocialForestryBeneficiary.findIndex(x => x.Id == beneficiarId);
                return (foundIndex > -1);
            },
            RemoveExistingBeneficiaryFromAddedBeneficiary(beneficiary, pbsa = null) {
                pbsa = (pbsa ?? this.currentPBSAId);

                const newSocialForestryBeneficiary = this.PlantationSocialForestryBeneficiaryMaps.find(x => x.PBSAGroupId == pbsa);
                if (!newSocialForestryBeneficiary) return;

                const foundIndex = newSocialForestryBeneficiary.SocialForestryBeneficiary.indexOf(beneficiary);
                newSocialForestryBeneficiary.SocialForestryBeneficiary.splice(foundIndex, 1);
            },
            EditSocialForestryBeneficiaryData(beneficiary, pbsa = null) {
                pbsa = (pbsa ?? this.currentPBSAId);

                const newSocialForestryBeneficiary = this.PlantationSocialForestryBeneficiaryMaps.find(x => x.PBSAGroupId == pbsa);
                if (!newSocialForestryBeneficiary) return;

                const foundIndex = newSocialForestryBeneficiary.SocialForestryBeneficiary.indexOf(beneficiary);
                if (foundIndex < 0) return;

                this.socialForestryTabCurrentTab = 0;

                beneficiary.IsUpdating = true;
                this.NewSocialForestryBeneficiary = beneficiary;

                this.openModalForPBSA(pbsa);
            },

            // Submit form
            SubmitForm() {
                function convertToNewRaisedBeneficiaryVM(ui, vm) {
                    ui.forEach(item => {
                        item.SocialForestryBeneficiary.forEach(beneficiary => {
                            vm.push({
                                Id: item.Id,
                                SocialForestryBeneficiary: beneficiary,
                                PBSAGroupId: item.PBSAGroupId,
                                CheckIfPBSAIsSigned: item.CheckIfPBSAIsSigned,
                                AgreementUploadFileUrl: item.CheckIfPBSAIsSigned,
                            });
                        });
                    });

                    return vm;
                }

                let hasError = 0;

                for (const key of Object.keys(NewRaisedPlantationFormValidation)) {
                    const inputElement = $(`#Form input[name=${key}], #Form select[name=${key}]`);

                    if (!inputElement) ++hasError;
                    if (!inputElement.valid()) ++hasError;
                }

                if (hasError > 0) return;

                const searchParams = new URLSearchParams(window.location.search);

                const obj = {
                    Id: searchParams.get("id"),
                    ForestCircleId: $("#ForestCircleId").val(),
                    ForestDivisionId: $("#ForestDivisionId").val(),
                    ForestRangeId: $("#ForestRangeId").val(),
                    ForestBeatId: $("#ForestBeatId").val(),
                    ZoneOrAreaId: $("#ZoneOrAreaId").val(),
                    DivisionId: $("#DivisionId").val(),
                    DistrictId: $("#DistrictId").val(),
                    UpazillaId: $("#UpazillaId").val(),
                    UnionId: $("#UnionId").val(),

                    LandOwningAgencyId: this.LandOwningAgencyId,
                    SocialForestryNgoId: this.SocialForestryNgoId,

                    PlantationTypeId: this.PlantationTypeId,
                    CurrentRotationNo: this.RotationNo,
                    RotationNo: this.RotationNo,
                    PlantationId: this.PlantationId,
                    PlantationArea: this.PlantationArea,
                    PlantationUnitId: this.PlantationUnitId,
                    LocationWithCoordinate: this.LocationWithCoordinate,
                    MoujaAndJLNumber: this.MoujaAndJLNumber,
                    SheetNo: this.SheetNo,
                    PlotNo: this.PlotNo,
                    ProjectTypeId: this.ProjectTypeId,
                    PlantedFinancialYearId: this.PlantedFinancialYearId,
                    RotationInYear: this.RotationInYear,
                    ExpectedCuttingYear: this.ExpectedCuttingYear,
                    SanctionNo: this.SanctionNo,
                    SoilType: this.SoilType,
                    NaturalTreeSpecies: this.NaturalTreeSpecies,
                    PlantationTopographyId: this.PlantationTopographyId,
                    ClimateOfPlantationSite: this.ClimateOfPlantationSite,

                    ConcernedOfficialMap: this.ConcernedOfficialMap,
                    InspectionDetailsMap: this.InspectionDetailsMap,
                    CostInformation: this.CostInformation,
                    LaborInformation: this.LaborInformation,
                    PlantationDamageInformation: this.PlantationDamageInformation,
                    PlantationPlants: this.PlantationPlants,
                    PlantationSocialForestryBeneficiaryMaps: convertToNewRaisedBeneficiaryVM(this.PlantationSocialForestryBeneficiaryMaps, []),


                    SocialForestryManagementCommitteeFormed: this.SocialForestryManagementCommitteeFormed,
                    SocialForestryManagementCommitteeFormedFile: this.SocialForestryManagementCommitteeFormedFile,
                    FundManagementSubCommitteeFormed: this.FundManagementSubCommitteeFormed,
                    FundManagementSubCommitteeFormedFile: this.FundManagementSubCommitteeFormedFile,
                    AdvisoryCommitteeFormed: this.AdvisoryCommitteeFormed,
                    AdvisoryCommitteeFormedFile: this.AdvisoryCommitteeFormedFile,
                    PlantationJournalUploadUrl: this.AdvisoryCommitteeFormedFile,
                    MonitoringReportUrl: this.MonitoringReportUrl,
                    Remarks: this.Remarks,
                };

                const formData = new FormData();
                objectToFormData(obj, formData);

                for (const pair of this.tempFormData.entries()) {
                    formData.append(pair[0], pair[1]);
                }

                document.querySelectorAll(".PlantationImageOrDocument").forEach(x => {
                    const file = x.files[0];
                    if (file) {
                        formData.append('PlantationImageOrDocument', file);
                    }
                });

                const nurseryImage = document.getElementById("NurseryImage").files[0];
                if (nurseryImage) {
                    formData.append('NurseryImage', nurseryImage);
                }
                const plantationImage = document.getElementById("PlantationImage").files[0];
                if (plantationImage) {
                    formData.append('PlantationImage', plantationImage);
                }

                // PBSA Other Files
                const socialForestryManagementCommitteeFormedFile = document.getElementById("SocialForestryManagementCommitteeFormedFile").files[0];
                const fundManagementSubCommitteeFormedFile = document.getElementById("FundManagementSubCommitteeFormedFile").files[0];
                const advisoryCommitteeFormedFile = document.getElementById("AdvisoryCommitteeFormedFile").files[0];
                const plantationJournalUploadUrlFile = document.getElementById("PlantationJournalUploadUrlFile").files[0];
                const monitoringReportUrlFile = document.getElementById("MonitoringReportUrlFile").files[0];

                if (socialForestryManagementCommitteeFormedFile) formData.append("SocialForestryManagementCommitteeFormedFile", socialForestryManagementCommitteeFormedFile);
                if (fundManagementSubCommitteeFormedFile) formData.append("FundManagementSubCommitteeFormedFile", fundManagementSubCommitteeFormedFile);
                if (advisoryCommitteeFormedFile) formData.append("AdvisoryCommitteeFormedFile", advisoryCommitteeFormedFile);
                if (plantationJournalUploadUrlFile) formData.append("PlantationJournalUploadUrlFile", plantationJournalUploadUrlFile);
                if (monitoringReportUrlFile) formData.append("MonitoringReportUrlFile", monitoringReportUrlFile);
                // PBSA Other Files

                $.ajax({
                    type: "POST",
                    url: "/NewRaisedPlantation/Create",
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    success: function (data) {
                        $(".loader").fadeOut("fast");

                        if (data.RedirectUrl) {
                            window.location.href = data.RedirectUrl;
                            return;
                        }

                        if (data.Success) {
                            swal(
                                'Success',
                                data.Message,
                                'success'
                            );
                        } else {
                            swal(
                                'Failed',
                                data.Message,
                                'error'
                            );
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        $(".loader").fadeOut("fast");

                        swal(
                            'Failed',
                            'Unexpected Error Occured',
                            'error'
                        );
                    }
                });
            }
        }));
    });
</script>

<script>
    /* Helpers */
    function getNumber(value) {
        value = parseFloat(value);
        value = isNaN(value) ? 0 : value;

        return value;
    }

    function getFileUrl(imageFileElement) {
        const [file] = imageFileElement?.files ?? [];
        if (file) {
            return URL.createObjectURL(file);
        }

        return null;
    }

    function getFileName(imageFileElement) {
        const [file] = imageFileElement?.files ?? [];
        if (file) {
            return file.name;
        }

        return null;
    }

    function clearFileInput(inputId) {
        const inputElement = document.getElementById(inputId);

        if (inputElement) {
            const newInput = document.createElement(inputElement.tagName);
            newInput.id = inputId;

            for (let i = 0; i < inputElement.attributes.length; i++) {
                const attr = inputElement.attributes[i];
                newInput.setAttribute(attr.name, attr.value);
            }

            inputElement.parentNode.replaceChild(newInput, inputElement);
        }
    }

    function objectToFormData(dataObject, formData, parentKey) {
        for (var key in dataObject) {
            if (dataObject.hasOwnProperty(key)) {
                var propName = parentKey ? `${parentKey}[${key}]` : key;

                if (typeof dataObject[key] === 'object' && !Array.isArray(dataObject[key])) {
                    // Nested object, recursively convert it
                    objectToFormData(dataObject[key], formData, propName);
                } else if (Array.isArray(dataObject[key])) {
                    // Array of objects, loop through and convert each item
                    dataObject[key].forEach(function (item, index) {
                        var arrayKey = `${propName}[${index}]`;
                        objectToFormData(item, formData, arrayKey);
                    });
                } else {
                    // Regular key-value pair
                    formData.append(propName, dataObject[key]);
                }
            }
        }
    }
</script>

<script>
    $(document).ready(() => {
        addRequiredFieldInPage();
    });

    function convertToDate(fullDateTime) {
        if (fullDateTime) {
            const index = fullDateTime.indexOf('T');
            if (index >= 0) {
                return fullDateTime.split("T")[0];
            }
        }
        return "";
    }

    $(".submit-btn").on("click", function () {
        if ($("#Form").valid()) {
            $(".loader").fadeIn("slow");
        }
    });


    const dateMustBeGreaterThanStartDateFuncxx = date => {
        var available = getNumber($("#Form input[name=Nursery_AvailableSeedling]").val());
        var planted = getNumber($("#Form input[name=Nursery_SeedlingPlanted]").val());

        return available >= planted;
    }

    $.validator.addMethod(
        'mustBeGreaterThanAvailablexx',
        function (value, element, requiredValue) {
            return dateMustBeGreaterThanStartDateFuncxx(value);
        },
        'Raised must be greater than available.'
    );


    const NurseryFormValidation = {
        ReplantationNurseryInfos_NurseryInformationId: {
            required: true
        },
        ReplantationNurseryInfos_NurseryRaisedSeedlingInformationId: {
            required: true
        },
        ReplantationNurseryInfos_NumberOfSeedlingPlanted: {
            required: true,
        },
    };

    const ConcernedOfficialFormValidation = {
        Concerned_OfficialName: {
            required: true
        },
        Concerned_Designation: {
            required: true
        },
        Concerned_MobileNumber: {
            required: true
        },
        /*
        Concerned_Email: {
            required: true
        },
        */
    };

    const InspectionDetailsMapFormValidation = {
        Inspection_OfficialName: {
            required: true
        },
        Inspection_Designation: {
            required: true
        },
    };

    const CostInformationFormValidation = {
        Cost_CostType: {
            required: true
        },
        Cost_DateOfCost: {
            required: true
        },
        Cost_Amount: {
            required: true,
            min: 1,
        },
    };

    const BeneficiaryFormValidation = {
        Beneficiary_Name: {
            required: true
        },
        Beneficiary_Gender: {
            required: true
        },
        Beneficiary_NID: {
            required: true,
        },
        Beneficiary_MobileNumber: {
            required: true,
        },
        /*
        Beneficiary_Ethnicity: {
            required: true,
        },
        Beneficiary_Address: {
            required: true,
        },
        */
    };

    const LaborInformationFormValidation = {
        Labor_CostType: {
            required: true
        },
        Labor_CostDate: {
            required: true
        },
        Labor_MaleNo: {
            required: true,
            min: 0,
        },
        Labor_FemaleNo: {
            required: true,
            min: 0,
        },
    };

    const DamageInformationFormValidation = {
        Damage_DateOfOccurrence: {
            required: true
        },
        Damage_Description: {
            required: true
        },
        Damage_CauseOfDamage: {
            required: true,
        },
    };

    const NewRaisedPlantationFormValidation = {
        ForestCircleId: {
            required: true
        },
        ForestDivisionId: {
            required: true
        },
        ForestRangeId: {
            required: true
        },
        ForestBeatId: {
            required: true
        },
        DistrictId: {
            required: true
        },
        DivisionId: {
            required: true
        },
        UpazillaId: {
            required: true
        },
        UnionId: {
            required: true
        },
        RotationNo: {
            required: true
        },
        PlantationId: {
            required: true
        },
        PlantationArea: {
            required: true
        },
        LocationWithCoordinate: {
            required: true
        },
        RotationInYear: {
            required: true
        },
        SanctionNo: {
            required: true
        },
        PlantationTypeId: {
            required: true
        },
        PlantationUnitId: {
            required: true
        },
        ProjectTypeId: {
            required: true
        },
        CreatedFinancialYearId: {
            required: true
        },
        LandOwningAgencyId: {
            required: true
        },
    };

    $("#Form").validate({
        rules: {
            ...NewRaisedPlantationFormValidation,
            ...ConcernedOfficialFormValidation,
            ...InspectionDetailsMapFormValidation,
            ...CostInformationFormValidation,
            ...BeneficiaryFormValidation,
            ...LaborInformationFormValidation,
            ...DamageInformationFormValidation
        },
    });
</script>
