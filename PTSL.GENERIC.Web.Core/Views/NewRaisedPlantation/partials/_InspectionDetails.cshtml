<fieldset class="p-2 col-12">
    <legend class="float-none w-auto">Inspection Details</legend>

    <div>
        <div class="row">
            <div class="col-md-3 pr-1">
                <label>
                    Name of the official
                    <span style="color:red;">*</span>
                </label>
                <input x-model="NewInspectionDetailsMap.InspectionDetails.OfficialName"
                       placeholder="Enter name of the official"
                       name="Inspection_OfficialName"
                       required />
            </div>
            <div class="col-md-3 px-1">
                <label>
                    Inspection Date
                    <span style="color:red;">*</span>
                </label>
                <input x-model="NewInspectionDetailsMap.InspectionDetails.InspectionDate"
                       placeholder="Enter inspection date"
                       type="date"
                       name="Inspection_InspectionDate"
                       required />
            </div>
            <div class="col-md-3 px-1">
                <label>
                    Designation
                    <span style="color:red;">*</span>
                </label>
                <select name="Inspection_Designation"
                        x-model="NewInspectionDetailsMap.InspectionDetails.SocialForestryDesignationId"
                        x-on:change="SetInspectionDetailsMapDesignation"
                        required>
                    <!option value="">Select Designation</!option>
                    <template x-for="data in InspectionDetailsMapDropdowns.designation">
                        <!option :selected="data.Id == NewInspectionDetailsMap.InspectionDetails.SocialForestryDesignationId" :value="data.Id" x-text="data.Name"></!option>
                    </template>
                </select>
            </div>
            <div class="col-md-3 pl-1">
                <label>
                    Comments
                </label>
                <input x-model="NewInspectionDetailsMap.InspectionDetails.Comments"
                       placeholder="Enter comments"
                       name="Inspection_Comments"
                       required />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-3 pr-1">
                <label>
                    Unload inspection file
                </label>
                <input x-on:change="SetInspectionDetailsMapFileName"
                       id="new_inspection_file_id"
                       name="Inspection_Attachment"
                       type="file"
                       required />
            </div>
        </div>
        <div class="mt-2 text-right">
            <button x-on:click="add_inspection_details_information" x-text="NewInspectionDetailsMap.InspectionDetails.IsUpdating ? 'Update' : 'Add Information'" type="button" class="btn btn-sm"></button>
        </div>
    </div>

    <p class="mt-3 border-btm">Inspection details</p>
    <p x-show="InspectionDetailsMap.filter(x => x.IsDeleted != true).length == 0">No details added yet</p>
    <table class="table table-sm" x-show="InspectionDetailsMap.filter(x => x.IsDeleted != true).length > 0">
        <tr>
            <th>SL</th>
            <th>Name</th>
            <th>Designation</th>
            <th>Date</th>
            <th>Inspection File</th>
            <th>Comments</th>
            <th>Action</th>
        </tr>
        <tbody>
            <template x-for="(data, index) in InspectionDetailsMap.filter(x => x.IsDeleted != true)" :key="index">
                <tr class="">
                    <td x-text="++index"></td>
                    <td x-text="data.InspectionDetails.OfficialName"></td>
                    <td x-text="data.InspectionDetails.DesignationDisplay || data.InspectionDetails.SocialForestryDesignation.Name || 'None'"></td>
                    <td x-text="data.InspectionDate"></td>
                    <td>
                        <template x-if="data.InspectionDetails.InspectionFile">
                            <a class="btn btn-sm btn-primary" :href="data.InspectionDetails.InspectionFile" download="">Download</a>
                        </template>
                        <template x-if="!data.InspectionDetails.InspectionFile">
                            <span x-text="data.InspectionDetails.InspectionFileDisplay"></span>
                        </template>
                    </td>
                    <td x-text="data.InspectionDetails.Comments"></td>
                    <td>
                        <button @@click="remove_inspection_details_information(data)" type="button" class="btn btn-sm btn-remove">Remove</button>
                        <button @@click="edit_inspection_details_information(data)" type="button" class="btn btn-sm btn-primary">Edit</button>
                    </td>
                </tr>
            </template>
        </tbody>
    </table>
</fieldset>


<script>
    function addInspectionDetailsMap() {
        return {
            // Inspection details
            InspectionDetailsMap: [],
            InitialInspectionDetailsMap: {
                IsDeleted: false,
                InspectionDetails: {},
            },
            InitialInspectionDetails: {
                Id: 0,
                IsUpdating: false,
                UpdateIndex: null,
                Index: null,

                OfficialName: "",
                InspectionDate: null,
                SocialForestryDesignationId: "",
                Comments: "",
                InspectionFile: "",

                // Display
                InspectionFileDisplay: "",
                DesignationDisplay: "",
            },
            NewInspectionDetailsMap: {},
            InitializeInspectionDetails() {
                this.NewInspectionDetailsMap = {
                    ...this.InitialInspectionDetailsMap, InspectionDetails: { ...this.InitialInspectionDetails }
                };
            },
            SetInspectionDetailsMapFileName(event) {
                const name = getFileName(event.target);
                this.NewInspectionDetailsMap.InspectionDetails.InspectionFileDisplay = name;
            },
            SetInspectionDetailsMapDesignation() {
                const data = this.InspectionDetailsMapDropdowns.designation.find(x => x.Id == this.NewInspectionDetailsMap.InspectionDetails.SocialForestryDesignationId);
                const display = data?.Name ?? "";

                this.NewInspectionDetailsMap.InspectionDetails.DesignationDisplay = display;
            },
            InspectionDetailsMapDropdowns: {
                designation: [],
            },

            add_inspection_details_information() {
                let hasError = 0;

                for (const key of Object.keys(InspectionDetailsMapFormValidation)) {
                    const inputElement = $(`#Form input[name=${key}], #Form select[name=${key}]`);

                    if (!inputElement) ++hasError;
                    if (!inputElement.valid()) ++hasError;
                }

                if (hasError > 0) return;

                const index = this.InspectionDetailsMap.length;
                const file = document.getElementById("new_inspection_file_id").files[0];

                if (this.NewInspectionDetailsMap.InspectionDetails.IsUpdating) {
                    this.NewInspectionDetailsMap.InspectionDetails.Index = this.NewInspectionDetailsMap.InspectionDetails.UpdateIndex;
                    this.InspectionDetailsMap[this.NewInspectionDetailsMap.InspectionDetails.UpdateIndex] = { ...this.NewInspectionDetailsMap };
                    this.NewInspectionDetailsMap.InspectionDetails.IsUpdating = false;

                    if (file) {
                        this.tempFormData.set(`InspectionDetailsMap[${this.NewInspectionDetailsMap.InspectionDetails.UpdateIndex}][InspectionDetails][InspectionFormFile]`, file);
                    }
                } else {
                    if (file) {
                        this.tempFormData.append(`InspectionDetailsMap[${index}][InspectionDetails][InspectionFormFile]`, file);
                    }

                    this.NewInspectionDetailsMap.InspectionDetails.Index = index;
                    this.InspectionDetailsMap.push(this.NewInspectionDetailsMap);
                }

                this.InitializeInspectionDetails();

                clearFileInput("new_inspection_file_id");
            },
            remove_inspection_details_information(data) {
                const index = this.InspectionDetailsMap.indexOf(data);

                this.InspectionDetailsMap[index].IsDeleted = true;

                this.tempFormData.delete(`InspectionDetailsMap[${index}][InspectionDetails][InspectionFormFile]`);
            },
            edit_inspection_details_information(data) {
                const index = this.InspectionDetailsMap.indexOf(data);

                this.NewInspectionDetailsMap = data;
                this.NewInspectionDetailsMap.InspectionDetails.IsUpdating = true;
                this.NewInspectionDetailsMap.InspectionDetails.UpdateIndex = index;
            },
        }
    }
</script>
