@using PTSL.GENERIC.Web.Core.Helper.Enum;
@using PTSL.GENERIC.Web.Core.Helper.Enum.SocialForestry
@model PTSL.GENERIC.Web.Core.Model.EntityViewModels.SocialForestry.Cutting.CuttingPlantationVM
@inject IHttpContextAccessor Accessor
@{
    ViewBag.Title = "Edit Cutting Plantation Information";

    var cuttingIdString = Accessor.HttpContext?.Request.Query["id"][0];
    long.TryParse(cuttingIdString, out var cuttingId);

    var newRaisedIdString = Accessor.HttpContext?.Request.Query["newRaisedId"][0];
    long.TryParse(newRaisedIdString, out var newRaisedId);
}

<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<style>
    .plantation_images_container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        column-gap: 10px;
        row-gap: 5px;
    }

    .plantation_image_item {
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .btn-remove {
        background-color: #fc544b !important;
        border-color: #fc544b !important;
        color: white;
    }

        .btn-remove:hover {
            color: white;
        }

    .border-btm {
        margin-bottom: 0 !important;
        border-bottom: 1px solid #646967;
    }
</style>

<div class="card">
    <div class="card-header">
        <h4>
            <a href="/CuttingPlantation/Index" class="mr-1 back">
                <svg width="20" height="20" viewBox="0 0 32 32">
                    <path fill="currentColor" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z" />
                </svg>
            </a>
            Edit Cutting Plantation Information
        </h4>
        <button class="ml-auto reset btn btn-sm" onclick="resetFromData('#Form')">
            <svg class="rotate180z" width="16" height="16" viewBox="0 0 32 32">
                <path d="M25.95 7.65l.005-.004c-.092-.11-.197-.206-.293-.312c-.184-.205-.367-.41-.563-.603c-.139-.136-.286-.262-.43-.391c-.183-.165-.366-.329-.558-.482c-.16-.128-.325-.247-.49-.367c-.192-.14-.385-.277-.585-.406a13.513 13.513 0 0 0-.533-.324q-.308-.179-.625-.341c-.184-.094-.37-.185-.56-.27c-.222-.1-.449-.191-.678-.28c-.19-.072-.378-.145-.571-.208c-.246-.082-.498-.15-.75-.217c-.186-.049-.368-.102-.556-.143c-.29-.063-.587-.107-.883-.15c-.16-.023-.315-.056-.476-.073A12.933 12.933 0 0 0 6 7.703V4H4v8h8v-2H6.811A10.961 10.961 0 0 1 16 5a11.111 11.111 0 0 1 1.189.067c.136.015.268.042.403.061c.25.037.501.075.746.128c.16.035.315.08.472.121c.213.057.425.114.633.183c.164.054.325.116.486.178c.193.074.384.15.57.235c.162.072.32.15.477.23q.268.136.526.286c.153.09.305.18.453.276c.168.11.33.224.492.342c.14.102.282.203.417.312c.162.13.316.268.47.406c.123.11.248.217.365.332c.167.164.323.338.479.512A10.993 10.993 0 1 1 5 16H3a13 13 0 1 0 22.95-8.35z"
                      fill="currentColor" />
            </svg>
            Reset
        </button>
    </div>

    <!form @@submit.prevent x-cloak x-data="cutting_plantation" id="Form" class="card-body mt-2">
        <input type="hidden" id="@nameof(Model.NewRaisedPlantationId)" name="@nameof(Model.NewRaisedPlantationId)" />

        @await Html.PartialAsync("partials/_PlantationInformation.cshtml", ViewBag.NewRaisedDetails as
            PTSL.GENERIC.Web.Core.Model.EntityViewModels.SocialForestry.NewRaisedPlantationVM)

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            @await Html.PartialAsync("partials/_TreeMarking.cshtml", Model)
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            @await Html.PartialAsync("partials/_Felled.cshtml", Model)
        </div>

        <div class="p-2 custom green-card mt-2" style="border-radius: 5px;" id="">
            <partial name="partials/_LotWiserSelling.cshtml" />
        </div>

        <div class="d-flex justify-content-end py-2">
            <button x-on:click="SubmitForm" type="button" id="submit-btn" class="btn btn-sm btn-green save">
            Update
            </button>
        </div>
    </!form>
</div>

<script type="text/javascript">
    document.addEventListener('alpine:init', () => {
        Alpine.data('cutting_plantation', () => ({
            init() {
                this.LoadAllDropdowns();

                this.InitializeLotWiseSellingInformation();
            },

            async LoadAllDropdowns() {
                let [
                    plantationUnit,
                    cuttingInfo,
                ] = await Promise.all([
                    fetch("/PlantationUnit/List").then(response => response.json()),
                    fetch("/CuttingPlantation/GetById?id=@cuttingId").then(response => response.json()),
                ]);

                const plantationUnitData = plantationUnit.Data ?? [];
                const plantationUnitArea = plantationUnitData.filter(x => x.UnitType == @((int)UnitType.Area));
                const plantationUnitPiece = plantationUnitData.filter(x => x.UnitType == @((int)UnitType.Piece));

                if (plantationUnitPiece) {
                    this.LotWiseSellingInformationDropdowns.Units = plantationUnitPiece;
                }
                if (cuttingInfo) {
                    const data = cuttingInfo.Data;

                    this.Id = data.Id;
                    this.NewRaisedPlantationId = data.NewRaisedPlantationId;
                    this.TotalTreeMarked = data.TotalTreeMarked;
                    this.MarkingCost = data.MarkingCost;
                    this.MarkedTimber = data.MarkedTimber;
                    this.MarkedTimberUnitId = data.MarkedTimberUnitId;
                    this.MarkedPole = data.MarkedPole;
                    this.MarkedPoleUnitId = data.MarkedPoleUnitId;
                    this.MarkedFuelWood = data.MarkedFuelWood;
                    this.MarkedFuelWoodUnitId = data.MarkedFuelWoodUnitId;
                    this.FinancialYearId = data.FinancialYearId;
                    this.RotationNo = data.RotationNo;
                    this.TotalNumberOfLots = data.TotalNumberOfLots;
                    this.ProducedTimber = data.ProducedTimber;
                    this.ProducedTimberUnitId = data.ProducedTimberUnitId;
                    this.ProducedPole = data.ProducedPole;
                    this.ProducedPoleUnitId = data.ProducedPoleUnitId;
                    this.ProducedFuelWood = data.ProducedFuelWood;
                    this.ProducedFuelWoodUnitId = data.ProducedFuelWoodUnitId;

                    this.LotWiseSellingInformation = data.LotWiseSellingInformation;
                }
            },

            // Cutting Data
            Id: 0,
            NewRaisedPlantationId: @newRaisedId,
            TotalTreeMarked: "",
            MarkingCost: "",
            MarkedTimber: "",
            MarkedTimberUnitId: "",
            MarkedPole: "",
            MarkedPoleUnitId: "",
            MarkedFuelWood: "",
            MarkedFuelWoodUnitId: "",
            FinancialYearId: "",
            RotationNo: "",
            TotalNumberOfLots: "",
            ProducedTimber: "",
            ProducedTimberUnitId: "",
            ProducedPole: "",
            ProducedPoleUnitId: "",
            ProducedFuelWood: "",
            ProducedFuelWoodUnitId: "",

            // Labor Information
            LotWiseSellingInformation: [],
            InitLotWiseSellingInformation: {
                Id: 0,
                IsUpdating: false,
                UpdateIndex: null,

                CuttingPlantationId: "",
                LotNumber: "",
                CuttingOrderDate: "",
                TenderNotificationInformation: "",
                ContractorName: "",
                ContractorMobileNumber: "",
                ContractorNID: "",
                ContractorAddress: "",
                LotWiseTimber: "",
                LotWiseTimberUnitId: "",
                LotWisePole: "",
                LotWisePoleUnitId: "",
                LotWiseFuelWood: "",
                LotWiseFuelWoodUnitId: "",

                SaleValueOfLot: "",
                SaleValueOfVatPercentage: "",
                SaleValueOfTaxPercentage: "",

                // Display
            },
            NewLotWiseSellingInformation: {},
            InitializeLotWiseSellingInformation(data = null) {
                if (data) {
                    this.NewLotWiseSellingInformation = {
                        ...data,
                        get TotalSaleValue() {
                            const saleValueOfLot = getNumber(this.SaleValueOfLot);
                            const saleValueOfVatPercentage = getNumber(this.SaleValueOfVatPercentage);
                            const saleValueOfTaxPercentage = getNumber(this.SaleValueOfTaxPercentage);

                            return saleValueOfLot + (saleValueOfLot * (saleValueOfVatPercentage / 100)) + (saleValueOfLot * (saleValueOfTaxPercentage / 100));
                        },
                    };
                }
                else {
                    this.NewLotWiseSellingInformation = {
                        ...this.InitLaborInformation,
                        get TotalSaleValue() {
                            const saleValueOfLot = getNumber(this.SaleValueOfLot);
                            const saleValueOfVatPercentage = getNumber(this.SaleValueOfVatPercentage);
                            const saleValueOfTaxPercentage = getNumber(this.SaleValueOfTaxPercentage);

                            return saleValueOfLot + (saleValueOfLot * (saleValueOfVatPercentage / 100)) + (saleValueOfLot * (saleValueOfTaxPercentage / 100));
                        },
                    };
                }
            },
            LotWiseSellingInformationDropdowns: {
                Units: [],
            },
            AddLotWiseSellingInformation() {
                let hasError = 0;

                for (const key of Object.keys(LotWiseSellingInformationFormValidation)) {
                    const inputElement = $(`#Form input[name=${key}], #Form select[name=${key}]`);

                    if (!inputElement) ++hasError;
                    if (!inputElement.valid()) ++hasError;
                }

                if (hasError > 0) return;

                if (this.NewLotWiseSellingInformation.IsUpdating) {
                    this.LotWiseSellingInformation[this.NewLotWiseSellingInformation.UpdateIndex] = { ...this.NewLotWiseSellingInformation, IsUpdating: false };
                } else {
                    this.LotWiseSellingInformation.push(this.NewLotWiseSellingInformation);
                }

                this.InitializeLotWiseSellingInformation();
            },
            RemoveLotWiseSellingInformation(data) {
                this.LotWiseSellingInformation.splice(this.LotWiseSellingInformation.indexOf(data), 1);
            },
            EditLotWiseSellingInformation(data, index) {
                console.log(data.CuttingOrderDate, convertToDate(data.CuttingOrderDate));

                let editData = { ...data, CuttingOrderDate: convertToDate(data.CuttingOrderDate), IsUpdating: true, UpdateIndex: index };
                this.InitializeLotWiseSellingInformation(editData);
            },


            // Submit form
            SubmitForm() {
                const obj = {
                    NewRaisedPlantationId: this.NewRaisedPlantationId,
                    TotalTreeMarked: $("#TotalTreeMarked").val(),
                    MarkingCost: $("#MarkingCost").val(),
                    MarkedTimber: $("#MarkedTimber").val(),
                    MarkedTimberUnitId: $("#MarkedTimberUnitId").val(),
                    MarkedPole: $("#MarkedPole").val(),
                    MarkedPoleUnitId: $("#MarkedPoleUnitId").val(),
                    MarkedFuelWood: $("#MarkedFuelWood").val(),
                    MarkedFuelWoodUnitId: $("#MarkedFuelWoodUnitId").val(),

                    FinancialYearId: $("#FinancialYearId").val(),
                    RotationNo: $("#RotationNo").val(),
                    TotalNumberOfLots: $("#TotalNumberOfLots").val(),
                    ProducedTimber: $("#ProducedTimber").val(),
                    ProducedTimberUnitId: $("#ProducedTimberUnitId").val(),
                    ProducedPole: $("#ProducedPole").val(),
                    ProducedPoleUnitId: $("#ProducedPoleUnitId").val(),
                    ProducedFuelWood: $("#ProducedFuelWood").val(),
                    ProducedFuelWoodUnitId: $("#ProducedFuelWoodUnitId").val(),
                    Id: this.Id,
                };
                obj.LotWiseSellingInformation = this.LotWiseSellingInformation;

                const formData = new FormData();

                objectToFormData(obj, formData);

                $.ajax({
                    type: "POST",
                    url: "/CuttingPlantation/Edit",
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    success: function (data) {
                        $(".loader").fadeOut("fast");

                        if (data.RedirectUrl) {
                            window.location.href = data.RedirectUrl;
                            return;
                        }

                        if (data.Success) {
                            swal(
                                'Success',
                                data.Message,
                                'success'
                            );
                        } else {
                            swal(
                                'Failed',
                                data.Message,
                                'error'
                            );
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        $(".loader").fadeOut("fast");

                        swal(
                            'Failed',
                            'Unexpected Error Occured',
                            'error'
                        );
                    }
                });
            }
        }));
    });
</script>

<script>
    /* Helpers */
    function convertToDate(fullDateTime) {
        return fullDateTime.split("T")[0];
    }

    function getNumber(value) {
        value = parseFloat(value);
        value = isNaN(value) ? 0 : value;

        return value;
    }

    function getFileUrl(imageFileElement) {
        const [file] = imageFileElement?.files ?? [];
        if (file) {
            return URL.createObjectURL(file);
        }

        return null;
    }

    function getFileName(imageFileElement) {
        const [file] = imageFileElement?.files ?? [];
        if (file) {
            return file.name;
        }

        return null;
    }

    function clearFileInput(inputId) {
        const inputElement = document.getElementById(inputId);

        if (inputElement) {
            const newInput = document.createElement(inputElement.tagName);
            newInput.id = inputId;

            for (let i = 0; i < inputElement.attributes.length; i++) {
                const attr = inputElement.attributes[i];
                newInput.setAttribute(attr.name, attr.value);
            }

            inputElement.parentNode.replaceChild(newInput, inputElement);
        }
    }

    function objectToFormData(dataObject, formData, parentKey) {
        for (var key in dataObject) {
            if (dataObject.hasOwnProperty(key)) {
                var propName = parentKey ? `${parentKey}[${key}]` : key;

                if (typeof dataObject[key] === 'object' && !Array.isArray(dataObject[key])) {
                    // Nested object, recursively convert it
                    objectToFormData(dataObject[key], formData, propName);
                } else if (Array.isArray(dataObject[key])) {
                    // Array of objects, loop through and convert each item
                    dataObject[key].forEach(function (item, index) {
                        var arrayKey = `${propName}[${index}]`;
                        objectToFormData(item, formData, arrayKey);
                    });
                } else {
                    // Regular key-value pair
                    formData.append(propName, dataObject[key]);
                }
            }
        }
    }
</script>

<script>
    $(document).ready();

    $(".submit-btn").on("click", function () {
        if ($("#Form").valid()) {
            $(".loader").fadeIn("slow");
        }
    });

    const LotWiseSellingInformationFormValidation = {
        LotNumber: {
            required: true
        },
        CuttingOrderDate: {
            required: true
        },
        ContractorName: {
            required: true,
        },
        ContractorMobileNumber: {
            required: true,
        },
        ContractorNID: {
            required: true,
        },
        SaleValueOfLot: {
            required: true,
        },
        SaleValueOfVatPercentage: {
            required: true,
        },
        SaleValueOfTaxPercentage: {
            required: true,
        },
    };

    $("#Form").validate({
        rules: {
            ...LotWiseSellingInformationFormValidation,
        },
    });
</script>
