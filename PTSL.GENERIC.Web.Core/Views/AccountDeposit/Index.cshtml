@using PTSL.GENERIC.Web.Core.Controllers.AIG;
@using PTSL.GENERIC.Web.Core.Helper.Enum.AccountManagement
@model List<PTSL.GENERIC.Web.Core.Model.EntityViewModels.AccountManagement.AccountDepositVM>

@{
    ViewBag.Title = "Account Deposit List";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="col-md-10">
                    <h4>Account Deposit List</h4>
                </div>
                <div class="col-md-2 text-right">
                    <a href="/AccountDeposit/Create" class="badge badge-success badge-shadow">Create New</a>
                </div>
            </div>
            <div class="card-body">
              @*   asp-action="IndexFilter" asp-controller="AccountDeposit" *@
                <div class="mb-4 green-card p-2" style="border-radius: 5px;">
                    <div class="row custom">
                        <div class="col-6 p-1">
                            @await Html.PartialAsync(
                            "~/Views/Shared/_ForestAdministration.cshtml",
                            (
                            ViewBag.ForestCircleId as SelectList,
                            ViewBag.ForestDivisionId as SelectList,
                            ViewBag.ForestRangeId as SelectList,
                            ViewBag.ForestBeatId as SelectList,
                            ViewBag.ForestFcvVcfId as SelectList
                            )
                            )
                        </div>

                        <div class="col-6 p-1">
                            @await Html.PartialAsync(
                            "~/Views/Shared/_CivilAdministration.cshtml",
                            (
                            ViewBag.DivisionId as SelectList,
                            ViewBag.DistrictId as SelectList,
                            ViewBag.UpazillaId as SelectList,
                            ViewBag.UnionId as SelectList
                            )
                            )
                        </div>
                    </div>

                    <!--
                    <div class="row custom">
                        <div class="col-12 p-1">
                            <fieldset class="p-2">
                                <legend class="float-none w-auto">Basic Information</legend>
                                <div class="row">
                                    <div class="col pr-1">
                                        <label class="m-0">Gender</label>
                    @* @Html.DropDownList("Gender", null, "Select Gender", htmlAttributes: new { }) *@
                                    </div>
                                    <div class="col px-1">
                                        <label class="m-0">Wealth</label>
                    @* @Html.DropDownList("CipWealth", null, "Select Wealth", htmlAttributes: new { }) *@
                                    </div>
                                    <div class="col px-1">
                                        <label class="m-0">NID</label>
                                        <input type="text" id="NID" value="@ViewBag.NID" name="NID" placeholder="Enter NID (if any)" />
                                    </div>
                                    <div class="col pl-1">
                                        <label class="m-0">Ethnicity</label>
                    @* @Html.DropDownList("EthnicityId", null, "Select Ethnicity", htmlAttributes: new { }) *@
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                    </div>
                    -->

                    <div class="d-flex justify-content-end mt-2">
                        <button id="submit" type="submit" class="btn btn-sm btn-green save">Search</button>
                    </div>
                </div>

                <div class="table-responsive">
                   @*  <table class="table table-striped table-bordered table-hover" id="tableExport_filter" style="width:100%;">
                        <thead>
                            <tr>
                                <th>SL</th>
                                <th>Account Number</th>
                                <th>Amount</th>
                                <th>Source Of Fund</th>
                                <th>Status</th>
                                <th>Approval Status</th>
                                <th>Deposit Date</th>
                                <th class="not-export-col">Action</th>
                            </tr>
                        </thead> @{
                            int i = 1;
                        }
                        <tbody>
                            @if (Model != null)
                            {
                                foreach (var data in Model)
                                {
                                    <tr>
                                        <td>@i</td>
                                        <td>@data.Account?.AccountNumber</td>
                                        <td>@data.DepositAmount.ToBDTCurrency()</td>
                                        <td>@data.SourceOfFund?.Name</td>
                                        <td>@data.AccountDepositStatus.GetEnumDisplayName()</td>
                                        <td>@data.AccountDepositApprovalProcess.GetEnumDisplayName()</td>
                                        <td>@data.DepositDate.ToUIDateString()</td>

                                        <td class="not-export-col">
                                            <a href="/AccountDeposit/Edit?id=@data.Id" class="btn btn-sm btn-primary">Edit</a>
                                            <a href="/AccountDeposit/Details?id=@data.Id" class="btn btn-sm btn-info">Details</a>
                                            <button onclick="showDeleteConfirmMessage(@data.Id)" class="btn btn-sm btn-danger">Delete</button>
                                        </td>
                                    </tr>
                                    i++;
                                }
                            }
                        </tbody>
                    </table> *@


                    <table id="foodTable" class="display">
                        <thead class="table-content">
                            <tr class="table-row">
                                <th scope="col">SL</th>
                                <th scope="col">Account Number</th>
                                <th scope="col">Amount</th>
                                <th scope="col">Source Of Fund</th>
                                <th scope="col">Status</th>
                                <th scope="col">Approval Status</th>
                                <th scope="col">Deposit Date</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody class="table-content">
                        </tbody>
                    </table>


                </div>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Views/Shared/_DataTables.cshtml")

<script>
    $(document).ready(function () {
        $('#tableExport_filter').DataTable({
            pageLength: 5,
            dom: 'lBfrtip',
            buttons: [
                {
                    extend: 'csv',
                    title: 'Account Deposit List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4]
                    }
                },
                {
                    extend: 'excel',
                    title: 'Account Deposit List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4]
                    }
                },
                {
                    extend: 'pdf',
                    title: 'Account Deposit List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4]
                    }
                },
                {
                    extend: 'print',
                    title: 'Account Deposit List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4]
                    }
                }
            ]
        });
    });
    function showDeleteConfirmMessage(id) {
        swal({
            title: "Are you sure?",
            text: "You will not be able to recover this item!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            closeOnConfirm: false
        }, function () {
            var data = {
                'id': id
            };
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                url: "/AccountDeposit/Delete",
                data: data,
                datatype: "json",
                success: function (result) {
                    console.log(result);
                    var message = result.Message;
                    var executionState = result.executionState;
                    if (executionState != null) {
                        if (executionState != 10) {
                            swal("Deleted!", "Item has been deleted.", "success");
                        } else {
                            swal("Deleted Failed!", message, "success");
                        }
                        $(".confirm").on('click', function () {
                            window.location.reload();
                        });
                    }
                },
                error: function (xmlhttprequest, textstatus, errorthrown) {
                    swal("Not Deleted!", "Item has not been deleted.", "error");
                }
            });
        });
    }
</script>



<script>
    // var $j = jQuery.noConflict();
    $(document).ready(function () {
        var data;
        $('#foodTable').DataTable({
            pageLength: 5,
            dom: 'lBfrtip',
            buttons: [
                {
                    extend: 'csv',
                    title: 'Account Deposit List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6]
                    }
                },
                {
                    extend: 'excel',
                    title: 'Account Deposit List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6]
                    }
                },
                {
                    extend: 'pdf',
                    title: 'Account Deposit List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6]
                    }
                },
                {
                    extend: 'print',
                    title: 'Account Deposit List',
                    exportOptions: {
                        columns: [0, 1, 2, 3, 4, 5, 6]
                    }
                }
            ],

            "sAjaxSource": "/AccountDeposit/GetAccountDepositListByPagination",
            "bDestroy": true,
            "bServerSide": true,
            "bProcessing": true,
            "bSearchable": true,
            "order": [[1, 'asc']],
            "language": {
                "emptyTable": "No record found.",
                "processing":
                    '<i class="fa fa-spinner fa-spin fa-3x fa-fw" style="color:#2a2b2b;"></i><span class="sr-only">Loading...</span> '
            },

            "fnDrawCallback": function (oSettings) {
                //alert(oSettings.aoData[1]._aData.Id);
                data = oSettings.jqXHR.responseJSON.aaData;
            },

            aoColumns: [
                {
                    title: 'Id',
                    data: null,
                    render: (data, type, row, meta) => meta.row
                },
                //{ mData: 'TrainingTitle' },
                {
                    render: (data, type, row, meta) => {
                        return row.Account.AccountNumber;
                    },
                },
                {
                    render: (data, type, row, meta) => {
                        return row.DepositAmountBDText;
                    },
                },
                {
                    render: (data, type, row, meta) => {
                        return row.SourceOfFund.Name;
                    },
                },
                {
                    render: (data, type, row, meta) => {
                        return row.AccountDepositStatusText;
                    },
                },
                {
                    render: (data, type, row, meta) => {
                        return row.AccountDepositApprovalProcessText;
                    },
                },
                {
                    render: (data, type, row, meta) => {
                        return moment(row.DepositDate).format("DD-MM-YYYY");
                    },
                },
                {
                    render: (data, type, row, meta) => {
                        return `
                            ${row.ShouldEdit ? `<a href="/AccountDeposit/Edit?id=${row.Id}" class="btn btn-sm btn-primary">Edit</a>` : ``}
                            <a href="/AccountDeposit/Details?id=${row.Id}" class="btn btn-sm btn-info">Details</a>
                            <button onclick="showDeleteConfirmMessage(${row.Id})" class="btn btn-sm btn-danger">Delete</button>
                            `;
                    },
                },
            ],
        });



        //Filter
        $("#submit").click(function () {
            //Extra Filter;
            var forestCircleId = Number($("#ForestCircleId").val());
            var forestDivisionId = Number($("#ForestDivisionId").val());
            var forestRangeId = Number($("#ForestRangeId").val());
            var forestBeatId = Number($("#ForestBeatId").val());
            //var fcvVcfType = Number($("#FcvVcfType").val());
            var forestFcvVcfId = Number($("#ForestFcvVcfId").val());
            var divisionId = Number($("#DivisionId").val());
            var districtId = Number($("#DistrictId").val());
            var upazillaId = Number($("#UpazillaId").val());
            var unionId = Number($("#UnionId").val());
            //alert(forestCircleId);
           

            var labourDatabaseFilterVM =
            {
                ForestCircleId: forestCircleId,
                ForestDivisionId: forestDivisionId,
                ForestRangeId: forestRangeId,
                ForestBeatId: forestBeatId,
                //FcvVcfType: fcvVcfType,
                ForestFcvVcfId: forestFcvVcfId,
                DivisionId: divisionId,
                DistrictId: districtId,
                UpazillaId: upazillaId,
                UnionId: unionId
            };

            $.ajax({
                type: "POST",
                url: "/AccountDeposit/IndexFilterAccountDepositListByPagination",
                data: labourDatabaseFilterVM,
                cache: false,
                dataType: 'json',
                success: function (response) {
                    $('#foodTable').DataTable({
                        "bDestroy": true,

                        //"bServerSide": true,
                        //"bProcessing": true,
                        //"bSearchable": true,
                        //"order": [[1, 'asc']],
                        // "language": {
                        //     "emptyTable": "No record found.",
                        //     "processing":
                        //         '<i class="fa fa-spinner fa-spin fa-3x fa-fw" style="color:#2a2b2b;"></i><span class="sr-only">Loading...</span> '
                        // },
                        data: response.aaData,

                        aoColumns: [
                            {
                                title: 'Id',
                                data: null,
                                render: (data, type, row, meta) => meta.row
                            },
                            //{ mData: 'TrainingTitle' },
                            {
                                render: (data, type, row, meta) => {
                                    return row.Account.AccountNumber;
                                },
                            },
                            {
                                render: (data, type, row, meta) => {
                                    return row.DepositAmountBDText;
                                },
                            },
                            {
                                render: (data, type, row, meta) => {
                                    return row.SourceOfFund.Name;
                                },
                            },
                            {
                                render: (data, type, row, meta) => {
                                    return row.AccountDepositStatusText;
                                },
                            },
                            {
                                render: (data, type, row, meta) => {
                                    return row.AccountDepositApprovalProcessText;
                                },
                            },
                            {
                                render: (data, type, row, meta) => {
                                    return moment(row.DepositDate).format("DD-MM-YYYY");
                                },
                            },
                            {
                                render: (data, type, row, meta) => {
                                    return `
                                        ${row.ShouldEdit ? `<a href="/AccountDeposit/Edit?id=${row.Id}" class="btn btn-sm btn-primary">Edit</a>` : ``}
                                        <a href="/AccountDeposit/Details?id=${row.Id}" class="btn btn-sm btn-info">Details</a>
                                        <button onclick="showDeleteConfirmMessage(${row.Id})" class="btn btn-sm btn-danger">Delete</button>
                                        `;
                                },
                            },
                        ],
                    });
                },
                error: function () {
                    $(".loader").fadeOut("slow");
                    swal(
                        'Unexpected',
                        'Unknown error occurred',
                        'error'
                    );
                }
            });

        });


    });
</script>