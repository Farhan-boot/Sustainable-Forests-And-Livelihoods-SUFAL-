<style>
    #tabs li[aria-selected=true] a {
        color: black;
    }
</style>

<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" style="max-width: calc(100vw - 100px);">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myLargeModalLabel">Add Participants</h4>
                <button id="CloseModal" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="tabs">
                    <ul>
                        <li><a href="#SelectedLocationBeneficiary">Beneficiary</a></li>
                        <li><a href="#Beneficiary">Other Beneficiary</a></li>
                        <li><a href="#OtherMember">Other Member</a></li>
                    </ul>
                    <div id="SelectedLocationBeneficiary">
                        <div class="row p-1">
                            <table class="table table-striped table-bordered table-hover" id="tableSelectedLocationBeneficiary" style="width:100%;">
                                <thead>
                                    <tr>
                                        <th class="text-center index">SL</th>
                                        <th>Name</th>
                                        <th>Mobile Number</th>
                                        <th>NID</th>
                                        <th>Gender</th>
                                        <th>House Condition</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div id="Beneficiary">
                        @await Html.PartialAsync("~/Views/Shared/_ForestCivilLocation.cshtml", "community-participant")

                        <div class="row custom" style="padding-left: 15px; padding-right:15px;">
                            <fieldset class="p-2 col-12">
                                <legend class="float-none w-auto">Basic Information</legend>
                                <div class="row">
                                    <div class="col">
                                        @Html.DropDownList("Gender", null, "Select Gender", htmlAttributes: new { })
                                    </div>
                                    <div class="col">
                                        <input type="number" id="@nameof(Model.PhoneNumber)" name="@nameof(Model.PhoneNumber)" placeholder="Beneficiary Mobile Number" />
                                    </div>
                                    <div class="col">
                                        <input type="number" id="@nameof(Model.NID)" name="@nameof(Model.NID)" placeholder="Beneficiary NID" />
                                    </div>
                                    <div class="col">
                                        @Html.DropDownList("FilterNgoId", null, "Select NGO", htmlAttributes: new { })
                                    </div>
                                </div>
                            </fieldset>
                        </div>

                        <div class="d-flex justify-content-end my-2">
							<button type="submit" id="SearchBeneficiaryButton" class="btn btn-lg btn-green save">
                                Search
                            </button>
                        </div>

                        <div id="table-show mt-4">
                            <table class="table table-striped table-bordered table-hover" id="tableBeneficiary" style="width:100%;">
                                <thead>
                                    <tr>
                                        <th class="text-center index">SL</th>
                                        <th>Name</th>
                                        <th>Mobile Number</th>
                                        <th>NID</th>
                                        <th>Gender</th>
                                        <th>House Condition</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <form id="OtherMember">
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>
                                    Member's Name
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="text" class="form-control" name="MemberName" placeholder="Enter  Member's Name" />
                            </div>
                            <div class="form-group col-md-3">
                                <label>
                                    Member's Age
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="number" class="form-control" min="18" value="" name="MemberAge" placeholder="Enter  Member's Age" />
                            </div>
                            <div class="form-group col-md-3">
                                <label>
                                    Member's Gender
                                    <span style="color:red;">*</span>
                                </label>
                                <select name="MemberGender" class="form-control">
                                    <option value="">Select..</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>
                                    Member's Mobile Number
                                    <span style="color:red;">*</span>
                                </label>
                                <input type="number" class="form-control" name="MemberPhone" placeholder="Enter Mobile Number" />
                            </div>
                            <div class="form-group col-md-6">
                                <label>
                                    Member's Address
                                </label>
                                <input type="text" class="form-control" name="MemberAddress" placeholder="Enter Member's Address" />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="col text-right">
                                <button id="AddOtherMember" class="btn btn-primary btn-sm">Add</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.12.1/css/jquery.dataTables.css">
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.js"></script>

<script>
    let currentLoadedBeneficiary = [];

    $("#addParticipantButton").on("click", function () {
        var filterData = {
            ForestCivilLocation: {
                ForestCircleId: $(".create-meeting select[name=ForestCircleId]").val(),
                ForestDivisionId: $(".create-meeting select[name=ForestDivisionId]").val(),
                ForestRangeId: $(".create-meeting select[name=ForestRangeId]").val(),
                ForestBeatId: $(".create-meeting select[name=ForestBeatId]").val(),
                ForestFcvVcfId: $(".create-meeting select[name=ForestFcvVcfId]").val(),
                //PresentDivisionId: $(".create-meeting select[name=DivisionId]").val(),
                //PresentDistrictId: $(".create-meeting select[name=DistrictId]").val(),
                //PresentUpazillaId: $(".create-meeting select[name=UpazillaId]").val(),
            },
        };

        debugger;

        _getBeneficiaryFilterData(
            filterData,

            // Success
            function (response) {
                if (Array.isArray(response.Data)) {
                    currentLoadedBeneficiary = response.Data; // Load currently loaded data in variable

                    if (Array.isArray(response.Data)) {
                        if (response.Data.length < 1) {
                            $("#tableSelectedLocationBeneficiary tbody").empty();
                            return;
                        }

                        $("#tableSelectedLocationBeneficiary tbody").empty();

                        response.Data.forEach(function (survey, index) {
                            // check if it is already added
                            var existingBeneficiary = allParticipants.find(x => x.type == beneficiaryTypeName && x.member.Id == survey.Id);
                            var buttonText = existingBeneficiary ? 'Added' : 'Add';

                            debugger;

                            $("#tableSelectedLocationBeneficiary tbody").append(`
                                <tr>
                                    <td class="text-center index" hidden>${survey.Id}</td>
                                    <td class="text-center">${index + 1}</td>
                                    <td>${survey.BeneficiaryName}</td>
                                    <td>${survey.BeneficiaryPhone}</td>
                                    <td>${survey.BeneficiaryNid}</td>
                                    <td>${survey.BeneficiaryGenderString}</td>
                                    <td>${survey.BeneficiaryHouseTypeString}</td>
                                    <td><span class="${survey.BeneficiaryApproveStatusString}">${survey.BeneficiaryApproveStatusString}</span></td>
                                    <td>
                                            <button data-id=${survey.Id} onclick="addBeneficiary(${survey.Id})" class="btn btn-sm btn-primary">${buttonText}</button>
                                    </td>
                                </tr>
                            `);
                            makeIndex();
                        });
                    } else {
                        $("#tableSelectedLocationBeneficiary tbody").empty();
                    }
                }
            },

            // Error
            function () {
                $("#tableSelectedLocationBeneficiary tbody").empty();
            }
        );
    });
</script>

<script>
    $("#tabs").tabs();

    var memberUiId = -1;
    var index = 1;

    $("#AddOtherMember").on("click", function (event) { // Add Member to UI table but don't save in DB yet
		event.preventDefault();

        $("#OtherMember").validate({
            rules: {
                MemberName: {
                    required: true,
                    minlength: 2,
                },
                MemberAge: "required",
                MemberGender: "required",
                MemberPhone: {
                    required: true,
                    mustBeInteger: true,
                    minlength: 11,
                    maxlength: 11,
                },
            }
        });

        var isFormValid = $("#OtherMember").valid();
        if (isFormValid == false) {
            return;
        }

        var member = {
            Id: memberUiId,
            MemberName: $("#OtherMember input[name=MemberName]").val(),
            MemberAge: $("#OtherMember input[name=MemberAge]").val(),
            MemberPhone: $("#OtherMember input[name=MemberPhone]").val(),
            MemberAddress: $("#OtherMember input[name=MemberAddress]").val(),
            MemberGender: $("#OtherMember select[name=MemberGender]").val()
        };

        allParticipants.push({ type: memberTypeName, member });
        memberUiId--;

        resetOtherMemberForm();
        addParticipantToTable(member, memberTypeName);

        var currentButton = $(this);
        currentButton.text("Added");

        var timeOut = setTimeout(function() {
            currentButton.text("Add");
            clearTimeout(timeOut);
        }, 1000);
    });

    function resetOtherMemberForm() {
		document.getElementById("OtherMember").reset();
    }

    function deleteOtherMember(id) {
        allParticipants = allParticipants.filter(x => x.member.Id != id);
        $("#participantMemberTable tbody").find(`tr[data-id=${id}]`).remove();
        $("#tableBeneficiary").find(`button[data-id=${id}]`).text("Add");
        makeIndex();
    }

    var currentLoadedOtherBeneficiary = [];

    $("#SearchBeneficiaryButton").on("click", function () {

        var filterData = {
            ForestCivilLocation: {
                ForestCircleId: $(".community-participant select[name=ForestCircleId]").val(),
                ForestDivisionId: $(".community-participant select[name=ForestDivisionId]").val(),
                ForestRangeId: $(".community-participant select[name=ForestRangeId]").val(),
                ForestBeatId: $(".community-participant select[name=ForestBeatId]").val(),
                ForestFcvVcfId: $(".community-participant select[name=ForestFcvVcfId]").val(),
                PresentDivisionId: $(".community-participant select[name=PresentDivisionId]").val(),
                PresentDistrictId: $(".community-participant select[name=PresentDistrictId]").val(),
                PresentUpazillaId: $(".community-participant select[name=PresentUpazillaId]").val(),
            },
            Gender: $("#Gender").val(),
            PhoneNumber: $("#PhoneNumber").val(),
            NID: $("#NID").val(),
            EthnicityId: $("#EthnicityId").val(),
            NgoId: $("#FilterNgoId").val(),
        };

        $("#SearchBeneficiaryButton").text("Searching");
        $("#SearchBeneficiaryButton").attr("disabled", "");
        $("#tableBeneficiary tbody").empty();

        _getBeneficiaryFilterData(
            filterData,

            // Success
            function (response) {
                if (Array.isArray(response.Data)) {
                    $("#SearchBeneficiaryButton").text("Search");
                    $("#SearchBeneficiaryButton").removeAttr("disabled");
                    $("#tableBeneficiary tbody").empty();

                    currentLoadedOtherBeneficiary = response.Data; // Load currently loaded data in variable

                    response.Data.forEach(function (survey, index) {
                        // check if it is already added
                        var existingBeneficiary = allParticipants.find(x => x.type == beneficiaryTypeName && x.member.Id == survey.Id);

                        $("#tableBeneficiary tbody").append(`
                            <tr>
                                <td class="text-center index" hidden>${survey.Id}</td>
                                <td class="text-center">${index + 1}</td>
                                <td>${survey.BeneficiaryName || survey.BeneficiaryNameBn}</td>
                                <td>${survey.BeneficiaryPhone}</td>
                                <td>${survey.BeneficiaryNid}</td>
                                <td>${survey.BeneficiaryGenderString}</td>
                                <td>${survey.BeneficiaryHouseTypeString}</td>
                                <td><span class="${survey.BeneficiaryApproveStatusString}">${survey.BeneficiaryApproveStatusString}</span></td>
                                <td>
                                        <button data-id=${survey.Id} onclick="addOtherBeneficiary(${survey.Id})" class="btn btn-primary">${existingBeneficiary ? 'Added' : 'Add'}</button>
                                </td>
                            </tr>
                        `);
                        makeIndex();
                    });
                } else {
                    $("#SearchBeneficiaryButton").text("Searching");
                    $("#SearchBeneficiaryButton").attr("disabled", "");

                    $("#tableBeneficiary tbody").empty();
                }
            },

            // Error
            function () {
                $("#SearchBeneficiaryButton").text("Searching");
                $("#SearchBeneficiaryButton").attr("disabled", "");

                $("#tableBeneficiary tbody").empty();
            }
        );
    });

    function addBeneficiary(surveyId) {
        var survey = currentLoadedBeneficiary.find(x => x.Id == surveyId);
        var existingBeneficiary = allParticipants.find(x => x.type == beneficiaryTypeName && x.member.Id == surveyId);

        var tableBeneficiary = $("#tableBeneficiary").find(`button[data-id=${surveyId}]`);
        var tableSelectedBeneficiary = $("#tableSelectedLocationBeneficiary").find(`button[data-id=${surveyId}]`);
        if (tableBeneficiary.length) {
            tableBeneficiary.text("Added");
        }
        if (tableSelectedBeneficiary.length) {
            tableSelectedBeneficiary.text("Added");
        }

        if (!survey) return;
        if (existingBeneficiary) return;

        var member = {
            Id: surveyId,
            MemberName: survey.BeneficiaryName,
            MemberAge: survey.BeneficiaryAge,
            MemberPhone: survey.BeneficiaryPhone,
            MemberNid: survey.BeneficiaryNid,
            MemberGender: survey.BeneficiaryGender,
            MemberAddress: "",
        };

        allParticipants.push({ type: beneficiaryTypeName, member });
        addParticipantToTable(member, beneficiaryTypeName);
    }

    function addOtherBeneficiary(surveyId) { // if you change this function also change addBeneficiary function
        var survey = currentLoadedOtherBeneficiary.find(x => x.Id == surveyId);
        var existingBeneficiary = allParticipants.find(x => x.type == beneficiaryTypeName && x.member.Id == surveyId);

        var tableBeneficiary = $("#tableBeneficiary").find(`button[data-id=${surveyId}]`);
        var tableSelectedBeneficiary = $("#tableSelectedLocationBeneficiary").find(`button[data-id=${surveyId}]`);
        if (tableBeneficiary.length) {
            tableBeneficiary.text("Added");
        }
        if (tableSelectedBeneficiary.length) {
            tableSelectedBeneficiary.text("Added");
        }

        if (!survey) return;
        if (existingBeneficiary) return;

        var member = {
            Id: surveyId,
            MemberName: survey.BeneficiaryName,
            MemberAge: survey.BeneficiaryAge,
            MemberPhone: survey.BeneficiaryPhone,
            MemberNid: survey.BeneficiaryNid,
            MemberGender: survey.BeneficiaryGender,
            MemberAddress: "",
        };

        allParticipants.push({ type: beneficiaryTypeName, member });
        addParticipantToTable(member, beneficiaryTypeName);
    }

    function addParticipantToTable(member, type) {
        var genderName = genderList.find(x => x.Id == member.MemberGender);

        $("#participantMemberTable tbody").append(`
            <tr data-id=${member.Id}>
                <td class="text-center index">${index++}</td>
                <td>${member.MemberName}</td>
                <td>${genderName.Name}</td>
                <td>${member.MemberAge}</td>
                <td>${member.MemberPhone}</td>
                <td>${member.MemberNid || ''}</td>
                <td>${type}</td>
                <td>
                    <button onclick="deleteOtherMember(${member.Id})" class="btn btn-sm btn-danger">Delete</button>
                </td>
            </tr>
        `);
        makeIndex();
    }
</script>
<script>
    // Load Gender
    var genderList = [];

    $.ajax({
        cache: false,
        type: "GET",
        url: "/Dropdown/GetGenderEnumList",
        success: function (data) {
            genderList = data;

            var Gender = $("#OtherMember select[name=MemberGender]");

            Gender.html('<option value="">Choose..</option>');
            $.each(data, function (id, option) {
                Gender.append($('<option></option>').val(option.Id).html(option.Name));
            });
        },
    });

    // Custom jQuery validation rules
    const isInteger = num => /^-?[0-9]+$/.test(num + '');
    const dateMustBePreviousFromNowFunc = date => {
        return (new Date(date)).toISOString() >= (new Date(new Date().toDateString())).toISOString();
    }
	function timeToMinutes(time) {
		let [hour, minute] = time.split(":");
		return parseInt(hour) * 60 + parseInt(minute);
	}
    const dateMustBeGreaterThanStartTimeFunc = date => {
		var startTime = timeToMinutes($("#StartTime").val());
		var endTime = timeToMinutes($("#EndTime").val());

		return startTime < endTime;
    }
    function isEmail(email) {
        return /^\w+@@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/.test(email);
    }
    function isEnglish(str) {
        return /^[\x20-\x7E]*$/.test(str);
    }
    const isBangla = (str) => {
        const lang = str.replace(/\s/g, '');

        for (var i = 0; i < lang.length; i++) {
            if (lang.charCodeAt(i) < 2432 || lang.charCodeAt(i) > 2558) {
                return false;
            }
        }
        return true;
    }

    $.validator.addMethod(
        'mustBeInteger',
        function (value, element, requiredValue) {
            return isInteger(value);
        },
        'Must be a valid number.'
    );
    $.validator.addMethod(
        'dateMustBePreviousFromNow',
        function (value, element, requiredValue) {
            return dateMustBePreviousFromNowFunc(value);
        },
        'Date must be greater or equal to current date.'
    );
    $.validator.addMethod(
        'dateMustBeGreaterThanStart',
        function (value, element, requiredValue) {
            return dateMustBeGreaterThanStartTimeFunc(value);
        },
        'End time must be greater than start time.'
    );
    $.validator.addMethod(
        'isEmail',
        function (value) {
            return isEmail(value);
        },
        'Invalid Email'
    );
    $.validator.addMethod(
        'isEnglish',
        function (value) {
            return isEnglish(value);
        },
        'Please enter English characters'
    );
    $.validator.addMethod(
        'isOptionalBangla',
        function (value) {
            if (!value) return true;
            return isBangla(value);
        },
        'Please enter Bangla characters'
    );
</script>
