// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PTSL.GENERIC.Common.Entity;

#nullable disable

namespace PTSL.GENERIC.Api.Migrations
{
    [DbContext(typeof(GENERICWriteOnlyCtx))]
    [Migration("20231127120401_Remove_MandatoryFCV_Union")]
    partial class Remove_MandatoryFCV_Union
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.AIGBasicInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("BadLoanType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IndividualLDFInfoFormId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsRecievedTrainingInTrade")
                        .HasColumnType("boolean");

                    b.Property<int>("LDFCount")
                        .HasColumnType("integer");

                    b.Property<int>("MaximumRepaymentMonth")
                        .HasColumnType("integer");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<double>("SecurityChargePercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("ServiceChargePercentage")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalAllocatedLoanAmount")
                        .HasColumnType("double precision");

                    b.Property<long?>("TradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("IndividualLDFInfoFormId")
                        .IsUnique();

                    b.HasIndex("NgoId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("TradeId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("AIGBasicInformations", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.FirstSixtyPercentageLDF", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AIGBasicInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DisbursementDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GraceMonth")
                        .HasColumnType("integer");

                    b.Property<bool>("HasBankAccountInHisOwnName")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasGrace")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsAgreeToInvestInOwnIncomeActivities")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAgreedToKeepIncomeAndExpenditureFund")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAttendedEightyPercentageOfMeetings")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsFirstInstallmentIsCertifiedBySocialAuditCommittee")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPayingRegularIncomingInstallments")
                        .HasColumnType("boolean");

                    b.Property<double>("LDFAmount")
                        .HasColumnType("double precision");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("SecurityChargeAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("SecurityChargePercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("ServiceChargeAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("ServiceChargePercentage")
                        .HasColumnType("double precision");

                    b.Property<bool>("ShallAdhereTheCOM")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AIGBasicInformationId")
                        .IsUnique();

                    b.ToTable("FirstSixtyPercentageLDFs", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.GroupLDFInfoForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentName")
                        .HasColumnType("text");

                    b.Property<string>("DocumentNameURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubmittedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalMember")
                        .HasColumnType("integer");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("SubmittedById");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("GroupLDFInfoForms", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.GroupLDFInfoFormMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupLDFInfoFormId")
                        .HasColumnType("bigint");

                    b.Property<long>("IndividualLDFInfoFormId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("GroupLDFInfoFormId");

                    b.HasIndex("IndividualLDFInfoFormId");

                    b.ToTable("GroupLDFInfoFormMembers", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.IndividualGroupFormSetup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupDocument")
                        .HasColumnType("text");

                    b.Property<string>("IndividualDocument")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("IndividualGroupFormSetups", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.IndividualLDFInfoForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("ApprovedLoanAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentInfoURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<int>("IndividualLDFInfoStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<int>("LDFCount")
                        .HasColumnType("integer");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<double>("RequestedLoanAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("IndividualLDFInfoForms", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.LDFProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AIGBasicInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("GrowthPercentage")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("ProgressAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("ProgressResource")
                        .HasColumnType("text");

                    b.Property<DateTime>("RepaymentEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RepaymentLDFId")
                        .HasColumnType("bigint");

                    b.Property<int>("RepaymentSerial")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RepaymentStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AIGBasicInformationId");

                    b.HasIndex("RepaymentLDFId")
                        .IsUnique();

                    b.ToTable("LDFProgresss", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDF", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AIGBasicInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("FirstSixtyPercentRepaymentAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("FirstSixtyPercentRepaymentAmountReceived")
                        .HasColumnType("double precision");

                    b.Property<long?>("FirstSixtyPercentageLDFId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaymentCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaymentCompletedLate")
                        .HasColumnType("boolean");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PaymentCompletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RepaymentEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RepaymentSerial")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RepaymentStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("SecondFortyPercentRepaymentAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("SecondFortyPercentRepaymentAmountReceived")
                        .HasColumnType("double precision");

                    b.Property<long?>("SecondFourtyPercentageLDFId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AIGBasicInformationId");

                    b.HasIndex("FirstSixtyPercentageLDFId");

                    b.HasIndex("SecondFourtyPercentageLDFId");

                    b.ToTable("RepaymentLDFs", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDFFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RepaymentLDFId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("RepaymentLDFId");

                    b.ToTable("RepaymentLDFFiles", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDFHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("EventMessage")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventOccurredDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("EventUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("RepaymentLDFEventType")
                        .HasColumnType("integer");

                    b.Property<long>("RepaymentLDFId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("EventUserId");

                    b.HasIndex("RepaymentLDFId");

                    b.ToTable("RepaymentLDFHistories", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.SecondFourtyPercentageLDF", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AIGBasicInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("DidNotBreakTheTenPrinciples")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DisbursementDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("HasInvestedSeventyPercentageOfTheLoan")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncomeExpenditureFundLoansUpdatedAndCertified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsAttendedRegularMeetings")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsLivelihoodDevelopmentFundCertifiedAndApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaidTheLoanInstallmentThreeConsecutiveMonths")
                        .HasColumnType("boolean");

                    b.Property<double>("LDFAmount")
                        .HasColumnType("double precision");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("SecurityChargeAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("SecurityChargePercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("ServiceChargeAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("ServiceChargePercentage")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("StartRepaymentLDFId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AIGBasicInformationId")
                        .IsUnique();

                    b.ToTable("SecondFourtyPercentageLDFs", "AIG");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccessMapper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessList")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("AccessList");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint")
                        .HasColumnName("IsVisible");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<byte>("RoleStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("RoleStatus");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("AccessMapper", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Accesslist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("AccessStatus");

                    b.Property<string>("ActionName")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ActionName");

                    b.Property<int?>("BaseModuleIndex")
                        .HasColumnType("int")
                        .HasColumnName("BaseModuleIndex");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ControllerName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("IconClass")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IconClass");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool?>("IsAvailableForApproval")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint")
                        .HasColumnName("IsVisible");

                    b.Property<string>("Mask")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Mask");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("ModuleId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Accesslist", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int[]>("AccountAllowedFundExpenses")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AccountOpeningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("BranchName")
                        .HasColumnType("text");

                    b.Property<long?>("CommitteeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommitteeTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("CurrentAccountBalance")
                        .HasColumnType("double precision");

                    b.Property<double>("CurrentBlockAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("CommitteeTypeId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.ToTable("Accounts", "AccountManagement");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountDeposit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("DepositAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DepositDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DepositTransactionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FinancialYearId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<long>("SourceOfFundId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("SourceOfFundId");

                    b.HasIndex("TransactionById");

                    b.ToTable("AccountDeposits", "AccountManagement");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountTransferStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("FinancialYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("FromAccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<long?>("SourceOfFundId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToAccountId")
                        .HasColumnType("bigint");

                    b.Property<double>("TransferAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TransferRequestedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TransferTransactionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("SourceOfFundId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("TransferRequestedById");

                    b.ToTable("AccountTransfers", "AccountManagement");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransferApproval", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiverRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<long>("RowId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderRoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SendingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReceiverRoleId");

                    b.HasIndex("RowId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SenderRoleId");

                    b.ToTable("AccountTransferApproval");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransferDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountTransferId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SourceOfFundId")
                        .HasColumnType("bigint");

                    b.Property<double>("TransferDetailsAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AccountTransferId");

                    b.HasIndex("SourceOfFundId");

                    b.ToTable("AccountTransferDetails", "AccountManagement");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransferLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountTransferDetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("AccountTransferId")
                        .HasColumnType("bigint");

                    b.Property<int>("AccountTransferStatus")
                        .HasColumnType("integer");

                    b.Property<double?>("AmountChangedFrom")
                        .HasColumnType("double precision");

                    b.Property<double?>("AmountChangedTo")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatusCreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TransferStatusChangedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AccountTransferDetailsId");

                    b.HasIndex("AccountTransferId");

                    b.HasIndex("TransferStatusChangedById");

                    b.ToTable("AccountTransferLogs", "AccountManagement");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountsUserTagLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountsId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountsUserTagLogs", "AccountManagement");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.SourceOfFund", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("SourceOfFunds", "AccountManagement");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ApprovalLog.ApprovalLogForCfm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("ApprovalStatusId")
                        .HasColumnType("integer");

                    b.Property<long?>("BeneficiaryProfileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CipId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CipTeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommitteeManagementId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("InternalLoanInformationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiverRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderRoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SendingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryProfileId");

                    b.HasIndex("CipId");

                    b.HasIndex("CipTeamId");

                    b.HasIndex("CommitteeManagementId");

                    b.HasIndex("InternalLoanInformationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReceiverRoleId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SenderRoleId");

                    b.ToTable("ApprovalLogForCfm", "ApprovalLog");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ArchiveName")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentDescription")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("RegistrationArchive", "Archive");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchiveFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FileName")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RegistrationArchiveId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("RegistrationArchiveId");

                    b.ToTable("RegistrationArchiveFile", "Archive");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.BankAccountsInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("BankAccountsInformation", "AccountManagement");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.AnnualHouseholdExpenditure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("ExpenditureCost")
                        .HasColumnType("double precision");

                    b.Property<string>("ExpenditureRemarks")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ExpenditureTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpenditureTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ExpenditureTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("AnnualHouseholdExpenditures", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("AssetQuantity")
                        .HasColumnType("double precision");

                    b.Property<long>("AssetTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssetTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("AssetsCost")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Assets", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.AssetType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("AssetTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.BFDAssociation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("BFDAssociations", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.BFDAssociationHouseholdMembersMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BFDAssociationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("HouseholdMemberId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("BFDAssociationId");

                    b.HasIndex("HouseholdMemberId");

                    b.ToTable("BFDAssociationHouseholdMembersMaps", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Business", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("BusinessGrossValueOfSales")
                        .HasColumnType("double precision");

                    b.Property<long?>("BusinessIncomeSourceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("BusinessIncomeSourceTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("BusinessTotalCashCosts")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalNetIncome")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("BusinessIncomeSourceTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Businesss", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.BusinessIncomeSourceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("BusinessIncomeSourceTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Cip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApprovalStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("text");

                    b.Property<string>("CipGeneratedId")
                        .HasColumnType("text");

                    b.Property<int>("CipWealth")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EthnicityId")
                        .HasColumnType("bigint");

                    b.Property<string>("FatherOrSpouseName")
                        .HasColumnType("text");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ForestVillageName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("HouseType")
                        .HasColumnType("integer");

                    b.Property<string>("HouseholdSerialNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("NID")
                        .HasColumnType("text");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CipGeneratedId")
                        .IsUnique();

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("Cips", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.CipFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CipId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CipId");

                    b.ToTable("CipFiles", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.DisabilityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("DisabilityTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.DisabilityTypeHouseholdMembersMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DisabilityTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("HouseholdMemberId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DisabilityTypeId");

                    b.HasIndex("HouseholdMemberId");

                    b.ToTable("DisabilityTypeHouseholdMembersMaps", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.EnergyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("EnergyTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.EnergyUse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("EnergyTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("EnergyUseTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("EnergyUsesMonthly")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("EnergyTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("EnergyUses", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Ethnicitys", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ExistingSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(500)");

                    b.Property<short?>("SkillLevelEnum")
                        .HasColumnType("smallint");

                    b.Property<string>("SkillName")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("ExistingSkills", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ExpenditureType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("ExpenditureTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.FoodItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("FoodItems", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.FoodSecurityItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("FoodAvilableMonthInYear")
                        .HasColumnType("double precision");

                    b.Property<long>("FoodItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("FoodItemTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("FoodItemId");

                    b.HasIndex("SurveyId");

                    b.ToTable("FoodSecurityItems", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ForestRangeId");

                    b.ToTable("ForestBeats", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("ForestCircles", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ForestCircleId");

                    b.ToTable("ForestDivisions", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FormedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsFcv")
                        .HasColumnType("boolean");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ForestBeatId");

                    b.ToTable("ForestFcvVcfs", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ForestDivisionId");

                    b.ToTable("ForestRanges", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.GrossMarginIncomeAndCostStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<double>("LandArea")
                        .HasColumnType("double precision");

                    b.Property<string>("MeasurementOfProduct")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("ProductionValueSoldPerQuantity")
                        .HasColumnType("double precision");

                    b.Property<double>("QuantitySold")
                        .HasColumnType("double precision");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalConsumption")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalCostOfProduction")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalNetIncome")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalProductionHousehold")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalValueSold")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<double>("ValueSoldPerQuantity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("GrossMarginIncomeAndCostStatuses", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.HouseholdMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Age")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AgeBn")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BFDAssociationTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<short>("EducationLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FullNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("HasDisability")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long>("MainOccupationId")
                        .HasColumnType("bigint");

                    b.Property<string>("MainOccupationTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("MaritalSatus")
                        .HasColumnType("smallint");

                    b.Property<string>("MaritalSatusTxt")
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("RelationWithHeadHouseHoldTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelationWithHeadHouseHoldTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("SafetyNetTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("SafetyNetTypeTxt")
                        .HasColumnType("text");

                    b.Property<string>("SecondOccupationTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("SecondaryOccupationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("MainOccupationId");

                    b.HasIndex("RelationWithHeadHouseHoldTypeId");

                    b.HasIndex("SafetyNetTypeId");

                    b.HasIndex("SecondaryOccupationId");

                    b.HasIndex("SurveyId");

                    b.ToTable("HouseholdMembers", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ImmovableAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("ImmovableAnnualReturn")
                        .HasColumnType("double precision");

                    b.Property<long>("ImmovableAssetTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImmovableAssetsTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ImmovableAssetTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("ImmovableAssets", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ImmovableAssetType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("ImmovableAssetTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.LandOccupancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("FallowLand")
                        .HasColumnType("double precision");

                    b.Property<double>("FallowWetland")
                        .HasColumnType("double precision");

                    b.Property<double>("Homesteads")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<short>("LandClassificationEnum")
                        .HasColumnType("smallint");

                    b.Property<string>("LandClassificationTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("OthersLand")
                        .HasColumnType("double precision");

                    b.Property<double>("ProductiveLand")
                        .HasColumnType("double precision");

                    b.Property<double>("ProductiveWetland")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalLand")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("LandOccupancies", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.LiveStock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<double>("LiveStockQuantity")
                        .HasColumnType("double precision");

                    b.Property<long>("LiveStockTypeId")
                        .HasColumnType("bigint");

                    b.Property<double>("LivestockCost")
                        .HasColumnType("double precision");

                    b.Property<string>("LivestockTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("LiveStockTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("LiveStocks", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.LiveStockType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("LiveStockTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ManualIncomeSourceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("ManualIncomeSourceTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ManualPhysicalWork", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("AvgDailyIncome")
                        .HasColumnType("double precision");

                    b.Property<int>("AvgNoPersonActivePerMonth")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ManualIncomeSourceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ManualIncomeSourceTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("NoOfActiveMonth")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfFemale")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfMale")
                        .HasColumnType("integer");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalAnnualIncome")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalPerson")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ManualIncomeSourceTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("ManualPhysicalWorks", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Marketing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MarketingName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MarketingNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Marketings", "Marketing");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.NaturalIncomeSourceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("NaturalIncomeSourceTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.NaturalResourcesIncomeAndCostStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("ActivityPerValueSold")
                        .HasColumnType("double precision");

                    b.Property<double>("AvgNoPersonActivePerMonth")
                        .HasColumnType("double precision");

                    b.Property<double>("CostOfActivity")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NaturalIncomeSourceTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("NoOfActiveMonth")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfFemale")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfMale")
                        .HasColumnType("integer");

                    b.Property<double>("ProducedValueSoldActivity")
                        .HasColumnType("double precision");

                    b.Property<double>("QuantitySold")
                        .HasColumnType("double precision");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalConsumption")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalManDaysForCollection")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalNetIncome")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalProduced")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<double>("ValueProduceSold")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueSoldPerActivity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("NaturalIncomeSourceTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("NaturalResourcesIncomeAndCostStatuses", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<List<long>>("ForestCircleIdList")
                        .HasColumnType("bigint[]");

                    b.Property<List<long>>("ForestDivisionIdList")
                        .HasColumnType("bigint[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Ngos", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Occupation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Occupations", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.OtherIncomeSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("GrossValueOfSales")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OtherIncomeSourceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("OtherIncomeSourceTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalCashCosts")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalNetIncome")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("OtherIncomeSourceTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("OtherIncomeSources", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.OtherIncomeSourceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("OtherIncomeSourceTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.RelationWithHeadHouseHoldType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("RelationWithHeadHouseHoldTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.SafetyNet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("SafetyNets", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("AccessorToCreditGender")
                        .HasColumnType("smallint");

                    b.Property<string>("BeneficiaryAge")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BeneficiaryAgeBn")
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("BeneficiaryAltitude")
                        .HasColumnType("double precision");

                    b.Property<int>("BeneficiaryApproveStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<long?>("BeneficiaryApproveStatusById")
                        .HasColumnType("bigint");

                    b.Property<long?>("BeneficiaryEthnicityId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryEthnicityTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BeneficiaryFatherName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BeneficiaryFatherNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("BeneficiaryGender")
                        .HasColumnType("smallint");

                    b.Property<string>("BeneficiaryHouseFrontImage")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BeneficiaryHouseFrontImageURL")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("BeneficiaryHouseType")
                        .HasColumnType("integer");

                    b.Property<string>("BeneficiaryHouseholdSerialNo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BeneficiaryId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("BeneficiaryLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("BeneficiaryLongitude")
                        .HasColumnType("double precision");

                    b.Property<string>("BeneficiaryMotherName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BeneficiaryMotherNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BeneficiaryNIDBackURL")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryNIDFrontURL")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BeneficiaryNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BeneficiaryNid")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BeneficiaryPhone")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BeneficiaryPhoneBn")
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("BeneficiaryPrecision")
                        .HasColumnType("double precision");

                    b.Property<string>("BeneficiaryProfileURL")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiarySpouseName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BeneficiarySpouseNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("BorrowedFromBank")
                        .HasColumnType("double precision");

                    b.Property<double>("BorrowedFromCoOperatives")
                        .HasColumnType("double precision");

                    b.Property<double>("BorrowedFromNGO")
                        .HasColumnType("double precision");

                    b.Property<double>("BorrowedFromNonRelatives")
                        .HasColumnType("double precision");

                    b.Property<double>("BorrowedFromRelatives")
                        .HasColumnType("double precision");

                    b.Property<bool?>("CanAccessLegalSupportForGbv")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanUnsufructsRights")
                        .HasColumnType("boolean");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("CipId")
                        .HasColumnType("bigint");

                    b.Property<short>("ControllerOfCreditGender")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<short>("CropTypeDecisionGender")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DataCollectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("DecisionToTransferAssetsGender")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DetailsInfo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Deviceid")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("DicisionTakerEnum")
                        .HasColumnType("smallint");

                    b.Property<short>("EducationalInstituteAccessibilityEnum")
                        .HasColumnType("smallint");

                    b.Property<double>("EducationalInstituteDistance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("FaceLiveAndLivelihoodChallanges")
                        .HasColumnType("boolean");

                    b.Property<short>("FamilyNeedsDeciderGender")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("FcvVcfAddedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FoodCrisisMonth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short?>("FoodyPersonInFoodCrisis")
                        .HasColumnType("smallint");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<short>("ForestDependencyEnum")
                        .HasColumnType("smallint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<short>("ForestMngmtEffectivenessEnum")
                        .HasColumnType("smallint");

                    b.Property<short>("ForestMngmtSatisfactionEnum")
                        .HasColumnType("smallint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ForestVillageName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ForestVillageNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("GrandTotalAnnualPhysicalIncome")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalAssetsCost")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalBusinessIncome")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalEnergyUsesMonthly")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalGrossMarginAgriculture")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalHouseholdExpenditure")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalImmovableAnnualReturn")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalLandArea")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalLandOccupancy")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalLivestockCost")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalNetIncomeAgriculture")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalOtherIncome")
                        .HasColumnType("double precision");

                    b.Property<double>("GrandTotalWildResourceIncome")
                        .HasColumnType("double precision");

                    b.Property<double>("GrantsFromGob")
                        .HasColumnType("double precision");

                    b.Property<double>("GrantsFromNGO")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasEducationalInstituteNearby")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasLlfmInterest")
                        .HasColumnType("boolean");

                    b.Property<short?>("HeadOfHouseholdGender")
                        .HasColumnType("smallint");

                    b.Property<string>("HeadOfHouseholdName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HeadOfHouseholdNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("HouseShareInSavings")
                        .HasColumnType("double precision");

                    b.Property<short?>("HouseholdFoodCondition")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsHearedAboutCfm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParticipatedInCfm")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPermanentSameAsPresent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProblemToAccessDrinkingWater")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProblemToAccessEducation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProblemToAccessHealthService")
                        .HasColumnType("boolean");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<short>("MorePaymentGetterGender")
                        .HasColumnType("smallint");

                    b.Property<string>("NameOfTheEnumerator")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("NearestDrinkingWaterDistance")
                        .HasColumnType("double precision");

                    b.Property<string>("NearestGrowthCenter")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("NearestGrowthCenterDistance")
                        .HasColumnType("double precision");

                    b.Property<double>("NearestHealthServiceDistance")
                        .HasColumnType("double precision");

                    b.Property<string>("NearestHealthServiceLocation")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<int>("NoOfFemaleInsideCountry")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfFemaleOutsideCountry")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfMaleInsideCountry")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfMaleOutsideCountry")
                        .HasColumnType("integer");

                    b.Property<string>("NotesImage")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NotesImageUrl")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("OfficeBearerGender")
                        .HasColumnType("smallint");

                    b.Property<double>("OtherFinanceAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("OtherFinanceName")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("PermanentDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PermanentDivisionId")
                        .HasColumnType("bigint");

                    b.Property<string>("PermanentPostOfficeName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentPostOfficeNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentUnion")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentUnionBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("PermanentUnionNewId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PermanentUpazillaId")
                        .HasColumnType("bigint");

                    b.Property<string>("PermanentVillageName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentVillageNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<double>("PersonalSavingsOfAllMembers")
                        .HasColumnType("double precision");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PotentialSkillName1")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PotentialSkillName2")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PotentialSkillName3")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PotentialSkillsRemarks")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PotentialSpecialSkill")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("PresentDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("PresentDivisionId")
                        .HasColumnType("bigint");

                    b.Property<string>("PresentPostOfficeName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PresentPostOfficeNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PresentUnion")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("PresentUnionNewId")
                        .HasColumnType("bigint");

                    b.Property<long>("PresentUpazillaId")
                        .HasColumnType("bigint");

                    b.Property<string>("PresentVillageName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PresentVillageNameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("ProductiveAssetsOwnerGender")
                        .HasColumnType("smallint");

                    b.Property<double>("SaleOfProducts")
                        .HasColumnType("double precision");

                    b.Property<short>("SanitationFacilitiesEnum")
                        .HasColumnType("smallint");

                    b.Property<double>("SentIncomeOfFemaleInYearInsideCountry")
                        .HasColumnType("double precision");

                    b.Property<double>("SentIncomeOfFemaleInYearOutsideCountry")
                        .HasColumnType("double precision");

                    b.Property<double>("SentIncomeOfMaleInYearInsideCountry")
                        .HasColumnType("double precision");

                    b.Property<double>("SentIncomeOfMaleInYearOutsideCountry")
                        .HasColumnType("double precision");

                    b.Property<string>("Simserial")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SourceofDrySeasonWaterEnumList")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SourceofDrySeasonWaterTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SourceofWetSeasonWaterEnumList")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SourceofWetSeasonWaterTxt")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subscriberid")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("SurveyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<bool>("WillCfmImproveForestMngmnt")
                        .HasColumnType("boolean");

                    b.Property<bool>("WillCfmImproveWellBeing")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryApproveStatusById");

                    b.HasIndex("BeneficiaryEthnicityId");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("BeneficiaryNid");

                    b.HasIndex("CipId")
                        .IsUnique();

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("PermanentDistrictId");

                    b.HasIndex("PermanentDivisionId");

                    b.HasIndex("PermanentUnionNewId");

                    b.HasIndex("PermanentUpazillaId");

                    b.HasIndex("PresentDistrictId");

                    b.HasIndex("PresentDivisionId");

                    b.HasIndex("PresentUnionNewId");

                    b.HasIndex("PresentUpazillaId");

                    b.ToTable("Surveys", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.SurveyDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentNameURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyDocuments", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.SurveyIncident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Decision")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Incident")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("MonthNo")
                        .HasColumnType("integer");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<int>("SurveyIncidentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyIncidents", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.VulnerabilitySituation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("EventName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HowDidRecover")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double?>("MonetaryLoss")
                        .HasColumnType("double precision");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("VulnerabilitySituationTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("VulnerabilitySituationTypeTxt")
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("VulnerabilitySituationTypeId");

                    b.ToTable("VulnerabilitySituations", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.VulnerabilitySituationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("VulnerabilitySituationTypes", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.SavingsAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("AmountLimit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FcvId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("SavingsAccount", "BSA");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.SavingsAmountInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentFileUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<long?>("SavingsAccountId")
                        .HasColumnType("bigint");

                    b.Property<double?>("SavingsAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("SavingsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SavingsAccountId");

                    b.ToTable("SavingsAmountInformation", "BSA");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.WithdrawAmountInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DfoRemark")
                        .HasColumnType("text");

                    b.Property<long?>("DfoStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentFileUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<long?>("SavingsAccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<double?>("WithdrawAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("WithdrawDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SavingsAccountId");

                    b.ToTable("WithdrawAmountInformation", "BSA");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTraining", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CommunityTrainingTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("EventTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("Location")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LocationBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalFemale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalParticipants")
                        .HasColumnType("integer");

                    b.Property<string>("TrainerName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TrainingDuration")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<long?>("TrainingOrganizerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrainingTitle")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TrainingTitleBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CommunityTrainingTypeId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("TrainingOrganizerId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("CommunityTrainings", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CommunityTrainingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CommunityTrainingId");

                    b.ToTable("CommunityTrainingFiles", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MemberAddress")
                        .HasColumnType("varchar(800)");

                    b.Property<int>("MemberAge")
                        .HasColumnType("integer");

                    b.Property<int>("MemberGender")
                        .HasColumnType("integer");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MemberNid")
                        .HasColumnType("text");

                    b.Property<string>("MemberPhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("CommunityTrainingMembers", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingParticipentsMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CommunityTrainingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommunityTrainingMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ParticipentType")
                        .HasColumnType("integer");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CommunityTrainingId");

                    b.HasIndex("CommunityTrainingMemberId");

                    b.HasIndex("SurveyId");

                    b.ToTable("CommunityTrainingParticipentsMaps", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("CommunityTrainingTypes", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTraining", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentalTrainingTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("EventTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FinancialYearId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("Location")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LocationBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalFemale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMembers")
                        .HasColumnType("integer");

                    b.Property<string>("TrainerName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TrainingDuration")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<long>("TrainingOrganizerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrainingTitle")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TrainingTitleBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentalTrainingTypeId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("TrainingOrganizerId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("DepartmentalTrainings", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartmentalTrainingId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentalTrainingId");

                    b.ToTable("DepartmentalTrainingFiles", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("EthnicityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MemberAddress")
                        .HasColumnType("text");

                    b.Property<string>("MemberDesignation")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MemberEmail")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("MemberGender")
                        .HasColumnType("integer");

                    b.Property<string>("MemberNID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MemberOrganization")
                        .HasColumnType("varchar(800)");

                    b.Property<string>("MemberPhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("EthnicityId");

                    b.ToTable("DepartmentalTrainingMembers", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingParticipentsMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartmentalTrainingId")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartmentalTrainingMemberId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentalTrainingId");

                    b.HasIndex("DepartmentalTrainingMemberId");

                    b.ToTable("DepartmentalTrainingParticipentsMaps", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("DepartmentalTrainingTypes", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.EventType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasTrainingType")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("EventTypes", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.TrainingOrganizer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("TrainingOrganizers", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.CipManagement.CipTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApprovalStatus")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("text");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.Property<long>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("CipTeam");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.CipManagement.CipTeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CipId")
                        .HasColumnType("bigint");

                    b.Property<long>("CipTeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DesignetionName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OtherCommitteeMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CipId");

                    b.HasIndex("CipTeamId");

                    b.HasIndex("OtherCommitteeMemberId");

                    b.ToTable("CipTeamMember");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeDesignationsConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CommitteesConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DesignationName")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CommitteesConfigurationId");

                    b.ToTable("CommitteeDesignationsConfiguration", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeManagement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AccountOpeningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<long?>("ApprovalStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("BranchName")
                        .HasColumnType("text");

                    b.Property<long?>("CommitteeApprovalBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CommitteeApprovalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CommitteeApprovalStatus")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommitteeDesignationsConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CommitteeEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CommitteeFormDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CommitteeTypeConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<int>("CommitteeTypeId")
                        .HasColumnType("integer");

                    b.Property<long?>("CommitteesConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsInActiveCommittee")
                        .HasColumnType("boolean");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameOfBankAC")
                        .HasColumnType("text");

                    b.Property<long>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int?>("SubCommitteeTypeId")
                        .HasColumnType("integer");

                    b.Property<long>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CommitteeDesignationsConfigurationId");

                    b.HasIndex("CommitteeTypeConfigurationId");

                    b.HasIndex("CommitteesConfigurationId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("CommitteeManagement", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeManagementMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CommitteeDesignationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommitteeDesignationsConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommitteeManagementId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("OtherCommitteeMemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CommitteeDesignationId");

                    b.HasIndex("CommitteeDesignationsConfigurationId");

                    b.HasIndex("CommitteeManagementId");

                    b.HasIndex("OtherCommitteeMemberId");

                    b.HasIndex("SurveyId");

                    b.ToTable("CommitteeManagementMember", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeTypeConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommitteeTypeName")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("FcvOrVcfTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("CommitteeTypeConfiguration", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteesConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CommitteeName")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("CommitteeTypeConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CommitteeTypeConfigurationId");

                    b.ToTable("CommitteesConfiguration", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.OtherCommitteeMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(600)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EthnicityId")
                        .HasColumnType("bigint");

                    b.Property<string>("FatherOrSpouse")
                        .HasColumnType("text");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("NID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("OtherCommitteeMembers", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CategoryName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Category", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ColorName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Color", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.CommitteeDesignation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CommitteeType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<int?>("SubCommitteeType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("CommitteeDesignation", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("District", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DivisionName");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DivisionNameBangla");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Division", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("EndYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("FinancialYears", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UpazillaId");

                    b.ToTable("Union", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Upazilla", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.InternalLoan.InternalLoanInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApprovalStatus")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<int>("LDFCount")
                        .HasColumnType("integer");

                    b.Property<int>("MaximumRepaymentMonth")
                        .HasColumnType("integer");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<double>("SecurityChargePercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("ServiceChargePercentage")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalAllocatedLoanAmount")
                        .HasColumnType("double precision");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("InternalLoanInformations", "InternalLoan");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.InternalLoan.InternalLoanInformationFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<long?>("InternalLoanInformationId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("InternalLoanInformationId");

                    b.ToTable("InternalLoanInformationFiles", "InternalLoan");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.InternalLoan.RepaymentInternalLoan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("InternalLoanInformationId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPaymentCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPaymentCompletedLate")
                        .HasColumnType("boolean");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PaymentCompletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("RepaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RepaymentEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RepaymentSerial")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RepaymentStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("InternalLoanInformationId");

                    b.ToTable("RepaymentInternalLoans", "InternalLoan");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.LabourDatabase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CodeNo")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EthnicityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OtherLabourMemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("OtherLabourMemberId")
                        .IsUnique();

                    b.HasIndex("SurveyId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("LabourDatabases", "Labour");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.LabourDatabaseFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long>("LabourDatabaseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("LabourDatabaseId");

                    b.ToTable("LabourDatabaseFiles", "Labour");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.LabourWork", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FormDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long>("LabourDatabaseId")
                        .HasColumnType("bigint");

                    b.Property<double>("ManDays")
                        .HasColumnType("double precision");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("PaymentAmountPerDay")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("WorkType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LabourDatabaseId");

                    b.ToTable("LabourWorks", "Labour");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.OtherLabourMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EthnicityId")
                        .HasColumnType("bigint");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MotherName")
                        .HasColumnType("text");

                    b.Property<string>("NID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpouseName")
                        .HasColumnType("text");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("OtherLabourMembers", "Labour");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MeetingTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("MeetingTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalFemale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMembers")
                        .HasColumnType("integer");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("Venue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("MeetingTypeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("Meetings", "Meeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingFiles", "Meeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MemberAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MemberAge")
                        .HasColumnType("integer");

                    b.Property<int>("MemberGender")
                        .HasColumnType("integer");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MemberPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("MeetingMembers", "Meeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingParticipantsMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MeetingMemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ParticipentType")
                        .HasColumnType("integer");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("MeetingMemberId");

                    b.HasIndex("SurveyId");

                    b.ToTable("MeetingParticipantsMaps", "Capacity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("MeetingTypes", "Meeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint");

                    b.Property<int>("MenueOrder")
                        .HasColumnType("int")
                        .HasColumnName("MenueOrder");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleIcon")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ModuleIcon");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ModuleName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Module", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.NecessaryLinkManagement.NecessaryLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("LinkTitleBn")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LinkTitleEn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("SiteLink")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("NecessaryLink", "NecessaryLinkManagement");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Patrolling.OtherPatrollingMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(600)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EthnicityId")
                        .HasColumnType("bigint");

                    b.Property<string>("FatherOrSpouse")
                        .HasColumnType("text");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("NID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("OtherPatrollingMember", "Patrolling");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Patrolling.PatrollingPaymentInformetion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("AmountOfHonoraryAllowance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OtherPatrollingMemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParticipentName")
                        .HasColumnType("text");

                    b.Property<long?>("PatrollingScheduleInformetionId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("OtherPatrollingMemberId");

                    b.HasIndex("PatrollingScheduleInformetionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("PatrollingPaymentInformetion", "Patrolling");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Patrolling.PatrollingScheduleInformetion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AllocatedAmountMonth")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("FcvId")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OtherPatrollingMemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("PatrollingArea")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PatrollingDescription")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PatrollingPlanningFile")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("OtherPatrollingMemberId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("PatrollingScheduleInformetion", "Patrolling");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingScheduling", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AllocatedAmountMonth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("FcvId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<string>("PatrollingArea")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatrollingDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalFemale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalParticipants")
                        .HasColumnType("integer");

                    b.Property<long>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NgoId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("PatrollingSchedulings", "PatrollingScheduling");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingSchedulingFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("PatrollingSchedulingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PatrollingSchedulingId");

                    b.ToTable("PatrollingSchedulingFiles", "PatrollingScheduling");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingSchedulingMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MemberAddress")
                        .HasColumnType("varchar(800)");

                    b.Property<int>("MemberAge")
                        .HasColumnType("integer");

                    b.Property<int>("MemberGender")
                        .HasColumnType("integer");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MemberPhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("PatrollingSchedulingMembers", "PatrollingScheduling");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingSchedulingParticipentsMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("AmountOfHonoraryAllowance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("GenderEnumId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ParticipentName")
                        .HasColumnType("text");

                    b.Property<int>("ParticipentType")
                        .HasColumnType("integer");

                    b.Property<long>("PatrollingSchedulingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatrollingSchedulingMemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PatrollingSchedulingId");

                    b.HasIndex("PatrollingSchedulingMemberId");

                    b.HasIndex("SurveyId");

                    b.ToTable("PatrollingSchedulingParticipentsMaps", "PatrollingScheduling");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionHeaderSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccesslistId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModuleEnumId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccesslistId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("PermissionHeaderSettings", "PermissionSettings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionRowSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionHeaderSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionHeaderSettingsId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("PermissionRowSettings", "PermissionSettings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PmsGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupDescription")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("GroupDescription");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("GroupName");

                    b.Property<byte>("GroupStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("GroupStatus");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint")
                        .HasColumnName("IsVisible");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("PmsGroup", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.ConcernedOfficial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DesignationId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MobileNo")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.ToTable("ConcernedOfficials", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.ConcernedOfficialMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConcernedOfficialId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NursaryInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ConcernedOfficialId");

                    b.HasIndex("NewRaisedPlantationId");

                    b.HasIndex("NursaryInformationId");

                    b.ToTable("ConcernedOfficialMaps", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.CostInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("CostAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CostDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CostTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CostTypeId");

                    b.HasIndex("NewRaisedPlantationId");

                    b.ToTable("CostInformations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.CostInformationFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CostInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CostInformationId");

                    b.ToTable("CostInformationFiles", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.CostType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LabelNameBn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("CostTypes", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.CuttingPlantation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("FinancialYearId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<int>("MarkedFuelWood")
                        .HasColumnType("integer");

                    b.Property<long?>("MarkedFuelWoodUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("MarkedPole")
                        .HasColumnType("integer");

                    b.Property<long?>("MarkedPoleUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("MarkedTimber")
                        .HasColumnType("integer");

                    b.Property<long?>("MarkedTimberUnitId")
                        .HasColumnType("bigint");

                    b.Property<double>("MarkingCost")
                        .HasColumnType("double precision");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProducedFuelWood")
                        .HasColumnType("integer");

                    b.Property<long?>("ProducedFuelWoodUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProducedPole")
                        .HasColumnType("integer");

                    b.Property<long?>("ProducedPoleUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProducedTimber")
                        .HasColumnType("integer");

                    b.Property<long?>("ProducedTimberUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("RotationNo")
                        .HasColumnType("integer");

                    b.Property<string>("StandingTreeMarkingListUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalNumberOfLots")
                        .HasColumnType("integer");

                    b.Property<int>("TotalTreeMarked")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("MarkedFuelWoodUnitId");

                    b.HasIndex("MarkedPoleUnitId");

                    b.HasIndex("MarkedTimberUnitId");

                    b.HasIndex("NewRaisedPlantationId");

                    b.HasIndex("ProducedFuelWoodUnitId");

                    b.HasIndex("ProducedPoleUnitId");

                    b.HasIndex("ProducedTimberUnitId");

                    b.ToTable("CuttingPlantations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.DistributedToBeneficiary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("DepositedRevenueAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ShareDistributionId")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialForestryBeneficiaryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ShareDistributionId");

                    b.HasIndex("SocialForestryBeneficiaryId");

                    b.ToTable("DistributedToBeneficiarys", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.DistributionFundType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("DistributionFundTypes", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.DistributionPercentage", b =>
                {
                    b.Property<long>("DistributionFundTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlantationTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("Percentage")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("DistributionFundTypeId", "PlantationTypeId");

                    b.HasIndex("PlantationTypeId");

                    b.ToTable("DistributionPercentages", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.LotWiseSellingInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContractorAddress")
                        .HasColumnType("text");

                    b.Property<string>("ContractorMobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContractorNID")
                        .HasColumnType("text");

                    b.Property<string>("ContractorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CuttingOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CuttingPlantationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("LotNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LotWiseFuelWood")
                        .HasColumnType("integer");

                    b.Property<long?>("LotWiseFuelWoodUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("LotWisePole")
                        .HasColumnType("integer");

                    b.Property<long?>("LotWisePoleUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("LotWiseTimber")
                        .HasColumnType("integer");

                    b.Property<long?>("LotWiseTimberUnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("SaleValueOfLot")
                        .HasColumnType("double precision");

                    b.Property<double>("SaleValueOfTaxPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("SaleValueOfVatPercentage")
                        .HasColumnType("double precision");

                    b.Property<string>("TenderNotificationInformation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CuttingPlantationId");

                    b.HasIndex("LotWiseFuelWoodUnitId");

                    b.HasIndex("LotWisePoleUnitId");

                    b.HasIndex("LotWiseTimberUnitId");

                    b.ToTable("LotWiseSellingInformations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.Realization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CuttingPlantationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long>("LotWiseSellingInformationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RealizedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("SaleValueOfLot")
                        .HasColumnType("double precision");

                    b.Property<double>("SaleValueOfTaxPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("SaleValueOfVatPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalSaleValue")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CuttingPlantationId");

                    b.HasIndex("LotWiseSellingInformationId");

                    b.ToTable("Realizations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.ShareDistribution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CuttingPlantationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DepositDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepositFile")
                        .HasColumnType("text");

                    b.Property<double>("DepositedRevenueAmount")
                        .HasColumnType("double precision");

                    b.Property<long>("DistributionFundTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<double>("SharePercentage")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CuttingPlantationId");

                    b.HasIndex("DistributionFundTypeId");

                    b.ToTable("ShareDistributions", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.InspectionDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("InspectionFile")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SocialForestryDesignationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SocialForestryDesignationId");

                    b.ToTable("InspectionDetailss", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.InspectionDetailsMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("InspectionDetailsId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NurseryInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("InspectionDetailsId");

                    b.HasIndex("NewRaisedPlantationId");

                    b.HasIndex("NurseryInformationId");

                    b.ToTable("InspectionDetailsMaps", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.LaborCostType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("LaborCostTypes", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.LaborInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("LaborCostDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LaborCostTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("TotalFemale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMale")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("LaborCostTypeId");

                    b.HasIndex("NewRaisedPlantationId");

                    b.ToTable("LaborInformations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.LaborInformationFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long>("LaborInformationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("LaborInformationId");

                    b.ToTable("LaborInformationFiles", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.LandOwningAgency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("LandOwningAgencys", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AdvisoryCommitteeFormed")
                        .HasColumnType("boolean");

                    b.Property<string>("AdvisoryCommitteeFormedFile")
                        .HasColumnType("text");

                    b.Property<string>("ClimateOfPlantationSite")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentRotationNo")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<int>("ExpectedCuttingYear")
                        .HasColumnType("integer");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("FundManagementSubCommitteeFormed")
                        .HasColumnType("boolean");

                    b.Property<string>("FundManagementSubCommitteeFormedFile")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("LandOwningAgencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationWithCoordinate")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MonitoringReportUrl")
                        .HasColumnType("text");

                    b.Property<string>("MoujaAndJLNumber")
                        .HasColumnType("text");

                    b.Property<string>("NaturalTreeSpecies")
                        .HasColumnType("text");

                    b.Property<string>("NurseryImage")
                        .HasColumnType("text");

                    b.Property<string>("PlantationArea")
                        .HasColumnType("text");

                    b.Property<string>("PlantationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlantationImage")
                        .HasColumnType("text");

                    b.Property<string>("PlantationJournalUploadUrl")
                        .HasColumnType("text");

                    b.Property<long?>("PlantationTopographyId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlantationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlantationUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlantedFinancialYearId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlotNo")
                        .HasColumnType("text");

                    b.Property<long>("ProjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("RotationInYear")
                        .HasColumnType("integer");

                    b.Property<int>("RotationNo")
                        .HasColumnType("integer");

                    b.Property<string>("SanctionNo")
                        .HasColumnType("text");

                    b.Property<string>("SheetNo")
                        .HasColumnType("text");

                    b.Property<bool>("SocialForestryManagementCommitteeFormed")
                        .HasColumnType("boolean");

                    b.Property<string>("SocialForestryManagementCommitteeFormedFile")
                        .HasColumnType("text");

                    b.Property<long?>("SocialForestryNgoId")
                        .HasColumnType("bigint");

                    b.Property<string>("SoilType")
                        .HasColumnType("text");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("ZoneOrAreaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("LandOwningAgencyId");

                    b.HasIndex("PlantationTopographyId");

                    b.HasIndex("PlantationTypeId");

                    b.HasIndex("PlantationUnitId");

                    b.HasIndex("PlantedFinancialYearId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("SocialForestryNgoId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.HasIndex("ZoneOrAreaId");

                    b.ToTable("NewRaisedPlantations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryDistribution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryNid")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DistributedTo")
                        .HasColumnType("text");

                    b.Property<DateTime>("DistributionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MobileNo")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberOfSeedlingToBeDistributed")
                        .HasColumnType("bigint");

                    b.Property<long>("NurseryInformationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NurseryRaisedSeedlingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("NurseryInformationId");

                    b.HasIndex("NurseryRaisedSeedlingId");

                    b.ToTable("NurseryDistributions", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FinancialYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocationLat")
                        .HasColumnType("text");

                    b.Property<string>("LocationLon")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfSeedlingsPerBed")
                        .HasColumnType("integer");

                    b.Property<string>("NursaryImageFilePath")
                        .HasColumnType("text");

                    b.Property<string>("NursaryJournalFilePath")
                        .HasColumnType("text");

                    b.Property<string>("NursaryLayoutFilePath")
                        .HasColumnType("text");

                    b.Property<string>("NurseryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("NurseryRaisingSectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("NurseryTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("SanctionNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeedlingRaisingTargetNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TotalNumberOfBed")
                        .HasColumnType("integer");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("NurseryRaisingSectorId");

                    b.HasIndex("NurseryTypeId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("NurseryInformations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryRaisedSeedlingInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NurseryInformationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeedlingRaised")
                        .HasColumnType("integer");

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("NurseryInformationId");

                    b.ToTable("NurseryRaisedSeedlingInformations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryRaisingSector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<int?>("RaisingSectorType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("NurseryRaisingSectors", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("NurseryTypes", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.NurseryCostInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("CostAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CostDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CostTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NurseryInformationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CostTypeId");

                    b.HasIndex("NurseryInformationId");

                    b.ToTable("NurseryCostInformations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.NurseryCostInformationFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NurseryCostInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("NurseryCostInformationId");

                    b.ToTable("NurseryCostInformationFiles", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationCauseOfDamage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("PlantationCauseOfDamages", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationDamageInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionTaken")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DamageDescription")
                        .HasColumnType("text");

                    b.Property<string>("DamageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfOccurrence")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("InspectedByAuthority")
                        .HasColumnType("boolean");

                    b.Property<string>("InspectionReportUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlantationCauseOfDamageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("NewRaisedPlantationId");

                    b.HasIndex("PlantationCauseOfDamageId");

                    b.ToTable("PlantationDamageInformations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("NewRaisedPlantationId");

                    b.ToTable("PlantationFiles", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationPlant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfSeedlingPlanted")
                        .HasColumnType("integer");

                    b.Property<long>("NurseryInformationId")
                        .HasColumnType("bigint");

                    b.Property<long>("NurseryRaisedSeedlingInformationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("NewRaisedPlantationId");

                    b.HasIndex("NurseryInformationId");

                    b.HasIndex("NurseryRaisedSeedlingInformationId");

                    b.ToTable("PlantationPlants", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationSocialForestryBeneficiaryMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AgreementUploadFileUrl")
                        .HasColumnType("text");

                    b.Property<bool>("CheckIfPBSAIsSigned")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PBSAGroupId")
                        .HasColumnType("text");

                    b.Property<long>("SocialForestryBeneficiaryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("NewRaisedPlantationId");

                    b.HasIndex("SocialForestryBeneficiaryId");

                    b.ToTable("PlantationSocialForestryBeneficiaryMaps", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationTopography", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("PlantationTopographys", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("PlantationTypes", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("PlantationUnits", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.ProjectType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.Replantation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AdvisoryCommitteeFormed")
                        .HasColumnType("boolean");

                    b.Property<string>("AdvisoryCommitteeFormedFile")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("FinancialYearId")
                        .HasColumnType("bigint");

                    b.Property<bool>("FundManagementSubCommitteeFormed")
                        .HasColumnType("boolean");

                    b.Property<string>("FundManagementSubCommitteeFormedFile")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("MonitoringReportUrl")
                        .HasColumnType("text");

                    b.Property<long>("NewRaisedPlantationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlantationArea")
                        .HasColumnType("text");

                    b.Property<string>("PlantationJournalUploadUrl")
                        .HasColumnType("text");

                    b.Property<long>("PlantationTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("RotationNo")
                        .HasColumnType("integer");

                    b.Property<int>("RotationYears")
                        .HasColumnType("integer");

                    b.Property<bool>("SocialForestryManagementCommitteeFormed")
                        .HasColumnType("boolean");

                    b.Property<string>("SocialForestryManagementCommitteeFormedFile")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("NewRaisedPlantationId");

                    b.HasIndex("PlantationTypeId");

                    b.ToTable("Replantations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationCostInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("CostAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CostDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CostTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ReplantationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CostTypeId");

                    b.HasIndex("ReplantationId");

                    b.ToTable("ReplantationCostInfos", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationDamageInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionTaken")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DamageDescription")
                        .HasColumnType("text");

                    b.Property<string>("DamageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfOccurrence")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("InspectedByAuthority")
                        .HasColumnType("boolean");

                    b.Property<string>("InspectionReportUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("PlantationCauseOfDamageId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReplantationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PlantationCauseOfDamageId");

                    b.HasIndex("ReplantationId");

                    b.ToTable("ReplantationDamageInfo", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationInspectionMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("InspectionDetailsId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ReplantationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("InspectionDetailsId");

                    b.HasIndex("ReplantationId");

                    b.ToTable("ReplantationInspectionMaps", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationLaborInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("LaborCostDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LaborCostTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<long>("ReplantationId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalFemale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMale")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("LaborCostTypeId");

                    b.HasIndex("ReplantationId");

                    b.ToTable("ReplantationLaborInfos", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationNurseryInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfSeedlingPlanted")
                        .HasColumnType("integer");

                    b.Property<long>("NurseryInformationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NurseryRaisedSeedlingInformationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ReplantationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("NurseryInformationId");

                    b.HasIndex("NurseryRaisedSeedlingInformationId");

                    b.HasIndex("ReplantationId");

                    b.ToTable("ReplantationNurseryInfos", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationSocialForestryBeneficiaryMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AgreementUploadFileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CheckIfPBSAIsSigned")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("PBSAGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ReplantationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialForestryBeneficiaryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ReplantationId");

                    b.HasIndex("SocialForestryBeneficiaryId");

                    b.ToTable("ReplantationSocialForestryBeneficiaryMaps", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryBeneficiary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("EthnicityId")
                        .HasColumnType("bigint");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("NID")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("EthnicityId");

                    b.ToTable("SocialForestryBeneficiarys", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryDesignation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("SocialForestryDesignations", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryNgo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("SocialForestryNgos", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.ZoneOrArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("ZoneOrAreas", "SocialForestry");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.MeetingTypeForSocialForestryMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("MeetingTypeForSocialForestryMeetings", "SocialForestryMeeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MeetingOrganizer")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MeetingTitle")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MeetingTitleBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("MeetingTypeForSocialForestryMeetingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NgoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalFemale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMembers")
                        .HasColumnType("integer");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("Venue")
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("MeetingTypeForSocialForestryMeetingId");

                    b.HasIndex("NgoId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("SocialForestryMeetings", "SocialForestryMeeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeetingFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialForestryMeetingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SocialForestryMeetingId");

                    b.ToTable("SocialForestryMeetingFiles", "SocialForestryMeeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeetingMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("EthnicityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MemberAddress")
                        .HasColumnType("text");

                    b.Property<string>("MemberDesignation")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("MemberGender")
                        .HasColumnType("integer");

                    b.Property<string>("MemberNID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MemberOrganization")
                        .HasColumnType("varchar(800)");

                    b.Property<string>("MemberPhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlantationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlantationName")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("EthnicityId");

                    b.ToTable("SocialForestryMeetingMembers", "SocialForestryMeeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeetingParticipentsMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialForestryMeetingId")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialForestryMeetingMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SocialForestryMeetingId");

                    b.HasIndex("SocialForestryMeetingMemberId")
                        .HasDatabaseName("IX_SocialForestryMeetingParticipentsMaps_SocialForestryMeetin~1");

                    b.ToTable("SocialForestryMeetingParticipentsMaps", "SocialForestryMeeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.EventTypeForTraining", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("EventTypeForTrainings", "SocialForestryTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.FinancialYearForTraining", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("EndYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("FinancialYearForTrainings", "SocialForestryTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTraining", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("EventTypeForTrainingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FinancialYearForTrainingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("Location")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LocationBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalFemale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMale")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMembers")
                        .HasColumnType("integer");

                    b.Property<string>("TrainerAddress")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("TrainerDesignationForTrainingId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrainerName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TrainingDuration")
                        .HasColumnType("varchar(200)");

                    b.Property<long?>("TrainingOrganizerForTrainingId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrainingTitle")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TrainingTitleBn")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EventTypeForTrainingId");

                    b.HasIndex("FinancialYearForTrainingId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("TrainerDesignationForTrainingId");

                    b.HasIndex("TrainingOrganizerForTrainingId");

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.ToTable("SocialForestryTrainings", "SocialForestryTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTrainingFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialForestryTrainingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SocialForestryTrainingId");

                    b.ToTable("SocialForestryTrainingFiles", "SocialForestryTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTrainingMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("EthnicityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MemberAddress")
                        .HasColumnType("text");

                    b.Property<string>("MemberDesignation")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("MemberGender")
                        .HasColumnType("integer");

                    b.Property<string>("MemberNID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MemberOrganization")
                        .HasColumnType("varchar(800)");

                    b.Property<string>("MemberPhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlantationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlantationName")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("EthnicityId");

                    b.ToTable("SocialForestryTrainingMembers", "SocialForestryTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTrainingParticipentsMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialForestryTrainingId")
                        .HasColumnType("bigint");

                    b.Property<long>("SocialForestryTrainingMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SocialForestryTrainingId");

                    b.HasIndex("SocialForestryTrainingMemberId")
                        .HasDatabaseName("IX_SocialForestryTrainingParticipentsMaps_SocialForestryTrain~1");

                    b.ToTable("SocialForestryTrainingParticipentsMaps", "SocialForestryTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.TrainerDesignationForTraining", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("TrainerDesignationForTrainings", "SocialForestryTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.TrainingOrganizerForTraining", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameBn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("TrainingOrganizerForTrainings", "SocialForestryTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Students.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("Batch")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RollNumber")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("Semester")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Students", "Student");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SubmissionHistoryForMobile.BeneficiarySubmissionHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AIGBasicInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<long?>("InternalLoanInformationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("SavingsAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AIGBasicInformationId");

                    b.HasIndex("InternalLoanInformationId");

                    b.HasIndex("SavingsAccountId");

                    b.HasIndex("SurveyId");

                    b.ToTable("BeneficiarySubmissionHistory", "SubmissionHistoryForMobile");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Trades.Trade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Trade", "BEN");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.TransactionMangement.ExpenseDetailsForCDF", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentFileURL")
                        .HasColumnType("text");

                    b.Property<double>("ExpenseAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExpenseScheme")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("ExpenseDetailsForCDFs", "TRANSACTION");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.TransactionMangement.FundType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsCdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("FundTypes", "TRANSACTION");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.TransactionMangement.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpenseMonth")
                        .HasColumnType("integer");

                    b.Property<string>("ExpenseYear")
                        .HasColumnType("text");

                    b.Property<long>("FinancialYearId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FundTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("TotalExpense")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("FundTypeId");

                    b.ToTable("Transactions", "TRANSACTION");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.TransactionMangement.TransactionFiles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionFiles", "TRANSACTION");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<long?>("ForestBeatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestCircleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestFcvVcfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ForestRangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RoleName");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpazillaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserEmail");

                    b.Property<string>("UserGroup")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserGroup");

                    b.Property<long?>("UserGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UserName");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UserPassword");

                    b.Property<string>("UserPhone")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserPhone");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int")
                        .HasColumnName("UserStatus");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountsId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ForestBeatId");

                    b.HasIndex("ForestCircleId");

                    b.HasIndex("ForestDivisionId");

                    b.HasIndex("ForestFcvVcfId");

                    b.HasIndex("ForestRangeId");

                    b.HasIndex("SurveyId")
                        .IsUnique();

                    b.HasIndex("UnionId");

                    b.HasIndex("UpazillaId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("User", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserEntitys.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.ToTable("RefreshToken", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserEntitys.UserRolePermissionMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePermissionMap", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("GroupName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<byte>("IsDefault")
                        .HasColumnType("smallint")
                        .HasColumnName("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsUsed")
                        .HasColumnType("smallint")
                        .HasColumnName("IsUsed");

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint")
                        .HasColumnName("IsVisible");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleActionNames")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ModuleActionNames");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("UserGroup", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessList")
                        .IsRequired()
                        .HasColumnType("varchar(900)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RoleName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("UserRoles", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.AIGBasicInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.Account", "Account")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("AccountId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.IndividualLDFInfoForm", "IndividualLDFInfoForm")
                        .WithOne("AIGBasicInformation")
                        .HasForeignKey("PTSL.GENERIC.Common.Entity.AIG.AIGBasicInformation", "IndividualLDFInfoFormId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngo")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("NgoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Trades.Trade", "Trade")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("TradeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("AIGBasicInformations")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("IndividualLDFInfoForm");

                    b.Navigation("Ngo");

                    b.Navigation("Survey");

                    b.Navigation("Trade");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.FirstSixtyPercentageLDF", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.AIGBasicInformation", "AIGBasicInformation")
                        .WithOne("FirstSixtyPercentageLDF")
                        .HasForeignKey("PTSL.GENERIC.Common.Entity.AIG.FirstSixtyPercentageLDF", "AIGBasicInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AIGBasicInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.GroupLDFInfoForm", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngo")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("NgoId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "SubmittedBy")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("SubmittedById");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("GroupLDFInfoForms")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Ngo");

                    b.Navigation("SubmittedBy");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.GroupLDFInfoFormMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.GroupLDFInfoForm", "GroupLDFInfoForm")
                        .WithMany("GroupLDFInfoFormMembers")
                        .HasForeignKey("GroupLDFInfoFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.IndividualLDFInfoForm", "IndividualLDFInfoForm")
                        .WithMany("GroupLDFInfoFormMembers")
                        .HasForeignKey("IndividualLDFInfoFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupLDFInfoForm");

                    b.Navigation("IndividualLDFInfoForm");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.IndividualLDFInfoForm", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngo")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("NgoId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("IndividualLDFInfoForms")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Ngo");

                    b.Navigation("Survey");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.LDFProgress", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.AIGBasicInformation", "AIGBasicInformation")
                        .WithMany("LDFProgresses")
                        .HasForeignKey("AIGBasicInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDF", "RepaymentLDF")
                        .WithOne("LDFProgress")
                        .HasForeignKey("PTSL.GENERIC.Common.Entity.AIG.LDFProgress", "RepaymentLDFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AIGBasicInformation");

                    b.Navigation("RepaymentLDF");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDF", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.AIGBasicInformation", "AIGBasicInformation")
                        .WithMany("RepaymentLDFs")
                        .HasForeignKey("AIGBasicInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.FirstSixtyPercentageLDF", "FirstSixtyPercentageLDF")
                        .WithMany("RepaymentLDFs")
                        .HasForeignKey("FirstSixtyPercentageLDFId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.SecondFourtyPercentageLDF", "SecondFourtyPercentageLDF")
                        .WithMany("RepaymentLDFs")
                        .HasForeignKey("SecondFourtyPercentageLDFId");

                    b.Navigation("AIGBasicInformation");

                    b.Navigation("FirstSixtyPercentageLDF");

                    b.Navigation("SecondFourtyPercentageLDF");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDFFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDF", "RepaymentLDF")
                        .WithMany("RepaymentLDFFiles")
                        .HasForeignKey("RepaymentLDFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepaymentLDF");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDFHistory", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "EventUser")
                        .WithMany("RepaymentLDFHistories")
                        .HasForeignKey("EventUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDF", "RepaymentLDF")
                        .WithMany("RepaymentLDFHistories")
                        .HasForeignKey("RepaymentLDFId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EventUser");

                    b.Navigation("RepaymentLDF");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.SecondFourtyPercentageLDF", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.AIGBasicInformation", "AIGBasicInformation")
                        .WithOne("SecondFourtyPercentageLDF")
                        .HasForeignKey("PTSL.GENERIC.Common.Entity.AIG.SecondFourtyPercentageLDF", "AIGBasicInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AIGBasicInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Accesslist", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Module", "Module")
                        .WithMany("AccessList")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.Account", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteesConfiguration", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeTypeConfiguration", "CommitteeType")
                        .WithMany()
                        .HasForeignKey("CommitteeTypeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany()
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany()
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany()
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany()
                        .HasForeignKey("ForestFcvVcfId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany()
                        .HasForeignKey("ForestRangeId");

                    b.Navigation("Committee");

                    b.Navigation("CommitteeType");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountDeposit", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.Account", "Account")
                        .WithMany("AccountDeposits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", "FinancialYear")
                        .WithMany("AccountDeposits")
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.SourceOfFund", "SourceOfFund")
                        .WithMany("AccountDeposits")
                        .HasForeignKey("SourceOfFundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "TransactionBy")
                        .WithMany("AccountDeposits")
                        .HasForeignKey("TransactionById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FinancialYear");

                    b.Navigation("SourceOfFund");

                    b.Navigation("TransactionBy");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransfer", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", "FinancialYear")
                        .WithMany("AccountTransfers")
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.Account", "FromAccount")
                        .WithMany("FromAccountTransfers")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.SourceOfFund", null)
                        .WithMany("AccountTransfers")
                        .HasForeignKey("SourceOfFundId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.Account", "ToAccount")
                        .WithMany("ToAccountTransfers")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "TransferRequestedBy")
                        .WithMany("AccountTransfers")
                        .HasForeignKey("TransferRequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialYear");

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");

                    b.Navigation("TransferRequestedBy");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransferApproval", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "ReceiverRole")
                        .WithMany()
                        .HasForeignKey("ReceiverRoleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransfer", "Row")
                        .WithMany("AccountTransferApprovals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "SenderRole")
                        .WithMany()
                        .HasForeignKey("SenderRoleId");

                    b.Navigation("Receiver");

                    b.Navigation("ReceiverRole");

                    b.Navigation("Row");

                    b.Navigation("Sender");

                    b.Navigation("SenderRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransferDetails", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransfer", "AccountTransfer")
                        .WithMany("AccountTransferDetails")
                        .HasForeignKey("AccountTransferId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.SourceOfFund", "SourceOfFund")
                        .WithMany("AccountTransferDetails")
                        .HasForeignKey("SourceOfFundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountTransfer");

                    b.Navigation("SourceOfFund");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransferLog", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransferDetails", "AccountTransferDetails")
                        .WithMany("AccountTransferLogs")
                        .HasForeignKey("AccountTransferDetailsId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransfer", "AccountTransfer")
                        .WithMany("AccountTransferLogs")
                        .HasForeignKey("AccountTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "TransferStatusChangedBy")
                        .WithMany("AccountTransferLogs")
                        .HasForeignKey("TransferStatusChangedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountTransfer");

                    b.Navigation("AccountTransferDetails");

                    b.Navigation("TransferStatusChangedBy");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountsUserTagLog", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.Account", "Accounts")
                        .WithMany("AccountsUserTagLogs")
                        .HasForeignKey("AccountsId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Users")
                        .WithMany("AccountsUserTagLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("Accounts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ApprovalLog.ApprovalLogForCfm", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "BeneficiaryProfile")
                        .WithMany("ApprovalLogForCfms")
                        .HasForeignKey("BeneficiaryProfileId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Cip", "Cip")
                        .WithMany("ApprovalLogForCfms")
                        .HasForeignKey("CipId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.CipManagement.CipTeam", "CipTeam")
                        .WithMany("ApprovalLogForCfms")
                        .HasForeignKey("CipTeamId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeManagement", "CommitteeManagement")
                        .WithMany("ApprovalLogForCfms")
                        .HasForeignKey("CommitteeManagementId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.InternalLoan.InternalLoanInformation", "InternalLoanInformation")
                        .WithMany("ApprovalLogForCfms")
                        .HasForeignKey("InternalLoanInformationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Receiver")
                        .WithMany("ApprovalLogForCfmsReceiver")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "ReceiverRole")
                        .WithMany("ApprovalLogForCfmsReceiverRole")
                        .HasForeignKey("ReceiverRoleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Sender")
                        .WithMany("ApprovalLogForCfmsSender")
                        .HasForeignKey("SenderId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "SenderRole")
                        .WithMany("ApprovalLogForCfmsSenderRole")
                        .HasForeignKey("SenderRoleId");

                    b.Navigation("BeneficiaryProfile");

                    b.Navigation("Cip");

                    b.Navigation("CipTeam");

                    b.Navigation("CommitteeManagement");

                    b.Navigation("InternalLoanInformation");

                    b.Navigation("Receiver");

                    b.Navigation("ReceiverRole");

                    b.Navigation("Sender");

                    b.Navigation("SenderRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchive", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("RegistrationArchives")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("RegistrationArchives")
                        .HasForeignKey("DivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("RegistrationArchives")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("RegistrationArchives")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("RegistrationArchives")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("RegistrationArchives")
                        .HasForeignKey("ForestFcvVcfId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("RegistrationArchives")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("RegistrationArchives")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("RegistrationArchives")
                        .HasForeignKey("UpazillaId");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchiveFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchive", "RegistrationArchive")
                        .WithMany("RegistrationArchiveFiles")
                        .HasForeignKey("RegistrationArchiveId");

                    b.Navigation("RegistrationArchive");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.BankAccountsInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.Account", "Account")
                        .WithMany("BankAccountsInformations")
                        .HasForeignKey("AccountId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "User")
                        .WithMany("BankAccountsInformations")
                        .HasForeignKey("UserId");

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.AnnualHouseholdExpenditure", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ExpenditureType", "ExpenditureType")
                        .WithMany("AnnualHouseholdExpenditures")
                        .HasForeignKey("ExpenditureTypeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("AnnualHouseholdExpenditures")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenditureType");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Asset", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("Assets")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetType");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.BFDAssociationHouseholdMembersMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.BFDAssociation", "BFDAssociation")
                        .WithMany("BFDAssociationHouseholdMembers")
                        .HasForeignKey("BFDAssociationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.HouseholdMember", "HouseholdMember")
                        .WithMany("BFDAssociationHouseholdMembers")
                        .HasForeignKey("HouseholdMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BFDAssociation");

                    b.Navigation("HouseholdMember");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Business", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.BusinessIncomeSourceType", "BusinessIncomeSourceType")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessIncomeSourceTypeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("Businesses")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessIncomeSourceType");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Cip", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("Cips")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("Cips")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", "Ethnicity")
                        .WithMany("Cips")
                        .HasForeignKey("EthnicityId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("Cips")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("Cips")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("Cips")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("Cips")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("Cips")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("Cips")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("Cips")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("Ethnicity");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.CipFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Cip", "Cip")
                        .WithMany("CipFiles")
                        .HasForeignKey("CipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cip");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.DisabilityTypeHouseholdMembersMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.DisabilityType", "DisabilityType")
                        .WithMany("DisabilityTypeHouseholdMembers")
                        .HasForeignKey("DisabilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.HouseholdMember", "HouseholdMember")
                        .WithMany("DisabilityTypeHouseholdMembers")
                        .HasForeignKey("HouseholdMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisabilityType");

                    b.Navigation("HouseholdMember");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.EnergyUse", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.EnergyType", "EnergyType")
                        .WithMany("EnergyUses")
                        .HasForeignKey("EnergyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("EnergyUses")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnergyType");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ExistingSkill", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("ExistingSkills")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.FoodSecurityItem", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.FoodItem", "FoodItem")
                        .WithMany("FoodSecurityItems")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("FoodSecurityItems")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("ForestBeats")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForestRange");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("ForestDivisions")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForestCircle");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("ForestFcvVcfs")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForestBeat");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("ForestRanges")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForestDivision");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.GrossMarginIncomeAndCostStatus", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("GrossMarginIncomeAndCostStatuses")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.HouseholdMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Occupation", "MainOccupation")
                        .WithMany("HouseholdMembersMain")
                        .HasForeignKey("MainOccupationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.RelationWithHeadHouseHoldType", "RelationWithHeadHouseHoldType")
                        .WithMany("HouseholdMembers")
                        .HasForeignKey("RelationWithHeadHouseHoldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.SafetyNet", "SafetyNetType")
                        .WithMany("HouseholdMembers")
                        .HasForeignKey("SafetyNetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Occupation", "SecondaryOccupation")
                        .WithMany("HouseholdMembersSecondary")
                        .HasForeignKey("SecondaryOccupationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("HouseholdMembers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainOccupation");

                    b.Navigation("RelationWithHeadHouseHoldType");

                    b.Navigation("SafetyNetType");

                    b.Navigation("SecondaryOccupation");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ImmovableAsset", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ImmovableAssetType", "ImmovableAssetType")
                        .WithMany("ImmovableAssets")
                        .HasForeignKey("ImmovableAssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("ImmovableAssets")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImmovableAssetType");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.LandOccupancy", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("LandOccupancy")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.LiveStock", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.LiveStockType", "LiveStockType")
                        .WithMany("LiveStocks")
                        .HasForeignKey("LiveStockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("LiveStocks")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LiveStockType");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ManualPhysicalWork", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ManualIncomeSourceType", "ManualIncomeSourceType")
                        .WithMany("ManualPhysicalWorks")
                        .HasForeignKey("ManualIncomeSourceTypeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("ManualPhysicalWorks")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManualIncomeSourceType");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Marketing", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("Marketings")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("Marketings")
                        .HasForeignKey("DivisionId");

                    b.Navigation("District");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.NaturalResourcesIncomeAndCostStatus", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.NaturalIncomeSourceType", "NaturalIncomeSourceType")
                        .WithMany("NaturalResourcesIncomeAndCostStatuses")
                        .HasForeignKey("NaturalIncomeSourceTypeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("NaturalResourcesIncomeAndCostStatuses")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NaturalIncomeSourceType");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.OtherIncomeSource", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.OtherIncomeSourceType", "OtherIncomeSourceType")
                        .WithMany("OtherIncomeSources")
                        .HasForeignKey("OtherIncomeSourceTypeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("OtherIncomeSources")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OtherIncomeSourceType");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "BeneficiaryApproveStatusBy")
                        .WithMany("Surveys")
                        .HasForeignKey("BeneficiaryApproveStatusById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", "BeneficiaryEthnicity")
                        .WithMany("Surveys")
                        .HasForeignKey("BeneficiaryEthnicityId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Cip", "Cip")
                        .WithOne("Survey")
                        .HasForeignKey("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "CipId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("Surveys")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("Surveys")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("Surveys")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("Surveys")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("Surveys")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngo")
                        .WithMany("Surveys")
                        .HasForeignKey("NgoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "PermanentDistrict")
                        .WithMany("SurveyPermanentDistricts")
                        .HasForeignKey("PermanentDistrictId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "PermanentDivision")
                        .WithMany("SurveyPermanentDivisions")
                        .HasForeignKey("PermanentDivisionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "PermanentUnionNew")
                        .WithMany("SurveyPermanentUnions")
                        .HasForeignKey("PermanentUnionNewId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "PermanentUpazilla")
                        .WithMany("SurveyPermanentUpazillas")
                        .HasForeignKey("PermanentUpazillaId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "PresentDistrict")
                        .WithMany("SurveyPresentDistricts")
                        .HasForeignKey("PresentDistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "PresentDivision")
                        .WithMany("SurveyPresentDivisions")
                        .HasForeignKey("PresentDivisionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "PresentUnionNew")
                        .WithMany("SurveyPresentUnions")
                        .HasForeignKey("PresentUnionNewId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "PresentUpazilla")
                        .WithMany("SurveyPresentUpazillas")
                        .HasForeignKey("PresentUpazillaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BeneficiaryApproveStatusBy");

                    b.Navigation("BeneficiaryEthnicity");

                    b.Navigation("Cip");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Ngo");

                    b.Navigation("PermanentDistrict");

                    b.Navigation("PermanentDivision");

                    b.Navigation("PermanentUnionNew");

                    b.Navigation("PermanentUpazilla");

                    b.Navigation("PresentDistrict");

                    b.Navigation("PresentDivision");

                    b.Navigation("PresentUnionNew");

                    b.Navigation("PresentUpazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.SurveyDocument", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("SurveyDocuments")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.SurveyIncident", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("SurveyIncidents")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.VulnerabilitySituation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("VulnerabilitySituations")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.VulnerabilitySituationType", "VulnerabilitySituationType")
                        .WithMany("VulnerabilitySituations")
                        .HasForeignKey("VulnerabilitySituationTypeId");

                    b.Navigation("Survey");

                    b.Navigation("VulnerabilitySituationType");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.SavingsAccount", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("DivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngos")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("NgoId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("SurveyId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("SavingsAccounts")
                        .HasForeignKey("UpazillaId");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestRange");

                    b.Navigation("Ngos");

                    b.Navigation("Survey");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.SavingsAmountInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.SavingsAccount", "SavingsAccounts")
                        .WithMany("SavingsAmountInformations")
                        .HasForeignKey("SavingsAccountId");

                    b.Navigation("SavingsAccounts");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.WithdrawAmountInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.SavingsAccount", "SavingsAccounts")
                        .WithMany("WithdrawAmountInformations")
                        .HasForeignKey("SavingsAccountId");

                    b.Navigation("SavingsAccounts");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTraining", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingType", "CommunityTrainingType")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("CommunityTrainingTypeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.EventType", "EventType")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.TrainingOrganizer", "TrainingOrganizer")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("TrainingOrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("CommunityTrainings")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityTrainingType");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("EventType");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("TrainingOrganizer");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.CommunityTraining", "CommunityTraining")
                        .WithMany("CommunityTrainingFiles")
                        .HasForeignKey("CommunityTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingParticipentsMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.CommunityTraining", "CommunityTraining")
                        .WithMany("CommunityTrainingParticipentsMaps")
                        .HasForeignKey("CommunityTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingMember", "CommunityTrainingMember")
                        .WithMany("CommunityTrainingParticipentsMaps")
                        .HasForeignKey("CommunityTrainingMemberId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("CommunityTrainingParticipentsMaps")
                        .HasForeignKey("SurveyId");

                    b.Navigation("CommunityTraining");

                    b.Navigation("CommunityTrainingMember");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTraining", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingType", "DepartmentalTrainingType")
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("DepartmentalTrainingTypeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", null)
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", null)
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("DivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.EventType", "EventType")
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", "FinancialYear")
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", null)
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", null)
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", null)
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", null)
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("ForestFcvVcfId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", null)
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.TrainingOrganizer", "TrainingOrganizer")
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("TrainingOrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", null)
                        .WithMany("DepartmentalTrainings")
                        .HasForeignKey("UpazillaId");

                    b.Navigation("DepartmentalTrainingType");

                    b.Navigation("EventType");

                    b.Navigation("FinancialYear");

                    b.Navigation("TrainingOrganizer");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTraining", "DepartmentalTraining")
                        .WithMany("DepartmentalTrainingFiles")
                        .HasForeignKey("DepartmentalTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentalTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", "Ethnicity")
                        .WithMany("DepartmentalTrainingMember")
                        .HasForeignKey("EthnicityId");

                    b.Navigation("Ethnicity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingParticipentsMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTraining", "DepartmentalTraining")
                        .WithMany("DepartmentalTrainingParticipentsMaps")
                        .HasForeignKey("DepartmentalTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingMember", "DepartmentalTrainingMember")
                        .WithMany("DepartmentalTrainingParticipentsMaps")
                        .HasForeignKey("DepartmentalTrainingMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentalTraining");

                    b.Navigation("DepartmentalTrainingMember");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.CipManagement.CipTeam", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("CipTeams")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("CipTeams")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("CipTeams")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("CipTeams")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("CipTeams")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("CipTeams")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("CipTeams")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngo")
                        .WithMany("CipTeams")
                        .HasForeignKey("NgoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("CipTeams")
                        .HasForeignKey("UnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("CipTeams")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Ngo");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.CipManagement.CipTeamMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Cip", "Cip")
                        .WithMany("CipTeamMembers")
                        .HasForeignKey("CipId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.CipManagement.CipTeam", "CipTeam")
                        .WithMany("CipTeamMembers")
                        .HasForeignKey("CipTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.OtherCommitteeMember", "OtherCommitteeMember")
                        .WithMany("CipTeamMembers")
                        .HasForeignKey("OtherCommitteeMemberId");

                    b.Navigation("Cip");

                    b.Navigation("CipTeam");

                    b.Navigation("OtherCommitteeMember");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeDesignationsConfiguration", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteesConfiguration", "CommitteesConfiguration")
                        .WithMany("CommitteeDesignationsConfigurations")
                        .HasForeignKey("CommitteesConfigurationId");

                    b.Navigation("CommitteesConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeManagement", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeDesignationsConfiguration", "CommitteeDesignationsConfiguration")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("CommitteeDesignationsConfigurationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeTypeConfiguration", "CommitteeTypeConfiguration")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("CommitteeTypeConfigurationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteesConfiguration", "CommitteesConfiguration")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("CommitteesConfigurationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("DivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("ForestFcvVcfId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngo")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("NgoId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("CommitteeManagements")
                        .HasForeignKey("UpazillaId");

                    b.Navigation("CommitteeDesignationsConfiguration");

                    b.Navigation("CommitteeTypeConfiguration");

                    b.Navigation("CommitteesConfiguration");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Ngo");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeManagementMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.CommitteeDesignation", "CommitteeDesignation")
                        .WithMany("CommitteeManagementMembers")
                        .HasForeignKey("CommitteeDesignationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeDesignationsConfiguration", "CommitteeDesignationsConfiguration")
                        .WithMany("CommitteeManagementMembers")
                        .HasForeignKey("CommitteeDesignationsConfigurationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeManagement", "CommitteeManagement")
                        .WithMany("CommitteeManagementMembers")
                        .HasForeignKey("CommitteeManagementId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.OtherCommitteeMember", "OtherCommitteeMember")
                        .WithMany("CommitteeManagementMembers")
                        .HasForeignKey("OtherCommitteeMemberId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("CommitteeManagementMembers")
                        .HasForeignKey("SurveyId");

                    b.Navigation("CommitteeDesignation");

                    b.Navigation("CommitteeDesignationsConfiguration");

                    b.Navigation("CommitteeManagement");

                    b.Navigation("OtherCommitteeMember");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteesConfiguration", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeTypeConfiguration", "CommitteeTypeConfiguration")
                        .WithMany("CommitteesConfigurations")
                        .HasForeignKey("CommitteeTypeConfigurationId");

                    b.Navigation("CommitteeTypeConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.OtherCommitteeMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", "Ethnicity")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("EthnicityId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("OtherCommitteeMembers")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("Ethnicity");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.District", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("Districts")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("Unions")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("Upazillas")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.InternalLoan.InternalLoanInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngo")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("NgoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("InternalLoanInformations")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Ngo");

                    b.Navigation("Survey");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.InternalLoan.InternalLoanInformationFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.InternalLoan.InternalLoanInformation", "InternalLoanInformation")
                        .WithMany("InternalLoanInformationFiles")
                        .HasForeignKey("InternalLoanInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternalLoanInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.InternalLoan.RepaymentInternalLoan", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.InternalLoan.InternalLoanInformation", "InternalLoanInformations")
                        .WithMany("RepaymentInternalLoans")
                        .HasForeignKey("InternalLoanInformationId");

                    b.Navigation("InternalLoanInformations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.LabourDatabase", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", null)
                        .WithMany("LabourDatabases")
                        .HasForeignKey("EthnicityId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("ForestFcvVcfId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Labour.OtherLabourMember", "OtherLabourMember")
                        .WithOne("LabourDatabases")
                        .HasForeignKey("PTSL.GENERIC.Common.Entity.Labour.LabourDatabase", "OtherLabourMemberId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("SurveyId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("LabourDatabases")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("OtherLabourMember");

                    b.Navigation("Survey");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.LabourDatabaseFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Labour.LabourDatabase", "LabourDatabase")
                        .WithMany("LabourDatabaseFiles")
                        .HasForeignKey("LabourDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabourDatabase");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.LabourWork", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Labour.LabourDatabase", "LabourDatabase")
                        .WithMany("LabourWorks")
                        .HasForeignKey("LabourDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabourDatabase");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.OtherLabourMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", null)
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", null)
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("DivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", "Ethnicity")
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("EthnicityId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", null)
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", null)
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", null)
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", null)
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("ForestFcvVcfId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", null)
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", null)
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", null)
                        .WithMany("OtherLabourMembers")
                        .HasForeignKey("UpazillaId");

                    b.Navigation("Ethnicity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.Meeting", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("Meetings")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("Meetings")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("Meetings")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("Meetings")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("Meetings")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("Meetings")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("Meetings")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingType", "MeetingType")
                        .WithMany("Meetings")
                        .HasForeignKey("MeetingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngo")
                        .WithMany("Meetings")
                        .HasForeignKey("NgoId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("Meetings")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("Meetings")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("MeetingType");

                    b.Navigation("Ngo");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.MeetingManagement.Meeting", "Meeting")
                        .WithMany("MeetingFiles")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingParticipantsMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.MeetingManagement.Meeting", "Meeting")
                        .WithMany("MeetingParticipantsMaps")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingMember", "MeetingMember")
                        .WithMany("MeetingParticipantsMaps")
                        .HasForeignKey("MeetingMemberId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("MeetingParticipantsMaps")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Meeting");

                    b.Navigation("MeetingMember");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Patrolling.OtherPatrollingMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("OtherPatrollingMembers")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("OtherPatrollingMembers")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", "Ethnicity")
                        .WithMany("OtherPatrollingMembers")
                        .HasForeignKey("EthnicityId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("OtherPatrollingMembers")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("OtherPatrollingMembers")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("OtherPatrollingMembers")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("OtherPatrollingMembers")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("OtherPatrollingMembers")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("OtherPatrollingMembers")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("Ethnicity");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Patrolling.PatrollingPaymentInformetion", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Patrolling.OtherPatrollingMember", "OtherPatrollingMembers")
                        .WithMany("PatrollingPaymentInformetions")
                        .HasForeignKey("OtherPatrollingMemberId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Patrolling.PatrollingScheduleInformetion", "PatrollingScheduleInformetions")
                        .WithMany("PatrollingPaymentInformetions")
                        .HasForeignKey("PatrollingScheduleInformetionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Surveys")
                        .WithMany("PatrollingPaymentInformetions")
                        .HasForeignKey("SurveyId");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Patrolling.PatrollingScheduleInformetion", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("DivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngos")
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("NgoId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Patrolling.OtherPatrollingMember", null)
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("OtherPatrollingMemberId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("PatrollingScheduleInformetions")
                        .HasForeignKey("UpazillaId");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestRange");

                    b.Navigation("Ngos");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingScheduling", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("ForestFcvVcfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngos")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("NgoId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("PatrollingSchedulings")
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Ngos");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingSchedulingFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingScheduling", "PatrollingScheduling")
                        .WithMany("PatrollingSchedulingFiles")
                        .HasForeignKey("PatrollingSchedulingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatrollingScheduling");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingSchedulingParticipentsMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingScheduling", "PatrollingScheduling")
                        .WithMany("PatrollingSchedulingParticipentsMaps")
                        .HasForeignKey("PatrollingSchedulingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingSchedulingMember", "PatrollingSchedulingMember")
                        .WithMany("PatrollingSchedulingParticipentsMaps")
                        .HasForeignKey("PatrollingSchedulingMemberId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("PatrollingSchedulingParticipentsMaps")
                        .HasForeignKey("SurveyId");

                    b.Navigation("PatrollingScheduling");

                    b.Navigation("PatrollingSchedulingMember");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionHeaderSettings", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Accesslist", "Accesslist")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("AccesslistId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("ForestFcvVcfId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "User")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("UserId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "UserRole")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Accesslist");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionRowSettings", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionHeaderSettings", "PermissionHeaderSettings")
                        .WithMany("PermissionRowSettings")
                        .HasForeignKey("PermissionHeaderSettingsId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "User")
                        .WithMany("PermissionRowSettings")
                        .HasForeignKey("UserId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "UserRole")
                        .WithMany("PermissionRowSettings")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.ConcernedOfficial", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryDesignation", "Designation")
                        .WithMany("ConcernedOfficials")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.ConcernedOfficialMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.ConcernedOfficial", "ConcernedOfficial")
                        .WithMany("ConcernedOfficialMap")
                        .HasForeignKey("ConcernedOfficialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("ConcernedOfficialMap")
                        .HasForeignKey("NewRaisedPlantationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", "NursaryInformation")
                        .WithMany("ConcernedOfficialMap")
                        .HasForeignKey("NursaryInformationId");

                    b.Navigation("ConcernedOfficial");

                    b.Navigation("NewRaisedPlantation");

                    b.Navigation("NursaryInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.CostInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.CostType", "CostType")
                        .WithMany("CostInformation")
                        .HasForeignKey("CostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("CostInformation")
                        .HasForeignKey("NewRaisedPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostType");

                    b.Navigation("NewRaisedPlantation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.CostInformationFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.CostInformation", "CostInformation")
                        .WithMany("CostInformationFiles")
                        .HasForeignKey("CostInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.CuttingPlantation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", "FinancialYear")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "MarkedFuelWoodUnit")
                        .WithMany()
                        .HasForeignKey("MarkedFuelWoodUnitId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "MarkedPoleUnit")
                        .WithMany()
                        .HasForeignKey("MarkedPoleUnitId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "MarkedTimberUnit")
                        .WithMany()
                        .HasForeignKey("MarkedTimberUnitId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("CuttingPlantations")
                        .HasForeignKey("NewRaisedPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "ProducedFuelWoodUnit")
                        .WithMany()
                        .HasForeignKey("ProducedFuelWoodUnitId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "ProducedPoleUnit")
                        .WithMany()
                        .HasForeignKey("ProducedPoleUnitId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "ProducedTimberUnit")
                        .WithMany()
                        .HasForeignKey("ProducedTimberUnitId");

                    b.Navigation("FinancialYear");

                    b.Navigation("MarkedFuelWoodUnit");

                    b.Navigation("MarkedPoleUnit");

                    b.Navigation("MarkedTimberUnit");

                    b.Navigation("NewRaisedPlantation");

                    b.Navigation("ProducedFuelWoodUnit");

                    b.Navigation("ProducedPoleUnit");

                    b.Navigation("ProducedTimberUnit");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.DistributedToBeneficiary", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.ShareDistribution", "ShareDistribution")
                        .WithMany("DistributedToBeneficiary")
                        .HasForeignKey("ShareDistributionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryBeneficiary", "SocialForestryBeneficiary")
                        .WithMany("DistributedToBeneficiary")
                        .HasForeignKey("SocialForestryBeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShareDistribution");

                    b.Navigation("SocialForestryBeneficiary");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.DistributionPercentage", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.DistributionFundType", "DistributionFundType")
                        .WithMany("DistributionPercentages")
                        .HasForeignKey("DistributionFundTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationType", "PlantationType")
                        .WithMany("DistributionPercentages")
                        .HasForeignKey("PlantationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistributionFundType");

                    b.Navigation("PlantationType");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.LotWiseSellingInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.CuttingPlantation", "CuttingPlantation")
                        .WithMany("LotWiseSellingInformation")
                        .HasForeignKey("CuttingPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "LotWiseFuelWoodUnit")
                        .WithMany()
                        .HasForeignKey("LotWiseFuelWoodUnitId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "LotWisePoleUnit")
                        .WithMany()
                        .HasForeignKey("LotWisePoleUnitId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "LotWiseTimberUnit")
                        .WithMany()
                        .HasForeignKey("LotWiseTimberUnitId");

                    b.Navigation("CuttingPlantation");

                    b.Navigation("LotWiseFuelWoodUnit");

                    b.Navigation("LotWisePoleUnit");

                    b.Navigation("LotWiseTimberUnit");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.Realization", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.CuttingPlantation", "CuttingPlantation")
                        .WithMany("Realizations")
                        .HasForeignKey("CuttingPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.LotWiseSellingInformation", "LotWiseSellingInformation")
                        .WithMany("Realizations")
                        .HasForeignKey("LotWiseSellingInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuttingPlantation");

                    b.Navigation("LotWiseSellingInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.ShareDistribution", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.CuttingPlantation", "CuttingPlantation")
                        .WithMany("ShareDistributions")
                        .HasForeignKey("CuttingPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.DistributionFundType", "DistributionFundType")
                        .WithMany()
                        .HasForeignKey("DistributionFundTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuttingPlantation");

                    b.Navigation("DistributionFundType");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.InspectionDetails", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryDesignation", "SocialForestryDesignation")
                        .WithMany()
                        .HasForeignKey("SocialForestryDesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialForestryDesignation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.InspectionDetailsMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.InspectionDetails", "InspectionDetails")
                        .WithMany("InspectionDetailsMap")
                        .HasForeignKey("InspectionDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("InspectionDetailsMap")
                        .HasForeignKey("NewRaisedPlantationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", "NurseryInformation")
                        .WithMany("InspectionDetailsMap")
                        .HasForeignKey("NurseryInformationId");

                    b.Navigation("InspectionDetails");

                    b.Navigation("NewRaisedPlantation");

                    b.Navigation("NurseryInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.LaborInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.LaborCostType", "LaborCostType")
                        .WithMany("LaborInformation")
                        .HasForeignKey("LaborCostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("LaborInformation")
                        .HasForeignKey("NewRaisedPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaborCostType");

                    b.Navigation("NewRaisedPlantation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.LaborInformationFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.LaborInformation", "LaborInformation")
                        .WithMany("LaborInformationFiles")
                        .HasForeignKey("LaborInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaborInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany()
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany()
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany()
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany()
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.LandOwningAgency", "LandOwningAgency")
                        .WithMany("NewRaisedPlantations")
                        .HasForeignKey("LandOwningAgencyId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationTopography", "PlantationTopography")
                        .WithMany("NewRaisedPlantations")
                        .HasForeignKey("PlantationTopographyId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationType", "PlantationType")
                        .WithMany("NewRaisedPlantations")
                        .HasForeignKey("PlantationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", "PlantationUnit")
                        .WithMany("NewRaisedPlantations")
                        .HasForeignKey("PlantationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", "PlantedFinancialYear")
                        .WithMany("NewRaisedPlantations")
                        .HasForeignKey("PlantedFinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.ProjectType", "ProjectType")
                        .WithMany("NewRaisedPlantations")
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryNgo", "SocialForestryNgo")
                        .WithMany("NewRaisedPlantations")
                        .HasForeignKey("SocialForestryNgoId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany()
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany()
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.ZoneOrArea", "ZoneOrArea")
                        .WithMany("NewRaisedPlantations")
                        .HasForeignKey("ZoneOrAreaId");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestRange");

                    b.Navigation("LandOwningAgency");

                    b.Navigation("PlantationTopography");

                    b.Navigation("PlantationType");

                    b.Navigation("PlantationUnit");

                    b.Navigation("PlantedFinancialYear");

                    b.Navigation("ProjectType");

                    b.Navigation("SocialForestryNgo");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");

                    b.Navigation("ZoneOrArea");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryDistribution", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", "NurseryInformation")
                        .WithMany("NurseryDistributionDetails")
                        .HasForeignKey("NurseryInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryRaisedSeedlingInformation", "NurseryRaisedSeedling")
                        .WithMany()
                        .HasForeignKey("NurseryRaisedSeedlingId");

                    b.Navigation("NurseryInformation");

                    b.Navigation("NurseryRaisedSeedling");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", "FinancialYear")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany()
                        .HasForeignKey("ForestBeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany()
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany()
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany()
                        .HasForeignKey("ForestRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryRaisingSector", "NurseryRaisingSector")
                        .WithMany("NurseryInformation")
                        .HasForeignKey("NurseryRaisingSectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryType", "NurseryType")
                        .WithMany("NurseryInformation")
                        .HasForeignKey("NurseryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany()
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany()
                        .HasForeignKey("UpazillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("FinancialYear");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestRange");

                    b.Navigation("NurseryRaisingSector");

                    b.Navigation("NurseryType");

                    b.Navigation("ProjectType");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryRaisedSeedlingInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", "NurseryInformation")
                        .WithMany("NurseryRaisedSeedlingInformation")
                        .HasForeignKey("NurseryInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NurseryInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.NurseryCostInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.CostType", "CostType")
                        .WithMany()
                        .HasForeignKey("CostTypeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", "NurseryInformation")
                        .WithMany("CostInformations")
                        .HasForeignKey("NurseryInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostType");

                    b.Navigation("NurseryInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.NurseryCostInformationFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NurseryCostInformation", "CostInformation")
                        .WithMany("CostInformationFiles")
                        .HasForeignKey("NurseryCostInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationDamageInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("PlantationDamageInformation")
                        .HasForeignKey("NewRaisedPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationCauseOfDamage", "PlantationCauseOfDamage")
                        .WithMany("PlantationDamageInformation")
                        .HasForeignKey("PlantationCauseOfDamageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewRaisedPlantation");

                    b.Navigation("PlantationCauseOfDamage");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("PlantationFiles")
                        .HasForeignKey("NewRaisedPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewRaisedPlantation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationPlant", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("PlantationPlants")
                        .HasForeignKey("NewRaisedPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", "NurseryInformation")
                        .WithMany()
                        .HasForeignKey("NurseryInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryRaisedSeedlingInformation", "NurseryRaisedSeedlingInformation")
                        .WithMany()
                        .HasForeignKey("NurseryRaisedSeedlingInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewRaisedPlantation");

                    b.Navigation("NurseryInformation");

                    b.Navigation("NurseryRaisedSeedlingInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationSocialForestryBeneficiaryMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("PlantationSocialForestryBeneficiaryMaps")
                        .HasForeignKey("NewRaisedPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryBeneficiary", "SocialForestryBeneficiary")
                        .WithMany("PlantationSocialForestryBeneficiaryMaps")
                        .HasForeignKey("SocialForestryBeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewRaisedPlantation");

                    b.Navigation("SocialForestryBeneficiary");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.Replantation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", "FinancialYear")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", "NewRaisedPlantation")
                        .WithMany("Replantations")
                        .HasForeignKey("NewRaisedPlantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationType", "PlantationType")
                        .WithMany()
                        .HasForeignKey("PlantationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialYear");

                    b.Navigation("NewRaisedPlantation");

                    b.Navigation("PlantationType");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationCostInfo", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.CostType", "CostType")
                        .WithMany("ReplantationCostInfos")
                        .HasForeignKey("CostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.Replantation", "Replantation")
                        .WithMany("ReplantationCostInfos")
                        .HasForeignKey("ReplantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostType");

                    b.Navigation("Replantation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationDamageInfo", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationCauseOfDamage", "PlantationCauseOfDamage")
                        .WithMany()
                        .HasForeignKey("PlantationCauseOfDamageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.Replantation", "Replantation")
                        .WithMany("ReplantationDamageInfos")
                        .HasForeignKey("ReplantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantationCauseOfDamage");

                    b.Navigation("Replantation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationInspectionMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.InspectionDetails", "InspectionDetails")
                        .WithMany("ReplantationInspectionMaps")
                        .HasForeignKey("InspectionDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.Replantation", "Replantation")
                        .WithMany("ReplantationInspectionMaps")
                        .HasForeignKey("ReplantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionDetails");

                    b.Navigation("Replantation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationLaborInfo", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.LaborCostType", "LaborCostType")
                        .WithMany()
                        .HasForeignKey("LaborCostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.Replantation", "Replantation")
                        .WithMany("ReplantationLaborInfos")
                        .HasForeignKey("ReplantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaborCostType");

                    b.Navigation("Replantation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationNurseryInfo", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", "NurseryInformation")
                        .WithMany()
                        .HasForeignKey("NurseryInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryRaisedSeedlingInformation", "NurseryRaisedSeedlingInformation")
                        .WithMany()
                        .HasForeignKey("NurseryRaisedSeedlingInformationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.Replantation", "Replantation")
                        .WithMany("ReplantationNurseryInfos")
                        .HasForeignKey("ReplantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NurseryInformation");

                    b.Navigation("NurseryRaisedSeedlingInformation");

                    b.Navigation("Replantation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.ReplantationSocialForestryBeneficiaryMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.Replantation", "Replantation")
                        .WithMany("ReplantationSocialForestryBeneficiaryMaps")
                        .HasForeignKey("ReplantationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryBeneficiary", "SocialForestryBeneficiary")
                        .WithMany("ReplantationSocialForestryBeneficiaryMaps")
                        .HasForeignKey("SocialForestryBeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Replantation");

                    b.Navigation("SocialForestryBeneficiary");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryBeneficiary", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", "Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId");

                    b.Navigation("Ethnicity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeeting", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("DivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.MeetingTypeForSocialForestryMeeting", "MeetingTypeForSocialForestryMeeting")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("MeetingTypeForSocialForestryMeetingId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", "Ngo")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("NgoId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("SocialForestryMeetings")
                        .HasForeignKey("UpazillaId");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestRange");

                    b.Navigation("MeetingTypeForSocialForestryMeeting");

                    b.Navigation("Ngo");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeetingFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeeting", "SocialForestryMeeting")
                        .WithMany("SocialForestryMeetingFiles")
                        .HasForeignKey("SocialForestryMeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialForestryMeeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeetingMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", "Ethnicity")
                        .WithMany("SocialForestryMeetingMember")
                        .HasForeignKey("EthnicityId");

                    b.Navigation("Ethnicity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeetingParticipentsMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeeting", "SocialForestryMeeting")
                        .WithMany("SocialForestryMeetingParticipentsMaps")
                        .HasForeignKey("SocialForestryMeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeetingMember", "SocialForestryMeetingMember")
                        .WithMany("SocialForestryMeetingParticipentsMaps")
                        .HasForeignKey("SocialForestryMeetingMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SocialForestryMeetingParticipentsMaps_SocialForestryMeetin~1");

                    b.Navigation("SocialForestryMeeting");

                    b.Navigation("SocialForestryMeetingMember");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTraining", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("DivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryTraining.EventTypeForTraining", "EventTypeForTraining")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("EventTypeForTrainingId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryTraining.FinancialYearForTraining", "FinancialYearForTraining")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("FinancialYearForTrainingId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryTraining.TrainerDesignationForTraining", "TrainerDesignationForTraining")
                        .WithMany()
                        .HasForeignKey("TrainerDesignationForTrainingId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryTraining.TrainingOrganizerForTraining", "TrainingOrganizerForTraining")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("TrainingOrganizerForTrainingId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("SocialForestryTrainings")
                        .HasForeignKey("UpazillaId");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("EventTypeForTraining");

                    b.Navigation("FinancialYearForTraining");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestRange");

                    b.Navigation("TrainerDesignationForTraining");

                    b.Navigation("TrainingOrganizerForTraining");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTrainingFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTraining", "SocialForestryTraining")
                        .WithMany("SocialForestryTrainingFiles")
                        .HasForeignKey("SocialForestryTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialForestryTraining");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTrainingMember", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", "Ethnicity")
                        .WithMany("SocialForestryTrainingMember")
                        .HasForeignKey("EthnicityId");

                    b.Navigation("Ethnicity");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTrainingParticipentsMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTraining", "SocialForestryTraining")
                        .WithMany("SocialForestryTrainingParticipentsMaps")
                        .HasForeignKey("SocialForestryTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTrainingMember", "SocialForestryTrainingMember")
                        .WithMany("SocialForestryTrainingParticipentsMaps")
                        .HasForeignKey("SocialForestryTrainingMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SocialForestryTrainingParticipentsMaps_SocialForestryTrain~1");

                    b.Navigation("SocialForestryTraining");

                    b.Navigation("SocialForestryTrainingMember");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SubmissionHistoryForMobile.BeneficiarySubmissionHistory", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AIG.AIGBasicInformation", "AIGBasicInformation")
                        .WithMany("BeneficiarySubmissionHistorys")
                        .HasForeignKey("AIGBasicInformationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.InternalLoan.InternalLoanInformation", "InternalLoanInformation")
                        .WithMany("BeneficiarySubmissionHistorys")
                        .HasForeignKey("InternalLoanInformationId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.SavingsAccount", "SavingsAccount")
                        .WithMany("BeneficiarySubmissionHistorys")
                        .HasForeignKey("SavingsAccountId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithMany("BeneficiarySubmissionHistorys")
                        .HasForeignKey("SurveyId");

                    b.Navigation("AIGBasicInformation");

                    b.Navigation("InternalLoanInformation");

                    b.Navigation("SavingsAccount");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.TransactionMangement.ExpenseDetailsForCDF", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.TransactionMangement.Transaction", "Transaction")
                        .WithMany("ExpenseDetailsForCDFs")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.TransactionMangement.Transaction", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", "FinancialYear")
                        .WithMany("Transactions")
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany()
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("Transactions")
                        .HasForeignKey("ForestCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("Transactions")
                        .HasForeignKey("ForestDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany()
                        .HasForeignKey("ForestFcvVcfId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany()
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.TransactionMangement.FundType", "FundType")
                        .WithMany("Transactions")
                        .HasForeignKey("FundTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FinancialYear");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("FundType");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.TransactionMangement.TransactionFiles", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.TransactionMangement.Transaction", "Transaction")
                        .WithMany("TransactionFiles")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.User", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.AccountManagement.Account", "Accounts")
                        .WithMany("Users")
                        .HasForeignKey("AccountsId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.District", "District")
                        .WithMany("Users")
                        .HasForeignKey("DistrictId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", "Division")
                        .WithMany("Users")
                        .HasForeignKey("DivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", "ForestBeat")
                        .WithMany("Users")
                        .HasForeignKey("ForestBeatId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", "ForestCircle")
                        .WithMany("Users")
                        .HasForeignKey("ForestCircleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", "ForestDivision")
                        .WithMany("Users")
                        .HasForeignKey("ForestDivisionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", "ForestFcvVcf")
                        .WithMany("Users")
                        .HasForeignKey("ForestFcvVcfId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", "ForestRange")
                        .WithMany("Users")
                        .HasForeignKey("ForestRangeId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", "Survey")
                        .WithOne("User")
                        .HasForeignKey("PTSL.GENERIC.Common.Entity.User", "SurveyId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", "Union")
                        .WithMany("Users")
                        .HasForeignKey("UnionId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", "Upazilla")
                        .WithMany("Users")
                        .HasForeignKey("UpazillaId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserGroup", null)
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Accounts");

                    b.Navigation("District");

                    b.Navigation("Division");

                    b.Navigation("ForestBeat");

                    b.Navigation("ForestCircle");

                    b.Navigation("ForestDivision");

                    b.Navigation("ForestFcvVcf");

                    b.Navigation("ForestRange");

                    b.Navigation("Survey");

                    b.Navigation("Union");

                    b.Navigation("Upazilla");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserEntitys.UserRolePermissionMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "UserRole")
                        .WithMany("UserRolePermissionMaps")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.AIGBasicInformation", b =>
                {
                    b.Navigation("BeneficiarySubmissionHistorys");

                    b.Navigation("FirstSixtyPercentageLDF");

                    b.Navigation("LDFProgresses");

                    b.Navigation("RepaymentLDFs");

                    b.Navigation("SecondFourtyPercentageLDF");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.FirstSixtyPercentageLDF", b =>
                {
                    b.Navigation("RepaymentLDFs");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.GroupLDFInfoForm", b =>
                {
                    b.Navigation("GroupLDFInfoFormMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.IndividualLDFInfoForm", b =>
                {
                    b.Navigation("AIGBasicInformation");

                    b.Navigation("GroupLDFInfoFormMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.RepaymentLDF", b =>
                {
                    b.Navigation("LDFProgress");

                    b.Navigation("RepaymentLDFFiles");

                    b.Navigation("RepaymentLDFHistories");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AIG.SecondFourtyPercentageLDF", b =>
                {
                    b.Navigation("RepaymentLDFs");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Accesslist", b =>
                {
                    b.Navigation("PermissionHeaderSettings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.Account", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("AccountDeposits");

                    b.Navigation("AccountsUserTagLogs");

                    b.Navigation("BankAccountsInformations");

                    b.Navigation("FromAccountTransfers");

                    b.Navigation("ToAccountTransfers");

                    b.Navigation("Transactions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransfer", b =>
                {
                    b.Navigation("AccountTransferApprovals");

                    b.Navigation("AccountTransferDetails");

                    b.Navigation("AccountTransferLogs");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.AccountTransferDetails", b =>
                {
                    b.Navigation("AccountTransferLogs");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccountManagement.SourceOfFund", b =>
                {
                    b.Navigation("AccountDeposits");

                    b.Navigation("AccountTransferDetails");

                    b.Navigation("AccountTransfers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchive", b =>
                {
                    b.Navigation("RegistrationArchiveFiles");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.AssetType", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.BFDAssociation", b =>
                {
                    b.Navigation("BFDAssociationHouseholdMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.BusinessIncomeSourceType", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Cip", b =>
                {
                    b.Navigation("ApprovalLogForCfms");

                    b.Navigation("CipFiles");

                    b.Navigation("CipTeamMembers");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.DisabilityType", b =>
                {
                    b.Navigation("DisabilityTypeHouseholdMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.EnergyType", b =>
                {
                    b.Navigation("EnergyUses");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Ethnicity", b =>
                {
                    b.Navigation("Cips");

                    b.Navigation("DepartmentalTrainingMember");

                    b.Navigation("LabourDatabases");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("SocialForestryMeetingMember");

                    b.Navigation("SocialForestryTrainingMember");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ExpenditureType", b =>
                {
                    b.Navigation("AnnualHouseholdExpenditures");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.FoodItem", b =>
                {
                    b.Navigation("FoodSecurityItems");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestBeat", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("Cips");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");

                    b.Navigation("ForestFcvVcfs");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("Meetings");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("RegistrationArchives");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SocialForestryMeetings");

                    b.Navigation("SocialForestryTrainings");

                    b.Navigation("Surveys");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestCircle", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("Cips");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");

                    b.Navigation("ForestDivisions");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("Meetings");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("RegistrationArchives");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SocialForestryMeetings");

                    b.Navigation("SocialForestryTrainings");

                    b.Navigation("Surveys");

                    b.Navigation("Transactions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestDivision", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("Cips");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");

                    b.Navigation("ForestRanges");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("Meetings");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("RegistrationArchives");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SocialForestryMeetings");

                    b.Navigation("SocialForestryTrainings");

                    b.Navigation("Surveys");

                    b.Navigation("Transactions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestFcvVcf", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("Cips");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("Meetings");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("RegistrationArchives");

                    b.Navigation("Surveys");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ForestRange", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("Cips");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");

                    b.Navigation("ForestBeats");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("Meetings");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("RegistrationArchives");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SocialForestryMeetings");

                    b.Navigation("SocialForestryTrainings");

                    b.Navigation("Surveys");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.HouseholdMember", b =>
                {
                    b.Navigation("BFDAssociationHouseholdMembers");

                    b.Navigation("DisabilityTypeHouseholdMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ImmovableAssetType", b =>
                {
                    b.Navigation("ImmovableAssets");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.LiveStockType", b =>
                {
                    b.Navigation("LiveStocks");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.ManualIncomeSourceType", b =>
                {
                    b.Navigation("ManualPhysicalWorks");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.NaturalIncomeSourceType", b =>
                {
                    b.Navigation("NaturalResourcesIncomeAndCostStatuses");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Ngo", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("Meetings");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SocialForestryMeetings");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Occupation", b =>
                {
                    b.Navigation("HouseholdMembersMain");

                    b.Navigation("HouseholdMembersSecondary");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.OtherIncomeSourceType", b =>
                {
                    b.Navigation("OtherIncomeSources");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.RelationWithHeadHouseHoldType", b =>
                {
                    b.Navigation("HouseholdMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.SafetyNet", b =>
                {
                    b.Navigation("HouseholdMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.Survey", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("AnnualHouseholdExpenditures");

                    b.Navigation("ApprovalLogForCfms");

                    b.Navigation("Assets");

                    b.Navigation("BeneficiarySubmissionHistorys");

                    b.Navigation("Businesses");

                    b.Navigation("CommitteeManagementMembers");

                    b.Navigation("CommunityTrainingParticipentsMaps");

                    b.Navigation("EnergyUses");

                    b.Navigation("ExistingSkills");

                    b.Navigation("FoodSecurityItems");

                    b.Navigation("GrossMarginIncomeAndCostStatuses");

                    b.Navigation("HouseholdMembers");

                    b.Navigation("ImmovableAssets");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("LandOccupancy");

                    b.Navigation("LiveStocks");

                    b.Navigation("ManualPhysicalWorks");

                    b.Navigation("MeetingParticipantsMaps");

                    b.Navigation("NaturalResourcesIncomeAndCostStatuses");

                    b.Navigation("OtherIncomeSources");

                    b.Navigation("PatrollingPaymentInformetions");

                    b.Navigation("PatrollingSchedulingParticipentsMaps");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SurveyDocuments");

                    b.Navigation("SurveyIncidents");

                    b.Navigation("User");

                    b.Navigation("VulnerabilitySituations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Beneficiary.VulnerabilitySituationType", b =>
                {
                    b.Navigation("VulnerabilitySituations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.BeneficiarySavingsAccount.SavingsAccount", b =>
                {
                    b.Navigation("BeneficiarySubmissionHistorys");

                    b.Navigation("SavingsAmountInformations");

                    b.Navigation("WithdrawAmountInformations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTraining", b =>
                {
                    b.Navigation("CommunityTrainingFiles");

                    b.Navigation("CommunityTrainingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingMember", b =>
                {
                    b.Navigation("CommunityTrainingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.CommunityTrainingType", b =>
                {
                    b.Navigation("CommunityTrainings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTraining", b =>
                {
                    b.Navigation("DepartmentalTrainingFiles");

                    b.Navigation("DepartmentalTrainingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingMember", b =>
                {
                    b.Navigation("DepartmentalTrainingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.DepartmentalTrainingType", b =>
                {
                    b.Navigation("DepartmentalTrainings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.EventType", b =>
                {
                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Capacity.TrainingOrganizer", b =>
                {
                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.CipManagement.CipTeam", b =>
                {
                    b.Navigation("ApprovalLogForCfms");

                    b.Navigation("CipTeamMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeDesignationsConfiguration", b =>
                {
                    b.Navigation("CommitteeManagementMembers");

                    b.Navigation("CommitteeManagements");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeManagement", b =>
                {
                    b.Navigation("ApprovalLogForCfms");

                    b.Navigation("CommitteeManagementMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteeTypeConfiguration", b =>
                {
                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommitteesConfigurations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.CommitteesConfiguration", b =>
                {
                    b.Navigation("CommitteeDesignationsConfigurations");

                    b.Navigation("CommitteeManagements");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ForestManagement.OtherCommitteeMember", b =>
                {
                    b.Navigation("CipTeamMembers");

                    b.Navigation("CommitteeManagementMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.CommitteeDesignation", b =>
                {
                    b.Navigation("CommitteeManagementMembers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.District", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("Cips");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("Marketings");

                    b.Navigation("Meetings");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("RegistrationArchives");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SocialForestryMeetings");

                    b.Navigation("SocialForestryTrainings");

                    b.Navigation("SurveyPermanentDistricts");

                    b.Navigation("SurveyPresentDistricts");

                    b.Navigation("Upazillas");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Division", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("Cips");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");

                    b.Navigation("Districts");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("Marketings");

                    b.Navigation("Meetings");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("RegistrationArchives");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SocialForestryMeetings");

                    b.Navigation("SocialForestryTrainings");

                    b.Navigation("SurveyPermanentDivisions");

                    b.Navigation("SurveyPresentDivisions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.FinancialYear", b =>
                {
                    b.Navigation("AccountDeposits");

                    b.Navigation("AccountTransfers");

                    b.Navigation("DepartmentalTrainings");

                    b.Navigation("NewRaisedPlantations");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Union", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("Cips");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommunityTrainings");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("Meetings");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("RegistrationArchives");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SocialForestryMeetings");

                    b.Navigation("SocialForestryTrainings");

                    b.Navigation("SurveyPermanentUnions");

                    b.Navigation("SurveyPresentUnions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Upazilla", b =>
                {
                    b.Navigation("AIGBasicInformations");

                    b.Navigation("CipTeams");

                    b.Navigation("Cips");

                    b.Navigation("CommitteeManagements");

                    b.Navigation("CommunityTrainings");

                    b.Navigation("DepartmentalTrainings");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("IndividualLDFInfoForms");

                    b.Navigation("InternalLoanInformations");

                    b.Navigation("LabourDatabases");

                    b.Navigation("Meetings");

                    b.Navigation("OtherCommitteeMembers");

                    b.Navigation("OtherLabourMembers");

                    b.Navigation("OtherPatrollingMembers");

                    b.Navigation("PatrollingScheduleInformetions");

                    b.Navigation("PatrollingSchedulings");

                    b.Navigation("RegistrationArchives");

                    b.Navigation("SavingsAccounts");

                    b.Navigation("SocialForestryMeetings");

                    b.Navigation("SocialForestryTrainings");

                    b.Navigation("SurveyPermanentUpazillas");

                    b.Navigation("SurveyPresentUpazillas");

                    b.Navigation("Unions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.InternalLoan.InternalLoanInformation", b =>
                {
                    b.Navigation("ApprovalLogForCfms");

                    b.Navigation("BeneficiarySubmissionHistorys");

                    b.Navigation("InternalLoanInformationFiles");

                    b.Navigation("RepaymentInternalLoans");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.LabourDatabase", b =>
                {
                    b.Navigation("LabourDatabaseFiles");

                    b.Navigation("LabourWorks");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Labour.OtherLabourMember", b =>
                {
                    b.Navigation("LabourDatabases");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.Meeting", b =>
                {
                    b.Navigation("MeetingFiles");

                    b.Navigation("MeetingParticipantsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingMember", b =>
                {
                    b.Navigation("MeetingParticipantsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.MeetingManagement.MeetingType", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Module", b =>
                {
                    b.Navigation("AccessList");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Patrolling.OtherPatrollingMember", b =>
                {
                    b.Navigation("PatrollingPaymentInformetions");

                    b.Navigation("PatrollingScheduleInformetions");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Patrolling.PatrollingScheduleInformetion", b =>
                {
                    b.Navigation("PatrollingPaymentInformetions");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingScheduling", b =>
                {
                    b.Navigation("PatrollingSchedulingFiles");

                    b.Navigation("PatrollingSchedulingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PatrollingSchedulingInformetion.PatrollingSchedulingMember", b =>
                {
                    b.Navigation("PatrollingSchedulingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionHeaderSettings", b =>
                {
                    b.Navigation("PermissionRowSettings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.ConcernedOfficial", b =>
                {
                    b.Navigation("ConcernedOfficialMap");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.CostInformation", b =>
                {
                    b.Navigation("CostInformationFiles");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.CostType", b =>
                {
                    b.Navigation("CostInformation");

                    b.Navigation("ReplantationCostInfos");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.CuttingPlantation", b =>
                {
                    b.Navigation("LotWiseSellingInformation");

                    b.Navigation("Realizations");

                    b.Navigation("ShareDistributions");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.DistributionFundType", b =>
                {
                    b.Navigation("DistributionPercentages");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.LotWiseSellingInformation", b =>
                {
                    b.Navigation("Realizations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Cutting.ShareDistribution", b =>
                {
                    b.Navigation("DistributedToBeneficiary");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.InspectionDetails", b =>
                {
                    b.Navigation("InspectionDetailsMap");

                    b.Navigation("ReplantationInspectionMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.LaborCostType", b =>
                {
                    b.Navigation("LaborInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.LaborInformation", b =>
                {
                    b.Navigation("LaborInformationFiles");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.LandOwningAgency", b =>
                {
                    b.Navigation("NewRaisedPlantations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.NewRaisedPlantation", b =>
                {
                    b.Navigation("ConcernedOfficialMap");

                    b.Navigation("CostInformation");

                    b.Navigation("CuttingPlantations");

                    b.Navigation("InspectionDetailsMap");

                    b.Navigation("LaborInformation");

                    b.Navigation("PlantationDamageInformation");

                    b.Navigation("PlantationFiles");

                    b.Navigation("PlantationPlants");

                    b.Navigation("PlantationSocialForestryBeneficiaryMaps");

                    b.Navigation("Replantations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryInformation", b =>
                {
                    b.Navigation("ConcernedOfficialMap");

                    b.Navigation("CostInformations");

                    b.Navigation("InspectionDetailsMap");

                    b.Navigation("NurseryDistributionDetails");

                    b.Navigation("NurseryRaisedSeedlingInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryRaisingSector", b =>
                {
                    b.Navigation("NurseryInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Nursery.NurseryType", b =>
                {
                    b.Navigation("NurseryInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.NurseryCostInformation", b =>
                {
                    b.Navigation("CostInformationFiles");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationCauseOfDamage", b =>
                {
                    b.Navigation("PlantationDamageInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationTopography", b =>
                {
                    b.Navigation("NewRaisedPlantations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationType", b =>
                {
                    b.Navigation("DistributionPercentages");

                    b.Navigation("NewRaisedPlantations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.PlantationUnit", b =>
                {
                    b.Navigation("NewRaisedPlantations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.ProjectType", b =>
                {
                    b.Navigation("NewRaisedPlantations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.Reforestation.Replantation", b =>
                {
                    b.Navigation("ReplantationCostInfos");

                    b.Navigation("ReplantationDamageInfos");

                    b.Navigation("ReplantationInspectionMaps");

                    b.Navigation("ReplantationLaborInfos");

                    b.Navigation("ReplantationNurseryInfos");

                    b.Navigation("ReplantationSocialForestryBeneficiaryMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryBeneficiary", b =>
                {
                    b.Navigation("DistributedToBeneficiary");

                    b.Navigation("PlantationSocialForestryBeneficiaryMaps");

                    b.Navigation("ReplantationSocialForestryBeneficiaryMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryDesignation", b =>
                {
                    b.Navigation("ConcernedOfficials");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.SocialForestryNgo", b =>
                {
                    b.Navigation("NewRaisedPlantations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestry.ZoneOrArea", b =>
                {
                    b.Navigation("NewRaisedPlantations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.MeetingTypeForSocialForestryMeeting", b =>
                {
                    b.Navigation("SocialForestryMeetings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeeting", b =>
                {
                    b.Navigation("SocialForestryMeetingFiles");

                    b.Navigation("SocialForestryMeetingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryMeeting.SocialForestryMeetingMember", b =>
                {
                    b.Navigation("SocialForestryMeetingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.EventTypeForTraining", b =>
                {
                    b.Navigation("SocialForestryTrainings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.FinancialYearForTraining", b =>
                {
                    b.Navigation("SocialForestryTrainings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTraining", b =>
                {
                    b.Navigation("SocialForestryTrainingFiles");

                    b.Navigation("SocialForestryTrainingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.SocialForestryTrainingMember", b =>
                {
                    b.Navigation("SocialForestryTrainingParticipentsMaps");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SocialForestryTraining.TrainingOrganizerForTraining", b =>
                {
                    b.Navigation("SocialForestryTrainings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Trades.Trade", b =>
                {
                    b.Navigation("AIGBasicInformations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.TransactionMangement.FundType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.TransactionMangement.Transaction", b =>
                {
                    b.Navigation("ExpenseDetailsForCDFs");

                    b.Navigation("TransactionFiles");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.User", b =>
                {
                    b.Navigation("AccountDeposits");

                    b.Navigation("AccountTransferLogs");

                    b.Navigation("AccountTransfers");

                    b.Navigation("AccountsUserTagLogs");

                    b.Navigation("ApprovalLogForCfmsReceiver");

                    b.Navigation("ApprovalLogForCfmsSender");

                    b.Navigation("BankAccountsInformations");

                    b.Navigation("GroupLDFInfoForms");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("PermissionRowSettings");

                    b.Navigation("RepaymentLDFHistories");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserRole", b =>
                {
                    b.Navigation("ApprovalLogForCfmsReceiverRole");

                    b.Navigation("ApprovalLogForCfmsSenderRole");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("PermissionRowSettings");

                    b.Navigation("UserRolePermissionMaps");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
